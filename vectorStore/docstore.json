[["0",{"pageContent":"{\n  \"title\": \"2016\",\n  \"date\": \"01/08/2017\"\n}\n---\n\nI'm typically forward looking and barely take time to reflect (not to say\nthose two things are mutually exclusive). However, last year was a especially unique and\ncrazy, so in honor of that (and the new blog design) I decided to sit down,\nreflect, and write something.\n\nThis will be roughly chronological going through the big events that took place last\nyear, and will conclude with some books, lectures, and ideas that had a big\nimpact on my thinking and worldview.\n\n## Leaving Facebook\n\nAt the beginning of the year it seemed like I finally arrived at job\nhappiness. In 2015 I helped start the JS Infra team at Facebook. The motivation\nfor building this team came from my experience building the React Native Packager where I noticed that the\ninfrastructure that we're basing our development toolkit on was poorly\nmaintained, bug-ridden and in some cases poorly designed with no hope without a\nfull rewrite (or replacement).\n\nSo we assembled an amazing team of engineers to build out the basic building blocks that\nwould power Facebook's JavaScript development (and hopefully the JS community at large).\n\n<img src=\"/public/images/js_infra.jpg\" />\n_JS Infra sailing off-site. Not in the photo: Christoph Pojer (which was taking the photos). And our\nmanager Tom Occhino_\n\n\nAlthough the JS infra team was deeply technical and in some cases working on\nproblems a few layers removed from the developer experience, we always thought\nit's best to start from the user experience and work our way backwards. For\ninstance, I remember talking to\nsomeone from the Parse team who told me about a metric they used to make sure their\ntools are easy to get started with: TTH, time till hello world. So when the time came to think about how people would get started with React\nNative, it was obvious that the CLI needs to be robust enough to guide the user\nall the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject","metadata":{"id":0}}],["1",{"pageContent":"all the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run\n```\n\nAlthough our team wasn't perfect, we had immediate impact starting with the\nfirst half in our existence. We worked on and released Babel 6, which took Babel\nfrom being merely a transpiler to being a platform and a compiler toolkit. We switched over\nFacebook's entire JS infrastructure to use it. And not only used it for transpiling\nit was now being used by teams throughout the company for things like i18n,\naccessibility, optimization and so much more! We fixed Jest and it became a few order\nof magnitudes faster. We continued improving on the React Native packager which\nbecame a central piece of infrastructure at the company (both as a\ndevelopment tool and as a build system).\n\nUnfortunately, not everyone at the company believed that our team's existence is\njustified. There was a big push to work on performance (which I\nthought was justified since the website was very slow). So there was a lot of pressure on\nus to dump everything that we're working on and focus a 100% on performance.\n\nI didn't agree that\nwhat we're doing and the performance goal weren't aligned. But in the\nend I lost the office politics game and our team was all but\ndismantled. Luckily, I had a great manager, and great support from many other\npeople at the company. So I was given a chance to find something I could\nbe as passionate about. But to be honest, my passion had already drifted\ntowards an old but growing side project of mine.\n\n(A new and improved version of the team has now reassembled and are building\namazing things for the JS community -- like the Yarn package manager!)\n\n## Starting Repl.it (the company)\n\nIn 2015 Haya Odeh and I planned to give an old side project of\nours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of","metadata":{"id":1}}],["2",{"pageContent":"ours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of\nthousands of people using it a month. We started researching, visiting our\nusers, and doing surveys. We found that our biggest impact was on physical\nclassrooms across the country and the world. (Which was not that big of a\nsurprise).\n\n<img src=\"/public/images/replit_school.jpg\" />\n_Haya talking to students using Repl.it at the Mountain View High school_\n\n[Repl.it](https://repl.it) was\nalways at least partly about education. Back in school, I was displeased with the fact that every\nclass I went to\nhad to spend hours installing software. And I watched the instructor struggle to\nget everyone's compilers and editors setup (with matching versions). I started\ndreaming up a site where you open a new tab and start coding. And in 2011 that's\nwhat we built and not only did it help with that, we open-sourced the underlying\nexecution engine (built with emscripten) which went to on power many\nlearn-to-code websites (most famously, Codecademy, which I joined as the #1\nemployee).\n\nOne thing lead to another, and my brother Faris joined us in working on the\nproject and we ended up not only redesigning the website, but we added user\naccounts, built a [cloud-based code execution engine](https://repl.it/api) and\nmany smaller features. We also started planning a totally new product on top of\nour core offering -- a classroom product that automates many of the tedious tasks\nwe noticed a teacher has to do to manage their classroom. Things like submitting\nhomework, giving feedback on homework, and tracking student progress.\n\nWe incorporated in May, 2016 with the mission to make programming more\naccessible. We're building powerful yet simple coding interfaces for programmers\nand students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom","metadata":{"id":2}}],["3",{"pageContent":"and students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom\n\nWe rushed to build our first major product as a company. After tons of\nresearch and a tight feedback loop with a handful of teachers it was ready for\nthe release just before the fall school season started. We launched in August and much\nto our surprise that put us on an exponential growth curve. Professors at universities\nlike CMU signed up and used us to teach \"Math Background for Machine\nLearning\", followed by MIT, Cornell and many others. Bootcamps like Hack Reactor and App Academy used us for introductory\ncourses. And high-schools across the US, UK, Japan, and elsewhere in the world\nstarted signing up.\n\n<img src=\"https://repl.it/public/images/studentenvironment.png\" />\n_The student environment_\n\n### Partners\n\nWe're so lucky to be in this part of the world -- Silicon Valley is a place where immigrants can\ncome in and build companies. We're double lucky to have found the support and\nmentorship of amazing people. Repl.it is now backed by Bloomberg Beta and Reach\ncapital and I could've never imagined that the founder/investor relationship\ncould be this good. We're still starting out and the journey is only 0.0001%\ncomplete (Facebook likes to say it's 1% complete), but whatever modest success\nwe achieved we couldn't have done it without the support and mentorship of Roy\nBahat, Wayee Chu, Christina Cacioppo, Chris Mather, and Ly Nguyen.\n\n### Repl.it in 2017\n\nWe spent the last quarter of 2016 focused on the core REPL product -- adding\nmore power yet maintaining the simplicity. We added support for [third-party\nlibraries](https://repl.it/site/blog/package-search), implemented a\n[debugger](https://repl.it/site/blog/python-debugger), and live file updates.\nYou can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_","metadata":{"id":3}}],["4",{"pageContent":"You can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_\n\nWe also grew the team and hired our first employee. This month, we'll be moving\nto our first private office and we're hoping to add more engineers to the team\nsoon. We have a lot of interesting technical challenges, and we'd like to think\nwe're working on an important mission, if that's interesting to you then\nconsider joining us :)\n\nThis year we're going to continue being heads-down focused on product and\ntechnology. We have a lot of interesting features in the pipeline. But most\nimportantly we want to find ways to have our teachers, students, and\nengineers collaborate with each other and build an awesome community.\n\n## Thoughts, books, etc\n\n#### Coming to terms with Physicalism\n\nYou don't notice how much outdated belief you have in your head until you\nsit down and examine them. In a recent talk, [Alan Kay\ndescribes](https://www.youtube.com/watch?v=fhOHn9TClXY&feature=youtu.be&t=1h1m6s)\nhow every 3-5 years he sits down and writes down all his beliefs in an effort to\nupdate them.\n\nThis year I did this for my worldview and my philosophy on the\nnature of the universe. Physicalism is the thesis that everything is\nphysical. That means -- among many other things -- that your mind/soul is a product of the physical processes\nin your body, and it obeys the laws of physics just like an apple falling from a\ntree. The implications here are big and many. It also could be scary, but luckily I was aided\nby a few books that I recommend to anyone who wants to come to terms with this.\n\n#### [Rationality: From AI to Zombies](https://intelligence.org/rationality-ai-zombies/)\n\nTo build an AI you need to understand and describe how the human mind works (and\nhow it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words","metadata":{"id":4}}],["5",{"pageContent":"how it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words\nof Richard Feynman: \"You are the easiest person to fool\".\n* Using a mix fables and science the author gently guides you from the default dualist\nbelief (mind is separate from the body/world) to a purely physical world.\n* Presents different ways to think about some of the seeming absurdities of Physicalism (for\nexample, are we all just cogs in the unwinding clock that is the universe?).\n\nThe book has all sorts of tips and tricks to help you face up to the truth. One\nof my favorites is the [\"Litany of\nGendlin\"](https://wiki.lesswrong.com/wiki/Litany_of_Gendlin):\n\n>What is true is already so.<br/>\n>Owning up to it doesn't make it worse.<br/>\n>Not being open about it doesn't make it go away.<br/>\n>And because it's true, it is what is there to be interacted with.<br/>\n>Anything untrue isn't there to be lived.<br/>\n>People can stand what is true,<br/>\n>for they are already enduring it.\n\n#### [The Beginning of Infinity: Explanations That Transform the World](https://www.amazon.com/Beginning-Infinity-Explanations-Transform-World/dp/0143121359)\n\nThis book layed out the basis for a hopeful and optimistic Physicalist\nworldview. It gives people (or universal explainers in general, as\nthe book calls them) a more privilege place in the universe. Yes, we are\n\"chemical scum\" that evolved via Darwinian selection but our reach can be\ninfinite. And our journey has just begun towards the infinite creation of knowledge.\n\n#### Personal Identity\n\nThe concept of \"self\" seems to be a hack. Evolution gave us this abstraction\nbecause it seems to simplify a lot of things -- most importantly,\nself-preservation (so we can take care of ourselves until we procreate). This\nidea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which","metadata":{"id":5}}],["6",{"pageContent":"idea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which\nplausibly breaks down the mind into modules and presents it as if it's a big\npiece of software.\n\nConsider how split brain patients seem to have two sides of their brains\nbehave somewhat autonomously (as if it's a different person). In this\n[video](https://youtu.be/aCv4K5aStdU?t=1m35s) the patient's right hemisphere is\nshown a word (via his left eye) but he couldn't say what it was. However, when\nhe closed his eyes and started drawing he was able to draw a pan (which is the\nword that he saw).\n\nThis is just scratching the surface, earlier this year I started reading [Reasons\nand Persons](https://www.amazon.com/Reasons-Persons-Derek-Parfit/dp/019824908X)\nby the late Derek Parfit (died a few days ago). It includes all sorts of\nthought experiments that all but destroys the concept of self. I couldn't\nfinish the book because it was too hard and jargony. However, luckily, I found\na course on YouTube titled [Death](https://www.youtube.com/watch?v=p2J7wSuFRl8&list=PLEA18FAF1AD9047B0) that draws heavily from Parfit's work on\npersonal identity. And this completely shattered how I thought about my self and\nmy place in the world.\n\n<img src=\"http://ctl.yale.edu/sites/default/files/kagan.jpg\" />\n\nI'm now more accepting of the fact that I and everyone I know and love\nwill die in the not very distant future. I feel more connected to other\npeople. And finally understand what it means to have an impact in the\nworld (improve lives and reduce suffering).\n\n\n(For a quick primer on the subject I recommend Wait But Why's [\"What Makes You\nYou?\"](http://waitbutwhy.com/2014/12/what-makes-you-you.html) essay).\n\nThanks for reading.","metadata":{"id":6}}],["7",{"pageContent":"{\n  \"title\": \"Easier Concurrent Programming in JavaScript with Async Functions\",\n  \"date\": \"10/31/2015\"\n}\n---\n\nWe're about to introduce async functions internally at Facebook so\nI'm taking the time to  reflect on how this could be a great win for building\nreliable software.\n\nWhen I joined the company, I worked on a team tasked with improving\nphoto upload reliability on the site. We were failing 1 out of 10\npeople that tried to upload a photo album. Which translates to\nmillions of people having terrible experiences on daily basis. One of the first\nthings that we struggled with was understanding the ordering of\noperations. The system was made up of multiple components (Flash for\nimage re-sizing, UIs, Controllers, Servers) that had to asynchronously\ncommunicate via JS and was all done in callbacks. This made debugging\nreally hard. Sometimes callbacks will get lost and never get called,\nat times they will be called multiple times, sometimes errors will\noccur after the callback is called and never gets reported. Not to\nmention all the horrible race conditions that we saw. And this is not something\nthat is limited to Facebook, or that can only happen at our scale. I\nwas in similar situations at small startups too. This can happen in\nany sizable (potentially distributed) system written in JavaScript\nusing callbacks.\n\nWhen I first started learning JavaScript, one of things people praised\nit for was: \"easy concurrent programming\". The argument goes \"it's a\nsingle-threaded process with a strict run-to-completion programming\nmodel and that means you can't have race conditions\". Turns out that\ncan't be further from the truth. The definition of race conditions is\nnot tied to multithreading. It is simply when you have a system that\nis dependent on the sequence of events from multiple components and\nthen the components behave in an unintended way. Which brings me to the\npoint of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected","metadata":{"id":7}}],["8",{"pageContent":"point of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected\nordering of events explicit and makes it easier to recover from\nfailures in subcomponents.\n\nI will illustrate this by going through an example of building a\nvending machine. Everything in the vending machine costs 1 cent, but\nthe machine can take in any coin that is worth any arbitrary number of\ncents. A sample run of this machine:\n\n * Insert a quarter\n * Select an item\n * Dispense the item\n * Return 24 cents change\n\nHere is my initial implementation:\n\n* A `VendingMachine` class with two public methods\n* `coin(value)` inputs a coin with a given value in cents to the machine\n* `select(item)` inputs an item selection to the machine\n* Two subcomponents `itemDispenser` and `change` resoponsible for\ndispensing the items and returning the change respectively\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    this.cents = value;\n  }\n\n  select(item) {\n    this.itemDispenser.dispense(item, () => {\n      this.change.return(this.cents - 1);\n    });\n  }\n}\n```\n\nSimple enough. But of course it's missing a few things. First of\nall there is no error handling:\n\n* What if the `itemDispenser` failed? We should of course return all the money.\n* What if the `change` component failed? We should get into broken\nstate so we don't accept any more coins until someone fixes the\nmachine.\n\nLet's add error handling and a broken state.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the","metadata":{"id":8}}],["9",{"pageContent":"}\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the\noutside world behaved in an unintended way? In other words, what\nif someone selected an item without paying? What if someone inserted\ntwo coins without selecting an item? Ideally we'd have input queuing,\nbut let's keep it simple for now.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nCan you spot the potential race condition?\nWhat if you inserted a coin, selected an item, then before the machine\ngets a chance to dispense the item and return the change you selected\nanother item? We should make sure `this.cents` is updated right after\nthe selection.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    // Immediately update to avoid race conditions\n    this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }","metadata":{"id":9}}],["10",{"pageContent":"this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nBut wait, are we really done? What if you inserted a coin, selected an\nitem, and then immediatly inserted another coin? That coin is then\nlost in limbo. We should gaurd the entire the process with another\nstate variable. But the problem is that every time we add a state\nvariable it makes the program harder to understand and\ntest, and presents more race hazards. Who would've thought a program\nwith two input events can be so complex to build reliabily. I'll spare\nyou anymore inspection and iteration and directly jump to what\nany sensible programmer would do when presented with this\nchallenge: build a state machine.\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.state = IDLE;\n    this.queue = [];\n  }\n\n  coin(coin) {\n    if (this.state === BROKEN) {\n      return console.error('Machine broken');\n    }\n\n    this.queue.push(coin);\n    this.dispatch();\n  }\n\n  dispatch() {\n    if (this.state !== IDLE) {\n      return;\n    }\n\n    this.cents = this.queue.shift();\n    this.state = WAIT_FOR_SELECT;\n  }\n\n  break(err) {\n   console.error(err.message);\n   this.state = BROKEN;\n  }\n\n  select(item) {\n    if (this.state === IDLE) {\n      return console.error('Please insert coin');\n    }\n\n    if (this.sate !== WAIT_FOR_SELECT) {\n      return console.error('Processing existing order');\n    }\n\n    let change = this.cents - 1;\n    this.itemDespenser.despense(item, err => {\n      if (err) {\n        console.error('Error dispensing item');\n        change += 1;\n        return;\n      }\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```","metadata":{"id":10}}],["11",{"pageContent":"}\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```\n\nI think I got it right. But who knows, you wouldn't know by reading\nthe program, you'd need to write a lot of unit tests to convince\nyourself that it works. And then write some pseudocode in comments to\nexplain what you intended to do here for future programmers. But even\nthen there is room for failure. One of the subcomponents can call our\ncallback multiple times causing all kind of failures to happen.\n\nNow that we've explored how hard building something -- that is\nconceptually easy -- using callbacks can be. Let's try with a\nbetter concurrency primitive, namely async functions.\n\n_If you're not familiar with async functions, [read this intro\nfirst](https://jakearchibald.com/2014/es7-async-functions/)._\n\nHere's how we'll structure our code for the `async` version:\n\n* We'll be using a data-structure called `PromiseQueue` (it's really\nsimple and can be implemented in ~20 lines of code)\n* A `PromiseQueue` has two methods `put` and `get`. `get` would return\na promise that can only be resolved once we put something into the queue\n* We'll be using two promise queues, one for the coins and one for the\nitems\n* We'll have a main run loop that will run indefinitely or until the\nmachine breaks\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.coins = new PromiseQueue();\n    this.items = new PromiseQueue();\n    this.brokenErr = e;\n    this.run().catch(e => this.brokenErr = e);\n  }\n\n  coin(coin) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.coins.put(coin);\n  }\n\n  select(item) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {","metadata":{"id":11}}],["12",{"pageContent":"}\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {\n        await this.itemDispenser.dispense(item);\n      } catch (e) {\n        console.error('Error dispensing item');\n        change = cents;\n      }\n\n      try {\n        await this.change.return(change);\n      } catch (e) {\n        console.error('Error returning change');\n        throw e;\n      }\n    }\n  }\n}\n```\n\nLook how beautiful this is. Everything you need to know about the program you'll know by\nreading the `run` function. A single function that reads exactly like\nhow we described the machine should work. We are even using elementary\ncontrol flow, like try/catch, and while loops! What's more, the entire state\nof the machine are basically local variables. That leaves less room\nfor races to happen. Which brings me to the conclusion:\n\n> [Co-routines are to state machines what recursion is to stacks](http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/)\n\nCo-routines are the generalized form of async functions. Where async\nfunctions can only pause execution while waiting on a promise,\nco-routines allow\nmultiple entry points for functions to suspend and resume\nexecution. [ES6\ngenerator\nfunctions](http://tobyho.com/2013/06/16/what-are-generators/) are an\nexample of a generalized co-routines. So, similar to how recursion\ncan help process nested data-structures without using explicit stacks,\nco-routines helps solve problems involving state without using explicit state machines.","metadata":{"id":12}}],["13",{"pageContent":"{\n  \"title\": \"The dark side of Function.prototype.bind\",\n  \"date\": \"07/02/2012\",\n  \"hidden\": true\n}\n---\n\ntitle:\nauthor: Amjad Masad\ndate:\n\n\n`.bind` is a method found on function objects that statically associates the function with a receiver object `this`. It is implemented in ECMAScript 5 (The current version of JavaScript) and by many JavaScript libraries.\n\nWhen writing Object Oriented JavaScript, you often find it useful to pass object methods as arguments to other functions (callbacks). At a later time when the method is invoked the `this` may change from under your feet to undefined in [Strict Mode](https://developer.mozilla.org/en/JavaScript/Strict_mode) or the window object.\n\nThe following will demonstrate the problem:\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA;\n    fn(); // undefined\n\n\n\nUsing `.bind`\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA.bind(o);\n    fn(); // 1\n\n\nDon't be fooled `bind` has its share of weird behavior.\nThis is expected:\n\n\n    var fn = o.getA;\n    fn === o.getA; //true\n\n\nHowever this:\n\n\n    var fn = o.getA;\n    fn === o.getA.bind(o); //false\n\n\n\nThis happens because `.bind` constructs and returns a new function that is statically bound to an object (`o` in our case).\n\nBefore writing this post a quick google search of a typical language feature rant (\"considered harmful\") brought up an excellent [article](http://pmuellr.blogspot.com/2010/06/bind-considered-harmful.html) by @pmuller where he explains the performance and debugging issues associated with `.bind` and his own and other's dislike to the aesthetics of using it. However I found it lacking the real practical issue that would be most annoying and counterintuitive when using `.bind` in client-side JS.","metadata":{"id":13}}],["14",{"pageContent":"When building large JS apps, it's smart to try and approach it in a structured manner and use an MVC-like library like [Backbone](http://backbonejs.org/), others, or create your own thing. Whatever you do, you'll most probably end up with libraries that has views or widgets using a JS \"class\". Consider the following simple editable text widget:\n\n\n    // http://jsfiddle.net/TE2Cq/\n\n    var Editable = function (initialValue) {\n        this.initialValue = initialValue || ''\n        this.$container = $('<div/>').appendTo('body');\n        this.$input = $('<input type=\"text\">').appendTo(this.$container).hide();\n        this.$span = $('<span/>').appendTo(this.$container).text(this.initialValue);\n        this.$reset = $('<button>').appendTo(this.$container).text('reset');\n        this.bindEvents();\n    };\n\n    Editable.prototype.bindEvents = function () {\n        this.$span.click(this.startEdit.bind(this));\n        var that = this;\n        this.$input.blur(this.stopEdit.bind(this)).keydown(function (e) {\n            if (e.which === 13) that.stopEdit();\n        });\n        this.$reset.click(this.reset.bind(this));\n    };\n\n    Editable.prototype.startEdit = function () {\n        this.$span.hide();\n        this.$input.show().val(this.$span.text()).select();\n    };\n\n    Editable.prototype.stopEdit = function () {\n        this.$span.text(this.$input.val()).show();\n        this.$input.hide();\n    };\n\n    Editable.prototype.reset = function () {\n        this.$span.text(this.initialValue);\n    };\n\n\nThis looks great and from a quick look it seems like a library that will allow for extending, sub-classing, overriding, mixins etc. But in reality it isn't as dynamic as a JavaScript class should be. JS classes are really nothing more than a function (constructor) with a prototype and some functions we tend to call \"methods\" in that case attached to it that are by nature not bound and hence free agents that allow for and should be thought of as reusable functions.","metadata":{"id":14}}],["15",{"pageContent":"Let's say I want to use the editable widget so I include the library on my page and instantiate it:\n\n\n    var editable = new Editable('Hello World');\n\n\nIt renders and it does most of what I want from an editable field. However I need this one more confirm dialog step before resetting any editable field. So from my understanding of JavaScript and how prototypes and method (or property) dispatch work, I would intuitively think the following should work:\n\n\n    editable.reset = function () {\n        if (window.confirm('Are you sure you want to reset the text field?')) {\n            Editable.prototype.reset.call(this);\n        }\n    }\n\nThis would successfully override the `reset` method on the instance and be able to call the super method. However clicking the reset button the widget had created before would ignore what we just did here and just execute the original method. This is because we passed it a bound version of the method that on it's own became a living thing that we don't have a reference to and can never easily be unbound as the click event handler.\n\n    $('.greet').click(user.greet.bind(user));\n    // The following will not work since user.greet != user.greet.bind(user)\n    $('.greet').off('click', user.greet);\n\nThe override problem can be easily solved by a bind function that doesn't break [Dynamic Dispatch](http://en.wikipedia.org/wiki/Dynamic_dispatch#JavaScript_Implementation).\n\n    // A simple bind function that takes an Object `obj`\n    // and a method `m` and returns a function that will\n    // lookup the method `m` in `o` and call it with the\n    // object `o` as the context.\n    var bind = function (obj, m) {\n        return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions","metadata":{"id":15}}],["16",{"pageContent":"return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions\n\nA language like JavaScript is naturally geared towards reuse and if I as a library user that for the most part know what I'm doing, choose to use your (the library creator) function on my own object then I should be able to.\n\nCoffeeScript (and [EcmaScript Next](http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax)) introduces new function syntax that makes it stupidly simple to statically bind functions on objects which is probably going to be convenient for the library creator (I'm guilty of doing it before CoffeeScript many times for the convenience). However it will be a nightmare for users trying to get any of the promised dynamism out of the language, I believe.\n\n\n    class Foo\n      constructor: -> @bar = 1\n      getBar: =>\n        @bar\n\n    foo = new Foo()\n    alert foo.getBar.apply bar: 2 # 1\n\n    Foo::getBar = -> 99\n    # Can't even monkey patch :(\n    alert foo.getBar() # 1\n\n\n\n## Conclusion\n\nI think I like the dynamic nature of JS and would like to use it the way it was built to be used and quit trying to make it act like something it's not. As a community we should promote and enable reuse in classes, modules, widgets, etc. I particularly like libraries which were built with reuse in mind and has clean and readable source code. I've mentioned Backbone before as it's recently becoming one of my favorite libraries, however it's guilty of statically binding methods as handlers to delegated events.","metadata":{"id":16}}],["17",{"pageContent":"{\n  \"title\": \"Caching and Promises\",\n  \"date\": \"03/05/2016\"\n}\n---\n\nIt's fascinating to me how something that can be described so simply can also be\ntricky to implement. Caching is the idea of keeping around results of\ncomputations or outside-world-reads so it's easily accessible the next time\naround.\n\nComplications arise when we have different modules at different times being\ninterested in the same data. And fetching something from memory (cached) is\nfundamentally different from, for example, reading it from disk or a remote\nhost. In JavaScript, the latter is implemented as an asynchronous call. And\nsince we usually don't know the order of calls ahead of time we're left with\nhaving to provide a consistent interface to all callers regardless of where the\ndata is being fetched from. You'd also need to handle cases where callers ask\nfor data concurrently. Meaning that we may get another call while we are still\nfetching the data and now we're left to manage calling the clients back in the\nright order that they called us in.\n\nThe good news is that we can use Promises to:\n\n1. Not have to distinguish between first and subsequent calls\n2. Provide a consistent async interface\n3. Manage callbacks and error propagation\n\n<script src=\"//repl.it/embed/BtUs/11.js\"></script>\n\nA more interesting example would be something that needs to change it's internal\nstate. However, we need to do it in a way that doesn't require synchronous and\nmutative access to the data. One of our criteria is to blur the distinction between readily\navailable data and things we haven't fetched yet. We also don't want different\nmutation calls to effect each other. Ideally, every call would get it's own copy\nof the data that reflect the state of the world at the time of the call.\n\nWe can handle this by chaining promise calls that will result in new instances\nof the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will","metadata":{"id":17}}],["18",{"pageContent":"of the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will\nget a copy of the data without the changes that were made by other callers.\n\n<script src=\"//repl.it/embed/BtUs/12.js\"></script>\n\n------------------------------------------------\n\n### Stores and Loaders\n\nCaching can be hard if we have to continually answer the question: Do we have\nthe data in memory or do we need to fetch it? We just showed how we can use\npromises to simplify this. However, it doesn't take into account function\nparameters. A robust caching system has to be able to associate results with\ninputs, be it URLs, file names, or arbitrary function parameters. To this end we\ncan create a store abstraction that will store things in the form of key/values.\nBut this presents a new challenge of having to synchronize fetching data and\nstoring it.\n\nYou can imagine two `get` calls to the stores for something we don't have a\nresult for yet. Then these two callers would go about concurrently trying to\ncompute or fetch the data and then come back and try to set it in the store. And\nnow we have a duplication of work and something akin to a race condition when it\ncomes to writing the result back to the store. We can add an `isFetching` flag\nto the store but that brings us back to square one of having to manage\ncallbacks. Here again we can use promises to solve this problem. In addition\nto managing callbacks for us they'll provide something which we can call the\n\"loader\" interface.\n\n<script src=\"//repl.it/embed/BtUs/9.js\"></script>\n\nSo instead of having the callers arbitrarily check and set data on the store, we\ncan instead only expose a `get` method that will take a key and a loader\nfunction that if called should return a promise for the value. That way the\nfirst time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization","metadata":{"id":18}}],["19",{"pageContent":"first time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization\n\nSo far we've seen how we can remove the burden of having to check whether something\nis in memory or not at every turn. If we\ngeneralize this a bit we can say that callers should *always* call functions\nregardless of the current state. This is commonly referred to as\nmemoization and it allows us to build faster programs without compromising on\nsimplicity. That's partly why frameworks like React are popular -- it unburdens\nthe programmer from dealing with stateful objects like the DOM. You *always* render.\nJust like you *always* call.\n\nAll the caching techniques powered by promises that we talked about here can\ncome in handy when building large programs that conceptually looks like\ngood old simple and stateless programs without compromising on performance.\n\nMy personal experience with this was with building the [React Native\nPackager](https://github.com/facebook/react-native/tree/87245b2d40a865290fbeb4d8f5474fb8b5c1b891/packager)\nand the [module resolver](https://github.com/facebook/node-haste).\nOne of our goals with React Native is to bring the fast feedback loop we're used\nto in web development to native. However, when we looked at\nbundlers in the wild we found that for any sizable project they took\n10s of seconds to recompute the bundle after a single file change.\nSo we had to build our own with performance as the defining feature.\n\nThe entire system was built to be lazy and heavily cached using the techniques\noutlined in this article. When we get a request for a bundle\nwe go through and  apply the module resolution algorithm\nrecursively while reading all the necessary files. And then we compile the files\nin parallel and finally combine everything in a single bundle and generate the\nsourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we","metadata":{"id":19}}],["20",{"pageContent":"sourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we\nfan-out in the tree of calls to generate the bundle most things will be cached\nand the result is instantly returned from memory. The whole thing takes up to a\nhundred milliseconds to execute.\n\nWhen a file changes we invalidate the caches concerning that file and we simulate\na request that would go through entire process again but this time recomputing\nparts of the process concerning the changed file (and any other artifacts\naffected by it). This will take less than a second to\nfinish. And by the time the actual request comes in from the client we have\neverything cached!","metadata":{"id":20}}],["21",{"pageContent":"{\n  \"title\": \"John Carmack on Idea Generation\",\n  \"date\": \"03/09/2016\"\n}\n---\n\nLast year at an internal talk at Facebook I was fortunate to see [John\nCarmack](https://en.wikipedia.org/wiki/John_Carmack) speak about his idea generation system. At first I was disappointed\nbecause I was expecting one of Carmack's famous technical talks where he spends hours talking\nnon-stop about programming languages, game development, large scale software\nengineering and many other interesting technical topics.\n\nInstead, he opened with talking about -- what is now a Silicon Valley cliche --\nhow ideas are overrated and execution is everything. Of course, cliches are\nsometimes cliches because they're true. However, things took an interesting turn\nwhen he mentioned the \"Antifragile\" concept.\n\n## Antifragile\n\nA phenomena discovered by Nicholas Nassim Talib that describes things that are\nthe opposite of fragile. We don't currently have a word to describe this in\nEnglish. You might think that words like \"robust\" or \"resilient\" come close\nbut actually those words describe systems that don't break under stress, but\nwhat about things that benefits from stress?\n\nTo me, this was one of those questions that you realize is simple but\nyou're surprised that it hasn't entered your consciousness until this day.\n\nHere is the description from the [Antifragile book](http://www.amazon.com/gp/product/B0083DJWGO/ref=dp-kindle-redirect?ie=UTF8&btkr=1):\n\n>Just as human bones get stronger when subjected to stress and tension, and rumors or riots intensify when someone tries to repress them, many things in life benefit from stress, disorder, volatility, and turmoil. What Taleb has identified and calls “antifragile” is that category of things that not only gain from chaos but need it in order to survive and flourish.\n\nAfter picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different","metadata":{"id":21}}],["22",{"pageContent":"After picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different\nway. To give only one example, I see large open source software as antifragile. The\nmore stress people put the software under the better it becomes. The more\npeople use it in unanticipated ways and the more code path combinations are\nexercised then the more bugs are found and fixed. In contrast, proprietary\nsoftware is usually used in controlled environments all the while building up\nfragility for a major catastrophic event waiting to happen (see [Black Swan\nTheory](https://en.wikipedia.org/wiki/Black_swan_theory)).\n\n## Antifragile Idea Generation\n\nIn programming and many other creative jobs you get many ideas in any single\nday, but you can only implement a fraction of them. The fraction you haven't\nimplemented you might start obsessing about. Everyone has their pet ideas that\nthey go around discussing. The more time this idea spends in your head the less\ncritically you think of it. Now, when the time comes to\nactually try implementing it, if it fails you're left discouraged, embarrassed and might even\nquit the project you're working on.\n\nThis is obviously a fragile system. You start neutral, get a small high when you\nfirst get the idea, and then it starts building up fragility while in your head. If and when it fails it's\ncatastrophic on your productivity.\n\nSo what does an antifragile system for generating ideas look like? First let's\nlay out some criteria:\n\n1. Antifragile systems are -- by definition -- able get the upside but are not\naffected by the downside. That means, we need to be able to get the initial idea\nhigh and the motivation that comes with it.\n2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:","metadata":{"id":22}}],["23",{"pageContent":"2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:\n\n1. You are working on a problem and you get an idea and with it the initial idea\nhigh\n2. You should instantly try to defeat your idea -- think of all the ways it\ncould not work, test it out, put it under stress\n3. If the idea survive the brutal scrutiny then it has legs for further\ninvestigations or implementation\n4. If the idea is implemented and it works then that's great\n5. If the idea fails the scrutiny or implementation you can quickly move on to\nthe next idea without feeling the lows because you haven't\nobsessed or talked about it i.e. it's not your pet idea.\n\nCarmack describes how this becomes like a game -- as soon as you get an idea you\ntry to defeat it. You'll be able to generate more ideas because you freed up\nmental space. Furthermore, your existing ideas will\neven be stronger because they survived heavy scrutiny.\n\n## In Practice\n\nI've been using this at work and in my personal life for a few months now and I\nrecommend it to everyone. I end up prototyping a lot more and going through many\niterations of ideas. And that reminded me of my early days of programming. Because I\ndidn't know what was possible or not, I had to vet all my ideas by\ncoding them up. I went through multiple VB projects in any single day.\n\nAt work, we're now focused on JavaScript and web performance, and found this an\nindispensable tool for this type of work. Optimization work (after crushing the\nlow-hanging fruit) is often counter-intuitive and many ideas that sound great in\ntheory end up tanking in practice. So to make progress we need to have a lot of\nideas and try many of them. And this gave me great framework to approach this with.","metadata":{"id":23}}],["24",{"pageContent":"{\n  \"title\": \"Why Learn Compilers\",\n  \"date\": \"12/29/2021\"\n}\n---\n\nA sufficient understanding of computers is impossible without learning how compilers and their parts work. It is like stepping into the computer's mind and seeing how it feels from the inside. Compilers are also some of the most satisfying programs to write. Finally, learning compiler technology can open new artistic avenues for you, and provide a skill bordering on a superpower.\n\n## A most fun sandbox\n\nBecause the most basic compiler architecture is standard, you have limited boundaries and degrees of freedom when designing one. This might sound restricting, but actually, it's freeing because you get to play in a predictable sandbox. \n\nAnd because compilers are largely deterministic closed-system problems -- for each input, there is one and only output -- it makes it really fun to iterate on a program without having to worry about external dependencies or a complicated setup. This lends itself nicely to test-driven development -- you can unit-test the component parts and write end-to-end tests for the compiler as a whole.\n\nWriting the test & debugging framework around compilers can also be really fun. To test a parser, for example, you need to run assertions on massive syntax trees, and you need to output helpful failure messages. You can go as far as writing a Domain-Specific testing language to make testing more pleasant.\n\n## A most magical flow experience\n\nThe most fun I had coding was when I led the JavaScript infrastructure team at Facebook. We were tasked with replacing [JSTransform](https://github.com/facebookarchive/jstransform), a string-manipulation-based JavaScript transpiler. Honestly, it's amazing it worked at all, but it didn't work very well. I resided in NYC but went up to our office in Cambridge to work with one other engineer there. However, I ended up mainly working alone, coming in every day for two weeks and writing code for 10 hours a day. I was in a state of flow.","metadata":{"id":24}}],["25",{"pageContent":"The leading expert on \"flow,\" Csikszentmihályi, identified that for a human to enter a this state, they need to be able to get direct and immediate feedback, for the problem to be well-defined, to have a balance between one's ability level and the challenge, and have a sense of control over the situation. I can't think of a better programming task that hits all those points than writing a compiler.\n\n## Useful skills\n\nI joined Yahoo! for my first job out of college, who'd just acquired a company in my hometown. As part of the acquisition, we were tasked with moving to the Yahoo! stack, and they were adamant about us using YUI instead of jQuery. The task fell on my lap, which felt like a crushing mountain of repetitive work. \n\nLike any good (read: lazy) programmer, I decided to automate the task. The task was more intricate than simply a massive search and replace because you had to deal with many variations of names, formatting, and patterns. I'd been learning about compilers and ASTs, and I figured this was an excellent time to deploy my newfound skills. \n\nFirst, I backfilled into YUI some jQuery-like to make the transition easier. Then I wrote a transformer that took in jQuery code and automatically translated the calls into YUI code. \n\nA many-month project turned into a week project. My colleagues were dumbfounded when they saw the volume of patches flying out of my desk. This is the kind of leverage that compiler technology can give you. \n\n## Do it for the art \n\nWhat do compilers have to do with art? Surprisingly I've found them a great source of inspiration for art projects. \n\nWhen you look at a program in your editor, you're often able to deduce what the program does from its shape or [pattern](https://www.dreamsongs.com/Files/PatternsOfSoftware.pdf). Programs have a visual identity; many are beautiful. So if they have a form, wouldn't it make sense to also have a sound?","metadata":{"id":25}}],["26",{"pageContent":"So how do you make code audible? One way, I thought, is to make running a program sound like something. It wasn't clear how I would do that. A more straightforward idea was to give the syntax tree sound. What does a code block sound like? A statement? A conditional? \n\nI decided to map the sounds from an 808 drum machine to AST node types. Take a listen [here](http://soundofjs.com/), and if you listen to enough programs, I believe you'll be able to identify them in the same way we recognize the shape of a program. You can also toy with the mappings themselves and make them sound differently. \n\n![soundofjs.com screenshot](/public/images/soundofjs.png)\n\nAnother art project that I had the pleasure to play a [small part](https://github.com/nasser/---/commits?author=amasad) in was [Qalb](https://www.albawaba.com/editorchoice/alb-arabic-computer-programming-language-understands-calligraphy-861614), the Arabic programming language. The most fun aspect of the project was not the language or the tooling to which I contributed, but it was the fact that Ramzi, the artist behind the project, showed that you could print programs as Arabic calligraphy tiles.\n\n![qalb program](/public/images/qalb.png)\n\nFinally, I can't talk about compiler art without mentioning [DOMQL](https://amasad.github.io/DOMQL/), a satrical project that add a SQL-like language to the browser and claims it's a better frontend programming experience than JavaScript.\n\n## A better coding UX","metadata":{"id":26}}],["27",{"pageContent":"## A better coding UX\n\nIn my [Computers Doing The Right Thing essay](https://amasad.me/right), I talked about how we can build more delightful software by detecting user intent. I gave the example of deducing the software packages the programmer wanted to install by from the code, and installing them for the user. This is of course, done by parsing import statements in the respective language. The code for this is open-source -- here is, for example, the [Go-based JavaScript parser for that](https://github.com/replit/upm/blob/715e4d1bd301b66b209a6c5cf1345f59aaa0799a/internal/backends/nodejs/grab.go#L91-L216).\n\n![upm in action](https://amasad.me/public/images/import.gif)\n\nTo build delightful coding experiences, it helps to master parsers.I'm incredibly excited about the work we're doing with our live game programming environment: Kaboomjs.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Preview of upcoming creative coding magic (and like everything we do, multiplayer). <a href=\"https://t.co/7i4KakNpeW\">pic.twitter.com/7i4KakNpeW</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1474455969685901312?ref_src=twsrc%5Etfw\">December 24, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n## What Is It Like to Be a Compiler?\n\nAs a programmer, you spend much of your day conversing with your compiler. If you're not happy at work, there's a good chance it's because you have a bad relationship with your compiler. Maybe it's too slow, taking you out of the flow state. Perhaps it's giving you inscrutable errors. Or maybe the language has undefined edge-cases, and you don't know what kind of code the compiler is emitting. \n\nAll those are reasons to get in and understand how compilers work. Once you do, you'll have a whole new appreciation of programming and how languages are constructed. You'll be able to reason about your programs in new ways, and you can predict how it could go wrong.","metadata":{"id":27}}],["28",{"pageContent":"I hope this inspires you to design a toy programming language or compiler. Last year, at Replit, we ran a [massive programming language jam](https://blog.replit.com/pljamresults), and it turned out to be one of the funniest hackathons we ran. It introduced many people to the joy of language design and compiler construction, and I hope to repeat this again in the future.","metadata":{"id":28}}],["29",{"pageContent":"{\n  \"title\": \"Lesser-Known JavaScript Debugging Techniques\",\n  \"date\": \"03/09/2014\"\n}\n---\n\nAfter I prototype an app I'm building, my time is split between the editor and the browser with the console open. I try to debug as I go to avoid creating a complete mess. Moreover, when I get a bug report for a production app the first thing that I do is try to debug using Chrome devtools, and I usually find the bug without touching my editor. To be effective at that, I had to learn a great deal about the tools available and in this post I’m going to shed light on the lesser-known features and techniques of JavaScript debugging.\n\n## Command Line API\n\nStarted by Firebug and currently implemented in all browsers with a debugger. It has [many useful](https://getfirebug.com/wiki/index.php/Command_Line_API) utility functions such as `$`, `$0`, `keys`, `values` etc. and I highly encourage you to [learn everything about them](https://developers.google.com/chrome-developer-tools/docs/commandline-api).\n\nUntil recently, Chrome DevTools [didn't implement](https://code.google.com/p/chromium/issues/detail?id=168776) the full API, and even after they did, a lot went [undocumented](https://developers.google.com/chrome-developer-tools/docs/commandline-api). The most useful of those functions are:\n\n### debug and monitor\n\nIf you basically live in the console like I do you'd want to be able to add breakpoints to function references without having to go to the source and find the function, especially when debugging production apps with minified source or built source with no source maps.\n\n```js\ndebug(ExampleApp.exampleFunction)\n```\n\nNow every time the `ExampleApp.exampleFunction` is called the debugger will be invoked. To turn it off simply call `undebug` on the same function.\n\nHowever, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps","metadata":{"id":29}}],["30",{"pageContent":"However, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps\n\nWhen working on a complex system with many modules, it's impossible to know what every part is doing. Beyond the typical `console.log`ing and breakpoint insertion, a good debugging technique is setting up traps with debugger statements to stop and get an idea of what's going on.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Just debugged a link-not-working issue by doing `Event.prototype.preventDefault = function () { debugger; };`. Feeling pretty smooth.</p>&mdash; Domenic Denicola (@domenic) <a href=\"https://twitter.com/domenic/statuses/441758861649661952\">March 7, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nFor a long time I've had a library of functions that I copy-pasted around to help set up traps. But after a round of polishing I'm releasing it as a stand-alone JavaScript library and a chrome extension called [Debug Utils](https://github.com/amasad/debug_utils). You can find it on [GitHub](https://github.com/amasad/debug_utils) and can install it directly from the [Chrome Webstore](https://chrome.google.com/webstore/detail/debug-utils/djailkkojeahmihdpcelmmobkpepmkcl).\n\n## Enter DebugUtils\n\n### Break on native method call\n\nUnfortunately `debug` and `monitor` don't work on native methods so you need to wrap native methods with functions containing a `debugger` statement, similar to the tweet above, except you probably would want to call the original function after the `debugger` statement. In DebugUtils this is called `$dum` (short for debug utils method).\n\n```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events","metadata":{"id":30}}],["31",{"pageContent":"```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events\n\nThe Command Line API provides a [`monitorEvents`](https://developers.google.com/chrome-developer-tools/docs/commandline-api#monitoreventsobject_events) function which is great for debugging DOM events, but it won't work for custom events. For that you want to setup your own debugger or logger function as a handler to an event on an object. In DebugUtils this is called `$duv` (short for debug utils events).\n\n```js\n$duv(exampleModule, 'data');\n```\n\n### Break on property access\n\nOften times, objects can start changing from under your feet. You can [setup object getters and setters](http://johnkpaul.com/blog/2013/07/20/break-on-property-change/) containing a  `debugger` statement to find out what part of the code is responsible. When something changes a given property on your object you will stop and be able to trace back what's changing it. In DebugUtils this is called `$dus`:\n\n```js\n$dus(exampleObject, 'someProperty');\n```\nYou can also break on property read using `$dug`.\n\nFor more documentation and information on DebugUtils, be sure to check out the [Github project](https://github.com/amasad/debug_utils). Happy debugging!\n\n**Edit**: My EmpireJS talk on this subject\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/rcjUR4icvoQ\" frameborder=\"0\" allowfullscreen></iframe>","metadata":{"id":31}}],["32",{"pageContent":"{\n  \"title\": \"Ambition++; Reflecting on a decade of work\",\n  \"date\": \"02/23/2021\"\n}\n---\n\nIt's wild: Almost everything I worked on has become a great success on a global scale. I was struck by this fact earlier today when the news came out that Codecademy, where I was a founding engineer, is now a [fast-growing business](https://twitter.com/amasad/status/1364296435059974149). The news came on the heels of our [Series A announcement](https://venturebeat.com/2021/02/18/replit-raises-20-million-for-collaborative-browser-based-coding/) at [Replit](https://repl.it), where we shared some great numbers too. At Facebook, I was a founding engineer on React Native, which also had a [fantastic last year](https://shopify.engineering/react-native-future-mobile-shopify). And all the [open-source projects](https://amasad.me/2016) I've been part of --  Babel and Jest most famously -- became standard tools that measurably increased productivity and changed industries.\n\nAcross all my work -- the millions of developers we helped mint, the CS teachers we empowered, and the entrepreneurs we enabled -- I've probably had a significant impact on the world economy, perhaps even meaningfully increased productivity. \n\nReflecting on this, first, I'm grateful to be able to be useful on such a large scale. After all, just ten years ago, I was a kid in Amman who'd just graduated from university and was interviewing at random companies (including a cigarette factory for VB6 work that comes with a free carton of cigarettes a week).\n\nSecond, and more importantly, I think it's time to be more ambitious. With every project, I stopped short of what was possible. I let haters & doubters change my plans and assumed a sense of fake humility because that's what people expected.","metadata":{"id":32}}],["33",{"pageContent":"The culmination of my work is Replit, where we're working to give people computer superpowers. We want to nudge the world away from rampant digital consumption to one where there are more creators and entrepreneurs. Anyone anywhere can participate in the digital economy and build and leverage software to better themselves and their communities.\n\nNow that I've seen what's possible in a decade while starting from nothing, in this decade, I'd like to create trillions of dollars in value for the world in the form of better access to technology and tools.\n\nMy only regret is my mum is not here to see all this.","metadata":{"id":33}}],["34",{"pageContent":"{\n  \"title\": \"Dialectical Progress in Programming\",\n  \"date\": \"05/27/2017\"\n}\n---\n\nThe notion of progress in programming is -- as in anything else -- debatable and\nhard to define. For various reasons that are besides the point of this essay I\nbelieve that we're indeed making progress in the art of programming (otherwise\nwhat's the point in getting up in the <s>morning</s> afternoon and going to the\noffice?).\n\nBut how does progress happen in programming? Sometimes it looks like it's an\narbitrary walk in the space of possible languages, frameworks and\narchitectures. I'd like to propose an answer: _programming progresses\nin [dialectical](https://en.wikipedia.org/wiki/Dialectic) fashion_. Meaning what usually follows the current best\npractices and technologies is an opposite in many ways. However, this is usually\nfollowed by a _synthesis_ of these two opposites. In other words, a compromise\nor a _best of both worlds_.\n\nWe can think of this as a [_thesis, antithesis, synthesis_](https://en.wikipedia.org/wiki/Thesis,_antithesis,_synthesis):\n\n>(1) a beginning proposition called a thesis, (2) a negation of that thesis\n called the antithesis, and (3) a synthesis whereby the two conflicting ideas\n are reconciled to form a new proposition.\n\nLet's look at some examples.\n\n### Languages: industrial strength vs developer friendliness\n\n1. Thesis: __industrial strength programming languages__. Languages like Java\nand C++ are type-safe, efficient and work well with large systems. But they're\nalso hard, boring, noisy, and take a long time to compile.\n\n2. Antithesis: __developer friendly languages__. Languages like JavaScript,\nPython, and Ruby are dynamically typed so the syntax is clean and less\nnoisy. They're interpreted so there is no compiler to wait for. And they're fun\nand arguably more productive to work with.\n\n3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.","metadata":{"id":34}}],["35",{"pageContent":"3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.\n\n### Web rendering: server-rendered vs client-rendered pages\n\n1. Thesis: __server-rendered pages__. Languages and frameworks powering Web 2.0\nlike PHP and Ruby on Rails can get you to market quickly, with predictable\nperformance, and works well with the rest of the web infrastructure (links,\nsearch engines etc).\n\n2. Antithesis: __client-side rendered pages__. Frameworks like Backbone, React,\nand Angular can create delightful user experiences. But they break the web's\nprotocol (hypertext over TCP) and can be slow to boot up.\n\n3. Synthesis: __universal rendering__. Frameworks like [Next.js](https://github.com/zeit/next.js/) bring us the best\nof both worlds: a great user experience, great initial render time, and great\nsupport for search engines and other web infrastructure.\n\n### Mobile apps: native vs web\n\n1. Thesis: __web applications__. Web 2.0 unleashed the power of the internet and\nbrought us amazing applications like social networking and YouTube. But\nwhen mobile came around, using web tech to build mobile apps created monstrosities\nlike the first Facebook HTML5 app.\n\n2. Antithesis: __native applications__. Native applications brought much better\nuser-experience with gesture support, smooth scrolling, and access to APIs\nlike location and notifications. However, a lot of progress that we made in\nengineering (e.g. continuous deployment, cross-platform development) or in application distribution (just\nvisit a URL) had to be thrown away.\n\n3. Synthesis: __progressive web apps and web tech adapted to native__. PWAs\nand frameworks like React Native bring us the best of both worlds. Access to\nnative (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion","metadata":{"id":35}}],["36",{"pageContent":"native (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion\n\nThis framework of thinking about progress in programming seems to apply to a lot\nof what I see happening in programming. There are ongoing developments that I\nlook forward to seeing the synthesis of:\n\n- __Web development build tools__: we started out writing and loading scripts\n  in the browser verbatim but applications getting more complicated lead\n  us to build better languages and frameworks which lead us to\n  introduce ever more complicated build-steps to our web developement and\n  deployment pipelines. However, with browser vendors moving faster on supporting\n  language features and with framework authors acknowledging the problem I think\n  we're going to see a synthesis soon.\n- __IDEs__: when I first started programming it seemed unquestionable that you\n  needed to use an IDE. However, they were slow and bloated. And with the shift\n  towards more dynamic languages there was also a shift towards pure text\n  editors like Textmate and Sublime and a return to Vim and Emacs. However,\n  with editors like Atom that has a richer-than-ever plugin ecosystems it seems\n  like we're headed in a synthesis direction where we use lightweight editors\n  while plugging in static analysis, autocompletion, and other automation tools.\n\nThere are a lot more industry trends that can be described and understood using\nthe dialectical framework of progress. I'd be curious to hear your thoughts\non this and if you think if this framework applies to trends in your programming\ncommunity. I'm best reachable on [twitter](https://twitter.com/amasad). Thanks for reading.","metadata":{"id":36}}],["37",{"pageContent":"{\n  \"title\": \"Disintegrated Development Environments — How Did We Get Here?\",\n  \"image\": \"https://amasad.me/public/images/interlisp.jpeg\",\n  \"date\": \"05/01/2017\",\n  \"description\": \"Development environment fragmentation and the story of Worse is Better vs the Right Thing approach to software engineering\"\n}\n---\n\n[_This essay is an adaptation of my talk at\n[Active Ingredients Conference](http://activeingredients.info/)_]\n\nIt's never been better for programmers, a team of 5 today can build projects and\ncompanies that required hundreds if not thousands of engineers just a few\ndecades ago. So although Fred Brooks was right in that there was \"no silver\nbullet\" which \"by itself promises even an order of magnitude improvement in\nproductivity\" I'd argue that there was a million silver arrows that collectively\ngot us those improvements.\n\n![No Silver Bullet](/public/images/no_silver.jpeg)\n\nMuch of this came through open source software, development tools and open\nsource development tools.\n\n![Silver Arrows](/public/images/silver_arrows.jpeg)\n\nHowever, this happened as a wave of distributed innovation. There was no central\nplanning and no vision — it all happened organically. Which explains\nwhy a lot of our day-to-day development tools overlap, compete, and require a ton\nof compatibility code just to make them work with each other.\n\nLet's take an example. Say you're a JavaScript developer and you use the latest and\ngreatest tools. You write your code in ES2017. But before you ship it to\nyour users you use a compiler like Babel which has to parse your code to compile\nit to ES5. And you also want to bundle your code so you use a bundler like\nWebpack which parses your ES5 code, collect the require/import statements, and\nbundles your code. Finally, you also use a minifer like Uglify which has to also\nparse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's","metadata":{"id":37}}],["38",{"pageContent":"parse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's\nbecause I ran out of slide space. The browser still needs to parse the code\nbefore it executes it.\n\n![compiling JavaScript 2](/public/images/js_compile2.jpeg)\n\nOk, so what? Well, there is a good chance you're reading this article to kill time\nwhile Webpack is recompiling. *Everything is slow*. There is also a\nquestion of how many parsers, as a community, do we have to write and\nmaintain. Furthermore, there is lot of information loss as we go\ndown the pipeline — you might've had Flow type annotations but those will not\nbe accessible for the minifier to emit optimized code because they're compiled\naway at an earlier step.\n\n(This is only one branch of the development pipeline, there is also the\nIDE/static analysis and code generation that contains similar duplication of\nwork and incompatibilities).\n\nRoughly speaking, we separate our tools by development life-cycle stage:\nauthoring, executing, testing, building, and deployment. Which limits how much\nsharing of information and work can happen between tools.\n\n![so what](/public/images/so_what.jpeg)\n\nOk, then what if we imagined we live in a different world where we've taken a more\n[holistic](https://repl.it/site/blog/holistic) approach to development\nenvironments where we layer tools on top of each other. My IDE knows where and\nhow my code executes and can show me inline information about function calls,\nerror rates, and type information — heck, why won't production crashes translate\ninto local development breakpoints? What if my repo on Github could pull from the\nsame code intelligence service and have a click-to-symbol feature. Etc.\n\n![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided","metadata":{"id":38}}],["39",{"pageContent":"![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided\nto construct a historical narrative to help us understand how we got here.\n\n![poop culture](/public/images/poop_culture.jpeg)\n\n## Worse Is Better\n\n![worse is better](/public/images/worse_is_better.jpeg)\n\nIn March 1990 Gaberial stood in front of crowd of Lisp developers and told them\nthat [\"Worse is Better\"](https://www.dreamsongs.com/RiseOfWorseIsBetter.html). The Lisp community's who's who were in the audience and\nthey weren't very happy with the talk. After the talk, Gerry Sussman was the\nfirst to stand up and claim nonsense. Followed by Carl Hewitt, and there was\nGaberial defending a position that, had the Lisp community understood, maybe the\nworld of software engineering today would've been very different.\n\nSee the Lisp community practiced the Right Thing software philosophy which was\nalso know as \"The MIT Approach\" and they were also known as \"LISP Hackers\".\n\n![lisp](/public/images/lisp.jpeg)\n\nThe larger research community that the Lisp community was part of was operating\nunder a vision of computing that Alan Kay recently mentioned in a [Quora answer](https://www.quora.com/What-made-Xerox-PARC-special-Who-else-today-is-like-them):\n_“The destiny of computers is to become interactive intellectual amplifiers for\neveryone in the world pervasively networked worldwide”_.\n\n![vision](/public/images/vision.jpeg)\n\nThey were building amazing technology. Take for example Interlisp, a\nbootstrapped end-to-end Lisp programming environment that featured a structure\neditor (picture editing AST nodes instead of text), a REPL (with undo, which\nright now is coming back as \"time-traveling debugger\") and among many other things\nautomatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey","metadata":{"id":39}}],["40",{"pageContent":"automatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey\nStyle\", also known as \"C hackers\" were hacking on the C programming language and\nthe Unix operating system. They had a much more pragmatic approach than the MIT\napproach — they valued, above anything else, a simplicity of\nimplementation. Almost exactly the opposite of what the MIT folks valued, which\nis simplicity of interface, completeness, and correctness.\n\n(I like to imagine a late-night stoner-like conversation between Dennis Ritchie\nand Ken Thompson:\n\n_\"Dude, what if, like, everything was made of files?\"_\n\n_\"Everything?\"_\n\n_\"Yeah, like eeverrryyything\"_\n\n_\"Whoaa\"_)\n\n![meanwhile in new jersey](/public/images/meanwhile_in_nj.jpeg)\n\nBack to Richard Gabriel. After he was lambasted by everyone at the conference he\nwent home, hid his essay, and vowed never to talk about it\nagain. See he knew that in the wrong hands Worse is Better — which although the\nNew Jersey folks were practicing they weren't preaching — could do a lot\nof damage.\n\n![never worse is better](/public/images/never_worse_is_better.jpeg)\n\nA couple of years later Richard hired a young hacker by the name of [Jamie Zawinski](https://www.jwz.org/)\n(later of Netscape fame — and can be found running a nightclub somewhere in\nthe SoMa district of SF). Like most hackers Jamie believed that information\nshould be free so when he found the Worse is Better paper he decided, without\nasking Richard, to [send it](https://www.dreamsongs.com/WorseIsBetter.html) to\nall his friend. It then spread like wildfire across the industry.\n\n![jwz](/public/images/jwz.jpeg)\n\nWhat was supposed to be a wake up call became a self-fulfilling\nprophecy. Richard talks about how \"Large companies (with 3-letter names)\"\n(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)","metadata":{"id":40}}],["41",{"pageContent":"(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)\n\nLater in his career Richard — realizing that he was responsible for the final nail\nin the coffin that killed the Right Thing approach to software development — began\nwriting against Worse is Better [under a pseudonym](https://www.dreamsongs.com/Files/worse-is-worse.pdf). Legend has it that he\nbecame so confused about this subject that he was once invited to talk about\nit and both argued for and against Worse is Better.\n\n![Richard arguing against worse is better](/public/images/richard_pseudonym.jpeg)\n\nNow that I understand our place in history I can't help but wonder what would've\nhappened if the Right Thing philosophy had won out. If\nour development environment resembled something like Interlisp instead of\nUnix. I think maybe since the main feature of Worse is Better is that — in\nthe words of Richard — \"it spreads like virus\" it had been better for computing to\nadopt this approach to achieve scale. But now what? I think we should be more\nambitious and bring back the Right Thing.\n\n(_In the talk which this is based on I talk a bit about what I'm doing about the\nproblem. I've written briefly about this elsewhere: [\"Building Towards a Holistic Development Service\"](https://repl.it/site/blog/holistic)_)","metadata":{"id":41}}],["42",{"pageContent":"{\n  \"title\": \"Eval as a Service\",\n  \"date\": \"01/17/2016\"\n}\n---\n\nAfter operating under the radar for a while, we're now publicly launching the\n[repl.it code evaluation API](https://repl.it/api) that allows anyone to execute\ncode in whatever language from anywhere on the internet. Here is the story so far:\n\n[repl.it](https://repl.it) and the underlying tech is a project that grew out\nof my frustration from the process of setting up machines to learn\nprogramming. I believed that one of the main turn offs for people wanting to\nlearn how to code was setting up the development environment. That's when I\nthought that putting a REPL on the web was the best way to get started with programming.\n\nIn 2011, and after working on the problem for almost a year we were able to cross-compile\nnumerous language interpreters to JavaScript and we also hand coded some. We\nopen sourced everything along the way and little did we know that our work would\nhelp accelerate a revolution in online programming education.\n\nOur [open source code evaluation infrastructure](https://github.com/replit) was used by companies like\nCodeacademy, Udacity, Bloc, and many others to deliver an in-browser coding\nexperience. Unfortunately, the way we were\ndoing things was pushing the envelope for what browsers could do at the time and they would break our code\nvery often. Coupled with the fact that users had to download megabytes worth\nof JavaScript before being able to do anything made it unreliable for websites\nserving millions of users all over the world. Since then, I stopped using it in\nproduction in favor for a server-based system and to keep myself honest I\nalso deprecated the open source project.\n\nAfter the move, I still got emails from people asking for support on those\nprojects, and I felt guilty for not being able to help. At the same time\nrepl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I","metadata":{"id":42}}],["43",{"pageContent":"repl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I\ncouldn't do this to our users. Especially because many of them happen to be\nstudents learning as part of classrooms:\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-post\"\ndata-href=\"https://www.facebook.com/amasad9/posts/772878056174859?pnref=story\"\ndata-width=\"750\">\n<div class=\"fb-xfbml-parse-ignore\">\n<blockquote cite=\"https://www.facebook.com/amasad9/posts/772878056174859\">\n<p>Yesterday we\nvisited a high school in Mountain View where the entire school were learning how\nto code. Hundreds of...</p>Posted by <a href=\"#\" role=\"button\">Amjad Masad</a>\non&nbsp;\n<a href=\"https://www.facebook.com/amasad9/posts/772878056174859\">Saturday, October\n24, 2015</a></blockquote></div></div>\n\nAfter getting so many emails from people asking for support I decided to offer\nour code [evaluation infrastructure as a service](https://repl.it/api). Since then we had a few customers use us -- enough to cover repl.it's cost. More than anything, I'm happy that our customers\nare deriving a lot of value from the service and in many cases they're building\nthings in line with our mission of democratizing programming. For\nexample, Carnegie Mellon University is using us as part of their online open\nlearning initiative. Flatiron school and Trinket are using us to build their online education\nplatforms. Oneinterview and Airety are using us to deliver online interviewing\nservices. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).","metadata":{"id":43}}],["44",{"pageContent":"services. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).\n\nI'm planning to do a technical write up about the tech and architecture behind\nthe service but the basic idea is that you connect to our servers and then send\nus programs to execute. It's fast, reliable, and scalable. Try out at\n[repl.it](https://repl.t). And check out the [API page](https://repl.it/api) for\nmore information. Here is what an API call looks like for a \"Hello World\" in\nRuby:\n\n```js\nvar repl = new ReplitClient('api.repl.it', 80, 'ruby', token);\nrepl.connect().then(() => repl.evaluate(\n  'puts \"hello world\"',\n  { stdout: out => console.log(out) }\n));\n```\n\nWhat started as something that I thought of as a necessary annoyance to keep the\nsite running turned out to be something that I'm actually proud of. This\nwouldn't have been possible without the work from [Haya](http://twitter.com/hayaodeh) and Faris where they\ncontinue to build awesome new features and products on top of repl.it.","metadata":{"id":44}}],["45",{"pageContent":"{\n  \"title\": \"Learning to Fight\",\n  \"date\": \"03/15/2021\"\n}\n---\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-DDZ1A4Q0KY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nRunning a growing business is thrilling. Serving customers is incredible, and growing revenue feels great. But there is only so much excitement in running your average — say b2b — startup. \n\nBut suppose your company is doing something so radical it changes culture. In that case, you have to be ready to be surprised, delighted, horrified, and viscously attacked. \n\nIn prior eras, a b2b startup founder might've been a skilled trader. Whereas a successful culture-changing founder would've started a revolution or a religion.\n\nWhen you're challenging norms, you have to be ready to fight the gatekeepers, the useful idiots, and the final boss — the priesthood — those who maintain the status quo.\n\nIt's essential to cultivate your community. Provide protected spaces to assemble because existing spaces are hostile to change. Build tools for collective action and encourage solidarity. Build allies wherever you can find them — the outsiders, the weirdos, and the radical thinkers are your best friends.\n\nAs a leader, build up stress tolerance. Find habits that clear the mind. Learn how to function with little sleep but take sleep seriously. \n\nIn quiet times don't let your guard down. Use those times to train for the next battle. But also celebrate good times and reflect on your victories and losses.\n\nUnderstand the political milieu. Try not to swim upstream unless it's essential for your mission. Better to ride or entirely circumvent it. \n\nTell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.","metadata":{"id":45}}],["46",{"pageContent":"Tell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.\n\nWhen building your crew, prefer zealots. It's too risky to have skeptics in your midst. But prize truth, and allow criticism. Build an organization that is both rooted in and unsatisfied with reality. \n\nEnjoy yourself. And remember that quitting is never an option. When it's darkest and most intense, you're closest to victory.","metadata":{"id":46}}],["47",{"pageContent":"{\n  \"title\": \"Mental Frames to Get Over Entrepreneurial Anxiety and Depression\",\n  \"date\": \"8/31/2017\"\n}\n---\n\nWould you accept a gamble that offers a 10% chance to win $95 and a 90% chance\nto lose $5?\n\n\n\nWould you pay $5 to participate in a lottery that offers a 10% chance to win $100 and a 90% chance to win nothing?\n\nChances are the second proposition sounded more appealing to you. But look\nagain, both these propositions are identical. The second version\nattracts more positive answers[1] because it's *framed* as cost whereas the\nfirst version is *framed* as a loss and who wants to lose?\n\nThis is called \"framing effects,\" how something is presented colors how we think\nabout it. Similarly how we interpret the world around us and our situation in it\nwould affect how we feel and act. In fact, there are whole branches of\npsychotherapy that focus on the art of viewing things differently: \"positive\nreframing\", \"cognitive reframing\", and \"cognitive restructuring\". However, what\nI'd like to focus on is dealing with specific set issues, issues that have\nto do with creating something new in the world, building a business, and all\nthe turmoil that brings.\n\nWhen you're a startup founder, it's almost like your mood is tied to your\nmetrics. When your company is doing well, you feel great. When your company\nisn't doing so hot, you're feeling bad. This, in turn, will affect your\nproductivity and may set you on a vicious cycle of doom where your company isn't\ndoing well, and you don't have the energy to fix it.\n\nSo how do you escape this, deal with the stress, take action on it, and have\nsome fun doing it? Well, we can exploit the mental bug that is \"framing effects\" to bring about a better state of\nmind. I'll introduce what I call \"mental frames\"[2] -- I'm not sure if that's a real\ntechnical term, but it sounded good to my ears -- that has helped and continues\nto help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick","metadata":{"id":47}}],["48",{"pageContent":"to help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick\nourselves and tell ourselves stories to act the way that we want to\nact. The reason we have to do this is that more and more we're discovering that we're not just one\nself, we're multiple ones. Scientists and philosophers, in different contexts, have proposed various theories on the division of the self. There is the momentary vs. the narrating self; there is System 1 vs.\nSystem 2; there is the left vs. the right hemisphere; there is the lizard\nbrain vs. the neocortex. All that goes to show that although there is a part of your self that wants to get better at managing your mental states -- the one that's reading this, hi! -- it doesn't automatically mean that all your selves are onboard. So join me on a journey to trick these bastards to do what you want.\n\n_Also, I'm not a mental health specialist, see one if you need to._\n\n## \"Life is a game\" mental frame\n\n>Once a motherfucker get an understandin' on the game, and what the levels and\n>the rules of the game is, then the world ain't no trick no more, the world is a\n>game to be played.\n>\n> -- 2Pac in \"Starin' Through My Rear View\"\n\nPart of the startup game is taking risks, in fact, it's almost the only game in\ntown. If you're not taking risks, then your startup already exists, and you're\njust copying something else. But if you are creating something new in the world\nthere wouldn't be a week that goes by without feeling anxiety about all the risk\nthat you're taking. Be it your career, other people's times and money, or\nwith your product, users, etc.\n\nThe risk anxiety can paralyze you and unless you act you're just making your\nsituation worse. One handy mental frame to adopt in this case is \"life is\na game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you","metadata":{"id":48}}],["49",{"pageContent":"a game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you\nmake, in the end, you have to act. Otherwise, nothing will happen, and it's no fun. You'll happily\njump from place to place, explore different areas, try different combinations of\nkeys or moves. You're never standing still,\nalways making decisions and executing, learning, failing, restarting and going again.\n\nThe \"life is a game\" mental frame puts you in a fun frame of mind. You just\ncan't wait to see what happens next. Maybe you'll lose, perhaps you'll win --\nwho cares! As long as it's interesting, keeps you amused, engaged, and learning.\n\n## \"Time keeps moving forward\" mental frame\n\n\n>I was a little bit of a procrastinator and I would be faced with this seemingly\n>insurmountable task. I have final exams, I have massive amounts of work, papers\n>-- there is no way to make it through. At that time -- and this is served me\n>well -- I would say 'well, one way or another time keeps moving forward so\n>even though I'm just three weeks away, whatever happens in three weeks from now\n>I'll be on the other side'. So it seems like a wall that I can't get through but\n>actually time is marching ahead and I will get to that point past that thing\n>automatically and that was helpful to me.\n>\n> -- Siri, Change.org, and Viv founder Adam Cheyer on the \"Finding Mastery\"\n>podcast.\n\nWhen you have an upcoming deadline or a significant date of somesort -- be it a product\nlaunch, scoring a deal, hiring someone, or the end of your runway -- there is no\nreal rational reason to feel anxious. All you have to do is perform your best,\nand the rest is outside your control.\n\nIn situations where it's painful, you have to remember that\ntime will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame","metadata":{"id":49}}],["50",{"pageContent":"time will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame\n\nYou might've used this one before; it's kind of a cliche that's often used out\nof place: \"order the pizza, worst-case\nscenario we'll eat it in the car\" or some such thing.\n\nWhen correctly used, it can be compelling. Right now, think about a difficult\nsituation in your life, or a tough decision you're pondering, or a\nrisky move you're considering. Now think about the *absolute* worst thing that can\nhappen as a result of your actions -- like literally the worst thing:\n\n1. Will someone die?\n2. Will someone get seriously injured?\n3. Will you become homeless and starve on the streets?\n3. Will you lose your house/job/car?\n4. Will you tarnish your reputation?\n5. Will you fail at the startup thing and go back a to a cushy job where\nthey feed and do your laundry?\n\nEtc. Barring #1, #2, and #3 I think everything else can be tolerated. Honestly\nfor most decisions at Silicon Valley startups that may lead to ruin, it's probably going to be #5 that ends\nup being the worst-case scenario, and you know it's not all that bad.\n\nA excellent technique to couple with the worst-case scenario mental frame is what's\ncalled \"negative visualization\". An age-old technique invented by the Stoics in ancient Greece,\nyou visualize or meditate on the worst. Like, actually imagine it happening. If it does happen, you're already at peace with it, and if\ngood or neutral thing happens then it's ecstatic!\n\n## \"You're not your job\" mental frame\n\n\"Founder of [insert sexy startup name]\" is what you have on your twitter bio. It seems like this\nthing is intricately intertwined with your identity. But in reality, you're a\nlot more than that. You might be a good husband/father/son. You\nmight be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which","metadata":{"id":50}}],["51",{"pageContent":"might be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which\nis basically depression. When that happens, remind yourself that you're much more than your\njob -- that you contain multitudes.\n\nIt's good to cultivate other interests, hobbies, or anything that you\ncan get good at. Have people that rely on you outside of your work. Mentor\nsomeone. Learn a new skill. Find a hobby. Whatever you do try to link it to your\nidentity.\n\nFor me, I try to always have someone that I'm mentoring. I read, discuss, and dabble in\ndoing philosophy. I'm currently obsessed with weight-lifting. I also like to get\nbetter at writing, public speaking, and storytelling. I love to optimize my\nhealth. This year I spent a lot of time enhancing my sleep. Going from an\naverage 5 hours a night to 7.5 hours a night. I also increased my REM sleep,\ngoing from less than an hour to 1.5-2.5 hours.\n\n## \"What did I learn\" mental frame\n\nIf you're the kind of type A personality that would choose the entrepreneurial\npath then chances are, you like self-improvement, and chances are, you love\nlearning. So when failure does catch up with you then do yourself a\nfavor and think about everything that you've learned from your experience.\nMaybe even write about it but, at all costs, avoid titling your post [\"our wonderful journey.\"](https://ourincrediblejourney.tumblr.com/)\n\n---\n\nThere is a lot more to this, and I'll try to keep this as a live document. But\nfor now, I need to get back to playing the life game because time won't wait for\nme, and really, what's the worst that can happen? I want you to remember\nthough, that I'm not only my job, it's true that I learn a lot from it, but I\ncontain multitudes!\n\n---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is","metadata":{"id":51}}],["52",{"pageContent":"---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is\nsome overlap, however, where mental models is primarily about making intelligent\ndecisions, mental frames is about managing your own psyche.\n\n</small>","metadata":{"id":52}}],["53",{"pageContent":"{\n  \"title\": \"Github and Open-source Is a Boon for the Underprivileged\",\n  \"image\": \"https://cdn-images-1.medium.com/max/1600/1*lBVMxcsvMHSkghlAo1-5GQ.png\",\n  \"date\": \"06/09/2018\"\n}\n---\n\nI was born to immigrant parents. My mother's family left Algeria looking for\na better life in Syria and then Jordan (where I was born). On my father's side,\nhis family fled the war in Palestine to Syria and then settled in Jordan. My father's family was so poor that he had to sleep with ten\nother children in the same room (his brothers and his brothers'\nchildren). Luckily, Palestinians, for whatever reason, valued education above\neverything else, so they made sure to save up to send my father to Turkey\n(because there were no universities in Jordan at the time) to study to\nbecome an engineer.\n\nWhen my father came back to Jordan, he worked for the government as an engineer. There, he\nfaced discrimination because government jobs were typically reserved for\nnatives. Despite all this, he rose in the ranks for years until he became the\ncity manager of Amman, the capital of Jordan. My father's journey taught me\nthat as someone who's underprivileged or discriminated against you need to work\nten times harder than the next person to get ahead. You need to leverage\nwhatever tool you have to signal that you're great at your job. For him, it was his reputation. In a country ravaged by corruption my\nfather had a reputation for being so straight it baffled people (but it also\nmeant that we wouldn't get to see any of that corruption money, and we had to\ngrow up on a measly government salary).\n\nWhich brings me to the recent debate in the developer community on using GitHub\nas a résumé. While I try to stay away from debating hot topics because it takes time to form an informed opinion, this was a subject that's near\nand dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.","metadata":{"id":53}}],["54",{"pageContent":"and dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">10/ GitHub is the de facto source for validating top talent the world over.<br><br>Résumé or CV? <br><br>Please.<br><br>Show me your GitHub profile, commits you&#39;ve landed, projects you&#39;ve forked, code you&#39;ve released.</p>&mdash; Joe McCann (@joemccann) <a href=\"https://twitter.com/joemccann/status/1004798006485573632?ref_src=twsrc%5Etfw\">June 7, 2018</a></blockquote>\n\nWhile I disagree with this statement, I found myself also disagreeing with\npeople on the other side of the debate which, in my opinion, are also staking\nout an extreme position. They're [saying](https://twitter.com/EricaJoy/status/1004849360625168384) that GitHub is not only a \"useless\nsignal\" but is also discriminatory by nature. (I found\nmyself agreeing more with moderate positions like Kim's\n[here](https://twitter.com/KimCrayton1/status/1005098820731097088) saying that basically, employers are shooting\nthemselves in the foot by excluding people with no GitHub profiles).\n\nStarting with the assumption that employers would want to hire the best candidates for\nthe job[1], we can observe that they're\nmerely trying to navigate the problem of \"adverse selection,\" which occurs in any\nmarket where there exists an asymmetry of information. Because candidates can deceptively\nspruce up\ntheir resumes and maybe even rise in the corporate ladder by being gifted at\noffice politics, and because most good programmers are not in the job market\n(they either have a job or get headhunted before they enter the market), this\nleaves employers in a tricky position with an insufficient set of tools to evaluate\ncandidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the","metadata":{"id":54}}],["55",{"pageContent":"candidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the\nbullshit (for the most part).\n\nYou can fake a resume, or end up with a good one simply as a function of\nyour privilege. For example, if you're born into wealth,\nyour parents can probably call in favors to get you jobs at prestigious\ncompanies. But can you really fake GitHub profile? It's tough to do so,\nand that's because the \"screening\", as it were, is done by OSS maintainers. You\ncan't bullshit your way into getting pull requests landed. And no matter your parent's\nstanding in society, if your code stinks, you can't contribute. This makes GitHub a\nprecious tool for recruiters.\n\nBecause open-source is good at cutting through the bullshit, it also makes it an equalizer. If you come from an\nunderprivileged background, you should absolutely use GitHub to get ahead. That's\nexactly what I did. I owe my entire career to open-source.\n\nBack in college, I didn't have a personal computer, and I was always on the\nmove -- from campus to the office, to home. Which made it tough to code\non projects, or solve homework because every time I got my hands on a computer, I\nneeded to setup the development environment. So I started dreaming about a world\nwhere I can open a browser tab and start coding, in any language,\nanywhere. Which started a multi-year project to build an in-browser repl. The\nfirst thing I did was put a textarea with a button that `eval`d JavaScript. I was\nable to program on my Nokia phone and work on problems on the go. But I wanted\nthis experience to be better and to work for more languages.\n\n[Long story](https://news.ycombinator.com/item?id=16578943) short, years after I\nhad the idea for an online repl was I able, with help from\nfriends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)","metadata":{"id":55}}],["56",{"pageContent":"friends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)\nimplementation. I tried to start a company around this idea, but nobody would\nfund me. Luckily, everything was open-source on GitHub and soon after we\nreleased the project I saw that not only one, or two, but more than a dozen\ncompanies in Silicon Valley started using our software.\n\nAlthough I had applied so many times to work at Google, Facebook, and many\nothers, I never got a response back, let alone an interview. Open-source became\nmy ticket there. I joined Codecademy as the #1 employee and helped 10s of millions\nof people to learn how to code.\n\nAfterward, I joined Facebook to try and work at the team behind React.js. But I\nwas stuck working on the photos product (which I couldn't care less for) because\nthe React team was one of the hottest teams at the company. So\nI started contributing to their open-source projects. I know it sounds crazy and\nroundabout, but I was able to prove myself more via my GitHub contributions than my\nday job. I think that played a big part in letting me in the team where I worked on\nReact Native.\n\nToday, I'm trying to pay it forward. At my new company, [Repl.it](https://repl.it), we believe that\nprogramming is a great equalizer. We've seen our product used by [refugees](https://repl.it/site/blog/refugees) to\nlearn how to code. By people to [upgrade](https://repl.it/site/blog/two_stories)\ntheir careers and land tech jobs and to\n[teach](https://repl.it/site/blog/two_stories) low-income high-achieving children how to code. Or by [homeless](https://www.reddit.com/r/learnpython/comments/54d53z/help_a_homeless_man_code_again/) people who\nonly have access to computers at the public library. At this point, we've heard enough \"rags to\nriches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an","metadata":{"id":56}}],["57",{"pageContent":"riches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an\nunderprivileged background then the unfortunate reality of the situation is that\nyou're going to have to work harder than everyone else. And you're going to want\nto use any tool at your disposal, like Github, to signal that you're you going\nto be great at your job so you can land great jobs.\n\nIf you need advice, I'd be happy to help, my DM are open on [twitter](https://twitter.com/amasad).\n\n----------------------------------------------\n<small>\n[1]: It's still a safe assumption to start with, even if it's not entirely\naccurate. Even if you believe that bigotry (or unconscious bias) plays a big part in\nexcluding people, I think that from a first-person point of view, you can't control\nthat. For example, it's hard for me as an individual Muslim to change the fact\nthat some people hate Muslims, so it's better for me to focus my energy on\nthings that I can control. This, however, doesn't mean that as a society we shouldn't discuss issues of\ndiscrimination.\n</small>","metadata":{"id":57}}],["58",{"pageContent":"{\n  \"title\": \"Why We Switched From MongoDB to PostgresSQL (GPT 3 post)\",\n  \"date\": \"07/29/2020\"\n}\n---\n\n_This post was generated by gpt-3. My prompt was only the title and the first sentence_\n\n__At Tiny we're scaling really quickly__. Our platform allows tens of thousands of developers to instantly provision a running test environment in a few clicks. This creates a huge amount of data which is stored on a MongoDB cluster hosted on Google Compute Engine.\n\nA few months ago we started noticing some serious performance problems. The database was not able to handle the query load. We had all of our database configuration on auto-pilot so it took us a while to realize we had a problem. After a few weeks of investigation it became obvious that MongoDB was not the right choice for us and we decided to make the switch to Postgres.\n\n## Why We Chose Postgres\n\nPostgres has been around since the dawn of the web, and is more battle tested than any other database. It has very fast performance, is open source, and runs on a wide range of platforms.\n\nMongoDB has very flexible schema and is a great choice for dynamic applications. When we initially started developing our service, the schema was very flexible. Since we allow users to provision an environment in a few clicks, the data model changed from one environment to the next. This was not a problem for MongoDB. With time we became more strict in our schema and users started having a more consistent data structure, but this was now against MongoDB's strengths and caused us a lot of performance problems.\n\nPostgres on the other hand has a more rigid schema. There is no auto-sharding. The database servers have to be the right size. And the sharding is much more involved to setup. There are however many open source tools that can help you monitor, optimize and scale your Postgres cluster. There are also more resources online to help you migrate from one database to another.","metadata":{"id":58}}],["59",{"pageContent":"Moving to Postgres was actually very easy. All we had to do was install a few packages.\n\n```\napt-get install postgresql postgresql-contrib postgresql-client\n```\n\nWe had to make a few changes to our code so that it would work with Postgres' strict schema.\n\nWe added a schema field to every model. This is important since Postgres cannot automatically detect the structure of the data.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :schema , :string attribute :data , :text , default: \"\" end\n```\n\nWe have to explicitly define the length and format of each text field.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :data , :text , default: \"\" attribute :content , :text , default: \"text\" , size: 25 .chars end\n```\n\nSome Mongoid extensions won't work with Postgres. To convert these fields we used the ruby2ruby gem.\n\n```\n\"Postgres extension for mongoid/mongo_mapper\" .split( \"::\" ).each do |component| mongo_model = component.split( \"::\" ).first module Mongo end Mongoid::Document.extensions.each do |extension| if extension.start_with?( \"Mongoid::Extension::\" ) mongo_model_ext = extension.split( \"::\" ).first mongo_ext = module Mongoid::Document module Extension mongo_model_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| if component.include?( '-is-extended-type' ) && component.split( \"-\" ).last == \"ruby2ruby\" include component.split( \"-\" ).last else puts \"Ignoring #{component} in mongo_extension\" end end end end end end end end end end end end end end end\n```\n\nAdding indexes to a Postgres database is also very easy. We use data containers which contain several documents. We needed to index them by schema and id. Here's how you can create a partial index.\n\n```\nrails g index add_to_container_data_schema_id","metadata":{"id":59}}],["60",{"pageContent":"```\nrails g index add_to_container_data_schema_id\n\nclass AddToContainerIndex < ActiveRecord::Migration def up add_index :containers, :schema, :unique: true add_index :containers, :id, :unique: true end def down remove_index :containers, :id remove_index :containers, :schema end end\n```\n\nWe also need to initialize the connection with the database, otherwise Rails will try to connect to the production database.\n\n```\n# config/database.yml production: adapter: postgresql encoding: unicode database: <%= ENV['TINY_APP_DB_NAME'] %> # db/structure.sql # <% db_name = ENV['TINY_APP_DB_NAME'] %> # db/seeds.rb class AddToContainerData < ActiveRecord::Migration def up execute <<-SQL CREATE TEMP TABLE containers ( id SERIAL PRIMARY KEY , schema VARCHAR( 100 ) NOT NULL , content TEXT NOT NULL , FOREIGN KEY (schema) REFERENCES schema_fields(schema) ); SQL execute <<-SQL CREATE UNIQUE INDEX containers_schema_id ON containers(schema); CREATE INDEX containers_id ON containers(id); SQL end def down execute <<-SQL DROP TEMP TABLE containers; SQL execute <<-SQL DROP INDEX containers_schema_id; DROP INDEX containers_id; SQL end end\n```\n\nDon't forget to add the migrations to the git repository.\n\n```\n$ git add db/migrate \n$ git commit -m \"Adding Postgres support to the containers\"\n$ git push\n```\n\nRunning our tests on Postgres took a little bit more time than running on MongoDB. It's not a lot more though. I believe this is because our test environment has to process more requests. The performance on the production server was also better than Mongo.\n\nThe last step we took was to set up monitoring for our Postgres cluster. We set up simple scripts that runs inside a cron job to collect data and store it in a database.\n\nWe're looking for smart developers. Hackers apply here!","metadata":{"id":60}}],["61",{"pageContent":"{\n  \"title\": \"Be Grateful\",\n  \"date\": \"06/02/2018\"\n}\n---\n\nWhere I'm from \"Thank God\" is something you say every day. While nowadays most\npeople say it in an automatic, mindless way, I think it came to be tradition\nbecause of a profound sense of appreciation for life by our ancestors. People\nfound themselves in a world where things are not too bad and often pretty\ngood. They looked around them, and while they didn't know why or how they got\nhere, they felt thankful for the life they're given. So they felt and expressed\ngratitude, multiple times day, each day.\n\n_\"We are going to die, and that makes us the lucky ones\"_ said Richard Dawkins,\ntalking about how lucky we are to be the ones that got to live for _\"the\npotential people who could have been here in my place but who will in fact never\nsee the light of day outnumber the sand grains of Arabia\"_. Meditate on that,\nand when you feel those words, no matter what your misfortune is, you'll know\nthat you're damn lucky to be alive.\n\nIn the story, _Candide: Optimism_, a philosopher named Pangloss believed that we\nlive in the best of all possible worlds. And despite the deep misfortune visited\nupon him–enslavement, torture, earthquakes, and more–Pangloss maintained his\nbelief that he lives in the best of all possible worlds. While the story is\nridiculing this type of thinking, I think there's something to be learned from\nPangloss. We may not be living in the best of all possible worlds, but I can\ncertainly imagine far worse worlds than I can imagine better ones. Maybe that's\nbecause we humans are wired to fear the worst so we can survive the world. But\nthe flipside is that you can be deeply grateful for living in a world where your\ndeepest fears are not reality.\n\nSo I'm thankful. Starting with my peaceful upbringing, I'm beholden to my\nparents and my grandparents who left war-ravaged countries to move to an island\nof peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm","metadata":{"id":61}}],["62",{"pageContent":"of peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm\ngrateful to my friends, teachers, and peers. I'm thankful for my hometown, the\nplace where I found love–a woman that believed in me and pushed me to my limits\nand beyond.\n\nHowever, I chose to leave to follow in the footsteps of my heroes. To the place\nwhere pioneers, inventors, and visionaries imagined and built a world where\nhumans can transcend their limitations. Extended by technology, we're evolving\ninto something new and beautiful. I'm grateful to the country that took me in,\nthe industry that let me follow my dreams, and the people that took a bet on me.\n\nYes, I know I'm lucky, and that's precisely why I'm thankful. But I also believe\nin progress. I think that we–all of us, all of humanity–are going somewhere,\nsomewhere beautiful. So be thankful; be thankful for every moment you're\nalive. And if you're also one of the lucky ones, you have a responsibility to\nmake the world a little better for everyone else.\n\nThank you for reading this.","metadata":{"id":62}}],["63",{"pageContent":"{\n  \"title\": \"Hello World\",\n  \"date\": \"04/09/2015\"\n}\n---\n\nYou can now embed runnable code snippets from [repl.it](https://repl.it) on your blog or website.\nJust go to [repl.it](https://repl.it) and pick one of the languages listed below, save your code and click share to get the html code to paste on your site.\n\n#### C++\n<script src=\"//repl.it/embed/iAR.js\"></script>\n<div>&nbsp;</div>\n\n#### C\n<script src=\"//repl.it/embed/iAS.js\"></script>\n<div>&nbsp;</div>\n\n#### Ruby\n<script src=\"//repl.it/embed/iAm.js\"></script>\n<div>&nbsp;</div>\n\n#### Python 3\n<script src=\"//repl.it/embed/iAo.js\"></script>\n<div>&nbsp;</div>\n\n#### Node\n<script src=\"//repl.it/embed/iAp.js\"></script>\n<div>&nbsp;</div>\n\n#### Go\n<script src=\"//repl.it/embed/iAr.js\"></script>\n<div>&nbsp;</div>\n\n#### Java\n<script src=\"//repl.it/embed/iAs.js\"></script>\n<div>&nbsp;</div>","metadata":{"id":63}}],["64",{"pageContent":"{\n  \"title\": \"On Hosting Sites from Your Editor\",\n  \"date\": \"03/08/2021\",\n  \"image\": \"https://amasad.me/public/images/hosting.png\"\n}\n---\n\nThis website is hosted on an [editor](/__repl). I can update it live and I can even see you visiting it in my editor [console](https://blog.replit.com/internet-of-fun).\n\nThis idea is not too far from how we used to make websites in the 90s and early 2000s. You wrote your code and FTP'd it into remote server and restart the webserver process to pick up the changes. Today, most people do it by git-pushing to a PaaS provider. I've been hosting apps, sites, bots, and microservices from my editor for the last two years, and in this post, I'll share my experience. While I've been doing in Replit, where it collapses your entire workflow into your code -- a code-first environment -- the following applies to anyone who's hosting code directly from where they wrote it.\n\nWhen writing code, the development environment feels closest to you. It's where you are making the changes and seeing your creation come to life. After coding, in a typical workflow, you push up your code for storage and sharing (to something like GitHub). If your changes are ready to release, you'll also push them to a hosting provider (say Heroku). Here is a diagram of it:\n\n![a diagram showing three different environments: localhost, production, git](/public/images/hosting.png)\n\nThe moment you send your code to a remote environment, you've created distance between you and your creation. It's living in a different environment where it's not easy to inspect and update. You've fragmented your workflow and now have two other locations where your code lives, and while git is great and maintaining copies of code, you've introduced multiple potential sources of truth.","metadata":{"id":64}}],["65",{"pageContent":"This destroys momentum especially for early-stage startups, side-projects, and those who are learning to code. Sadly, the \"industry standard\" often gets applied indiscriminately, robbing people of a superior mode of creation and all the fun and reward that comes with it. \n\nThe alternative: \n\n![a diagram showing one environment](/public/images/hosting2.png)\n\nWhen hosting from your editor, you're moving fast, updating the site and seeing crashes and debugging issues in realtime. For example, in Replit, I can enter the production repl and see active connections, inspect, and even hot-update live objects. \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I was wondering if the app is already getting usage and one of the wonderful things about hosting on <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@Replit</a> is getting a live repl on the hosted app. <br><br>Here I just got a reference to the db and listed the entries. <a href=\"https://t.co/UIoERFc50D\">pic.twitter.com/UIoERFc50D</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1332029622075047936?ref_src=twsrc%5Etfw\">November 26, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nHaving a production repl is super valuable. Paul Graham recounts how he used the Hacker News prod repl to react to an issue from his phone: \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I once had to write code on a phone, after HN mistook investor usage on Demo Day for a DDoS attempt and started ignoring the venue&#39;s IP address. I had to log into HN on a phone and paste a fix into the repl. This looks a lot more civilized.</p>&mdash; Paul Graham (@paulg) <a href=\"https://twitter.com/paulg/status/1255235112226238466?ref_src=twsrc%5Etfw\">April 28, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":65}}],["66",{"pageContent":"Another issue I've run into with today's standard workflow is projects going stale. After leaving a project for a few months the barrier to going back to hacking feels high: I'd have to pull, set up the dev environment again, and figure out how the hosting provider is configured. However, when hosting from my editor, I open up the project, and I'm right there hacking and \"deploying.\"\n\nBecause the distance from creation is reduced, I also start (and complete) many more projects. I'm quick to spin up something or to automate a piece of work. At work, because Replit feels close and fast, we spin up many bots to automate tedious tasks or introduce fun and serendipity. \n\n![lunch bot](https://pbs.twimg.com/media/EuCd-dvVkAwNO8K?format=jpg&name=medium)\n\nFinally, in cases of emergency, it also helps to be able to code live. We've been able to respond to emergencies  at breakneck speed. For example, a few months ago PyPi quitely deprecated their package search API which we use in our packager UI. Luckily, we found a package that searches PyPi via scraping the site. We spun up an alternative on Replit in 30 minutes:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Multiplayer <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@replit</a> story: <br><br>3rd party service deprecated w/ no warning 😱<br><br>I spun up a repl with and prototyped replacement ⚡️<br><br>Single-threaded couldn&#39;t handle 1 rps 😢<br><br>Someone jumps in w/ `uwsgi` now we&#39;re at 3 rps 💆🏽‍♀️<br><br>Dropped in LRU and now we&#39;re up to 50 rps 📈<br><br>Good—Shipit!</p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1340108478967267329?ref_src=twsrc%5Etfw\">December 19, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":66}}],["67",{"pageContent":"I'd like to see the dev community introduce more fun and interactivity back into building, especially when teaching new devs how to code. Most bootcamps today spend their first weeks teaching people git. But their students have no mental model for version control to be able to grok git, so it just starts on the wrong foot with people feeling inadequate or dumb for not \"getting it.\" \n\nSeymour Papert called this the [\"project/problem inversion\"](http://www.papert.org/articles/AnExplorationintheSpaceofMathematicsEducations.html). The natural way to acquire knowledge of new tools is to have the use-case for them; today new developers are taught to cargo-cult advanced development techniques before they've even finished learning how to code.","metadata":{"id":67}}],["68",{"pageContent":"{\n  \"title\": \"The Hyperreal\",\n  \"date\": \"3/13/2021\"\n}\n---\n\nIt's normal to get excited by social media likes. Some say social media is \"fake.\" But to the receiver of the like, they feel appreciated and heard, and to them, that's real. It's perhaps more real than going out into the world and saying interesting things and receiving real-world \"likes\" and praise. The activity is reduced to its essence and delivers intense satisfaction. Likes are hyperreal. \n\nFor something to be fake, it can't produce the intended result. It should be counterfeit. But hyperreal is the opposite. To make a hyperreal object from a real one, take only the details that excite the mind — like getting praise — intensify them, and drop everything else. When you reduce food to its most intense elements — sweet & salt — you get hyperreal (junk) food.  That is the formula for hyperreality. \n\nHyperreality is exciting, but too much of it is destructive to humans. It takes us out of our natural flow and makes us into addicts. Now you might object with something like \"everything in moderation,\" which is trite and true. But be prepared to fight the modern technological system optimized to produce hyperreality. \n\nYou might blame \"capitalism\" for working against our better angels. It is, after all, very efficient at producing hyperreality. But you'd be wrong because humans have been making hyperreality since cave drawings.\n\nCommunism produces hyperreality too. It is hyperreality. It takes a naturally occurring thing — family and community — and intensifies its most attractive elements. It's an intoxicating hyperreal vision. \n\nAre we doomed to eternal hyperreality addiction? It is a potential answer to Fermi's Paradox. Intelligent life evolves until all it does is produce and consume hyperreality at the expense of exploring the stars.","metadata":{"id":68}}],["69",{"pageContent":"I don't think we're doomed though. And I don't think regulation is the answer either. Religions have dealt with the destructive nature of hyperreality. Why do you think you can't draw pictures of people or animals in Islam? A restriction that generated an art culture rooted in abstract (unreal) shapes.\n\nThe secular West is especially vulnerable to hyperrealism because societal norms that could protect us are considered oppressive. I love the West's renegade aspect. It resulted in innovative art, science, and technology. But it left us unprotected against hyperreality.\n\nWhatever comes next — may be a techno-futurist religion — needs to address this issue.","metadata":{"id":69}}],["70",{"pageContent":"{\n  \"title\": \"Overcoming Intuition in Programming\",\n  \"date\": \"01/03/2016\",\n  \"hidden\": false\n}\n---\n\nIn a [series of experiments](http://faculty.chicagobooth.edu/nicholas.epley/alteretal.pdf),\nresearchers set out to discover the relationship between difficulty or\n\"disfluency\" and cognition. They presented the same test to two groups, one in\nan easy to read (intuitive) format and the other in a difficult (disfluent)\nformat. And in all the experiments they carried out, the disfluency group scored\nsubstantially higher. The theory behind this is that people will default to\nrelying on the automatic, effortless, and primitive system for reasoning. But if\nthings are counter-intuitive or harder to understand we switch to the deeper,\ndeliberate and analytical mode of thinking.\n\n\nI've been thinking about how this translates to programming. Programming is an\nintellectually challenging task, but luckily we invent tools to make it\nmanageable. I find that up to a certain point, the intuitive and easy properties\nof a given language, framework, or library might start to have negative\neffects. From personal experience and from mentoring beginners I noticed that\nwhen using tools that allow us to reason within our intuition, anytime we're\nfaced with some difficulty we feel that we've done something wrong. And although\nwe might have the necessary skills to overcome the difficulty, we often start\nquestioning and revising our work. Asking questions about best practices\nrelative to the framework instead of programming our way out. The quintessential\nexample of this is the Stack overflow questions for _\"how do I use jQuery to do\nX?\"_ or the answers _\"use jQuery [plugin] to do X\"_ where X could be anything from\nbasic arithmetic to websockets.\n\n### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We","metadata":{"id":70}}],["71",{"pageContent":"### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We\nmay refer to this as the __framework intuitive space__. On the other hand we may refer to the\nrest of the space that framework doesn't solve or have an opinion on\nas the __framework negative space__. The negative space\nis not necessarily a defect of the framework, it's just not in the space the\nframework was built to solve. However, having put the programmer in the intuitive space for a\nlong stretch of time, it makes it feel out of place when finding oneself in the\nnegative space.\n\nWhen the beginner programmer find themselves in the negative space, they often\nlook to the library authors to put them back in the intuitive space. That's why\nfor any popular framework you find that there is an entire ecosystem of plugins\nand addons that extends the framework's intuitive space to cover an increasingly\ngrowing surface area. It doesn't seem to be inherently wrong if it makes\nprogrammers more productive. However, it may have unintended negative consequences:\n\n1. Increased reliance from the programmer on the ecosystem's library authors\n2. Offloading of architectural decisions to the libraries all the while\nincurring technical debt\n3. Enabling the false belief that programming should always feel intuitive\n\n### The developer and library author codependency\n\nI should start by saying that this is technically a false dichotomy. All programmers\ntake on both those roles in any programming session. You maybe coding the product\nbusiness logic and switch to building a general purpose abstraction to help you\nin multiple places in your codebase. However, I've noticed that in open-source, people tend\nto act in a manner that makes this dichotomy seem true.\n\nThe easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the","metadata":{"id":71}}],["72",{"pageContent":"The easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the\nplugins and extensions. As a framework becomes more popular, a growing number of\ndevelopers (usually beginners) will start complaining about how it's hard to do\nX in this framework (and as we've seen X might be totally unrelated). Now, as in\nthe business world, open-source is extremely competitive and as soon as there\nis an opening to solve a perceived problem for a lot of people, many would rise\nup to the occasion. This becomes an enabler to the false belief that a\nprogrammer can spend all of their time programming in the intuitive space.\n\n### Conclusion\n\nI think fixing this problem ultimately comes down to education. Very early on\nwhen someone is learning programming our culture tend to emphasize an obsession with\ntooling. I get a lot of questions from aspiring programmers on what's the best\ntool or languages to learn. It's almost always a premature question to ask. I\nused to come up with answers like \"depending on what you're building\" or \"pick a\nbeginner friendly community\" or \"invest in a growing language\". I\nthink all of these are good answers, but it doesn't really matter that early on\nin a programmer's learning journey. It's all the same when you're\nessentially learning how to compute. Furthermore, these sort of answers enable\nthe culture of tooling obsession.\n\nCode reuse, libraries, sharing, and open-source are very important to software\nengineering, but we should be careful to not enable the belief that programming\nshould be as easy as gluing things together. In fact, these days I'm often\nskeptical when things feel a little bit too easy. If programming was as easy as\nthis then it would've already been automated away.","metadata":{"id":72}}],["73",{"pageContent":"{\n  \"title\": \"Building an In-Browser JavaScript VM and Debugger Using Generators\",\n  \"date\": \"01/06/2014\"\n}\n---\n\n### tl;dr\n\nI built a JavaScript VM and debugger in JavaScript. Checkout the example in the [demo app](http://debugjs.com/#example) and the [source code](https://github.com/amasad/debugjs). Read on for a dive into the technical details.\n\nUpdate: [I implemented one of the examples from Bret Victor's Learnable Programming](/2014/01/10/implementing-bret-victors-learnable-programming-has-never-been-easier/) using debug.js.\n\n### Introduction\n\n#### Motivation\n\nFor the past few years I've been working on creating tools to help people learn programming on the web. I've worked on [repl.it](http://repl.it) and open sourced the underlying technology which powered a [few](https://www.udacity.com/) [learn](http://www.codecademy.com/) to [code](http://www.learnstreet.com/) websites and until recently lead product engineering at Codecademy. Through all that, one thing I really wanted to see are the tools to make it possible to visualize code execution and step through code in the browser. To catch glimpse of what an ideal interactive learning environment would be you should check out [Learnable Programming](http://worrydream.com/LearnableProgramming/) by Bret Victor.\n\nIn addition to the educational benefits of such a tool, if matured it could be also useful for code instrumentation, web IDEs, and creating a foundation for writing other VMs on top of JavaScript (having the pausable machine state let’s you not worry about the non-blocking environment).\n\nEver since I've read about the [ES6 Generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) proposal, I've been toying with this idea in my head but it wasn't a real possibility until [Ben Newman’s](https://twitter.com/benjamn) [Regenerator](http://facebook.github.io/regenerator/) brought generators to the browser.\n\n#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction","metadata":{"id":73}}],["74",{"pageContent":"#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction\n* Ability to create a feature complete JS debugger on top of the VM\n* Mainly targeting browsers but should work in Node.js for development\n\n### Generators\n\n_if you're familiar with generators, feel free to skip this section or read [this](http://tobyho.com/2013/06/16/what-are-generators/) instead for a more comprehensive introduction_\n\nGenerators are part of the ES6 proposals and is making it's way slowly into production environments. Generators gives us a new type of functions where we can step in and out of a function while sending  and receiving values to and from it.\n\nThe following example should illustrate the fundamentals of generators:\n\n```javascript\nfunction* genFn() {\n  var x = yield 2;\n  yield x;\n  return 'done';\n}\n\nvar gen = genFn()\nconsole.log(gen.next());  // {value: 2, done: false}\nconsole.log(gen.next(1)); // {value: 1, done: false}\nconsole.log(gen.next());  // {value: \"done\", done: true}\n```\n\n_Notice the * at the end of the `function` keyword, that's all you need to create a generator._\n\n### Overview\n\nHaving the unique ability of suspending execution of a function and resuming at a later point in time, generators gives us the basic building block for creating a VM that can step through instructions and pause at any point. To achieve that, every function in the system must be transformed into a generator that yields to the machine before every instruction execution. This may sound similar to [Continuation Passing Style](http://en.wikipedia.org/wiki/Continuation-passing_style) with a trampoline, however, the main difference is that the call stack information in CPS is held in the lexical scope whereas in this method we need to take full control of the call stack. I'm not a compiler nor a PLT expert so I'm not really sure if this method has a name or if it has been tried before, if you do please let me know.","metadata":{"id":74}}],["75",{"pageContent":"We want the host JavaScript environment to take on as much of the responsibility of running code as possible. Beyond generator function transformation we have to do a few other things which I'll outline here and get into each later.\n\n* Control the call stack\n* Handle errors and error propagation\n* Control timers in the system (setTimeout, setInterval etc)\n* Workaround native APIs that expect function arguments (callbacks and not generators)\n* Write a debugger module\n\n### Code Transformation\n\nIn order to control the execution flow we need to yield back to the machine after each instruction execution. To do so, we take each instruction in our program and insert a `yield` expression before it. I chose to define an instruction (or a step) as a single JavaScript statement.\n\nFor example:\n\n```javascript\nvar foo = 1;\nif (bar === foo) {\n  foo = 2;\n}\n```\n\n After the transformation:\n\n```javascript\nfunction* __top() {\n  yield {step};\n  var foo = 1;\n  yield {step};\n  if (bar === foo) {\n    yield {step};\n    foo = 2;\n  }\n}\n```\n\nIn addition to the basic instruction transformation we need to add information about each function in our program that would be useful when building the debugger. We call this, a stack frame and it includes the following data about our function:\n\n* name\n* filename\n* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.","metadata":{"id":75}}],["76",{"pageContent":"* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.\n\nFinally, function calls are a bit trickier than regular instructions since we need to capture the call stack and play nicely with native and library function calls. On compile time, at the function call site, we don't know whether a function call is referencing a generator function (a function within our ecosystem) or a function object. If it was the former, we need to add it to our call stack and step into executing the function instructions, as for the latter we simply need to get a value out of it. We solve the issue by wrapping all function calls in a thunk and yield it back to the machine to make that decisions on runtime (where we have more information).\n\n“Thunk” is a fancy word for something JavaScript programmers do all the time -- create a closure that delays the computation of a piece of code. To illustrate:\n\n```javascript\nfoo();\n```\n\nBecomes:\n\n```javascript\nyield __thunk(function *thunk() {\n  return foo();\n}, this, arguments);\n```\n\nA more complex call expression would also work:\n\n```javascript\nfor (var i = foo(), b = bar(); i < 50; i++);\n```\n\nBecomes:\n\n```javascript\nfor (var i = yield __thunk(function* thunk() {\n  return foo();\n}, this, arguments), b = yield __thunk(function* thunk() {\n  return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack","metadata":{"id":76}}],["77",{"pageContent":"return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack\n\nOur machine's main responsibility is to invoke, push, and pop functions off the call stack. It starts out with a halted (or idle state) until we eval a string of code which is transformed and converted into a top-level generator. Then, we can call `step` on the machine and expect it to run the next instruction in our code via the generator `next()` method. If that instruction returns a thunk, we evaluate it and if it returns a generator we push it onto our call stack and any further steps will be invoked on it. When our current peek generator is done stepping we take the last value and pass it back into the next generator on our call stack. The passing is also done via the generator `.next` function which accepts an argument to be sent into the generator function.\n\n### Errors\n\nWhen invoking an instruction, there is a possibility it could throw an error. The way we deal with that is we try/catch every instruction invocation and if we get an error we pass it up the call stack incase one of the caller functions have try/catch statement waiting for us.\n\n```javascript\nRunner.prototype.$propError = function (e) {\n  while (this.stack.length) {\n    this.gen = this.stack.pop();\n    try {\n      this.gen.throw(e);\n      return;\n    } catch (e2) {\n      e = e2;\n    }\n  }\n  throw e;\n};\n```\n\n#### Timers\n\nOne of our goals is to be able to pause our machine at an point in time and for as much time as needed. Because of that we run into the problem of not being able to rely on the host JavaScript environment for controlling timers. e.g. we have a `setInterval` running with a second in between and we decided to pause the machine for 10 seconds, when we resume we shouldn't expect 10 back-to-back timers to trigger. The machine time should only be running when:\n\n1. We are executing instruction code.","metadata":{"id":77}}],["78",{"pageContent":"1. We are executing instruction code.\n2. We are in idle state (the call stack has unwinded and the machine is in a halted state).\n\nWe use a priority queue to store our timers and have a tick method that checks if there are any timers that should fire at that point in time. We rely on the host `setImmediate` or `setTimeout(tick, 0)` to provide us with our tick function.\n\nWhen a timer fires the machine simply triggers `timer` event and clients could react by running or stepping through the timer (thus creating a new call stack). This is very similar to JavaScript event loops but very specific to timers.\n\n#### Native APIs\n\nWe can't expect every API our code touches to understand how we do things using generators so the machine provides a way to wrap callbacks and yield them back to the machine to further step through them. However, a problem arises when we consider synchronous APIs that expect callbacks, for example `Array.forEach` will call the callback continuously until the iteration finishes and that's a problem because we expect to be able to pause any execution indefinitely. For that reason, we can't rely on the host environment native APIs to do the same thing. Luckily, this turns out not to be very hard to solve. All it took is taking the popular [es5-shim](https://github.com/es-shims/es5-shim) library and running our transformation on it so it become generator friendly.\n\n#### Events\n\nMuch like the the Native API problem, events expects event listeners made of functions, but this is a much simpler problem because this is an asynchronous API and all we have to do is wrap our listeners with a function wrapper that would trigger our machine whenever it's called.\n\n#### Debugger\n\nAfter creating the VM, writing the debugger was fun and relatively straightforward. The only issue I ran into is handling all the thunk garbage we have in our call stack because we treated them just like any function call to make the machine simpler.\n\nFeatures:\n\n* Breakpoints\n* Debugger statements","metadata":{"id":78}}],["79",{"pageContent":"Features:\n\n* Breakpoints\n* Debugger statements\n* Step in, out, and over any statement\n* Get scope variables and values\n* Get call stack\n* Eval in scope: whenever you on a breakpoint you can evaluate in that scope\n\nCheck it out [here](http://debugjs.com).\n#### Current status\n\nThe project is still in early development stages. I’ve only been working on it for about two weeks. In terms of correctness, I’m sure the VM can run most of the ES5 spec. One thing that came to mind while writing this post is that getters and setters are definitely broken at the moment.\n\nThe VM is currently very slow, especially the code transformation bit but there are a few quick wins to be had there to get it to an OK speed.\n\nI also realize that the generator transformation is just an intermediate step to the transformation that Regenerator does to be able to step in and out of functions freely. Therefore we could get rid of that step and transform directly to the state machine.","metadata":{"id":79}}],["80",{"pageContent":"{\n  \"title\": \"On VMs in JavaScript\",\n  \"date\": \"07/17/2012\",\n  \"author\": \"Amjad Masad\"\n}\n---\n\nThere are many challenges in implementing a language VM in JavaScript. Amongst those is the fact that your VM will be forced to live in a non-blocking environment, whereas most language interpreters are designed to be able to block in some cases. This forces JavaScript programs to be structured differently. Programs run shortly registering callbacks for events and yielding to the event loop that will dispatch the callback when the event is fired. While many enjoy this style of programming, there are others that think there is a better way:\n\n* [TameJS](http://tamejs.org/)\n* [Narrative JavaScript](http://www.neilmix.com/narrativejs/doc/index.html)\n* [jwacs](http://chumsley.org/jwacs/)\nand the list goes on...\n\n### In the VM\n\nYou maybe asking yourself what kind of asynchronous operations would an interpreter need to do in the first place. Good question! It's always good practice to put computationally heavy programs in Web Workers and that include VMs which makes interactions with the UI thread asynchronous, which for the most part, is ok, except to when it comes to user input. Most would expect it to be blocking. Also having the ability to pause and resume execution at any point in time would open the opportunity to create debugging tools like a stepping debugger.\n\nOne thing you can and many already do is **design your VM with a yield state**. But that doesn't really apply when implementing an X-to-JavaScript compiler or when compiling interpreters from other languages to JavaScript or when writing simple interpreters without really implementing a full blown VM.\n\n### Case study: BF Interpreter\n\nFor the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter","metadata":{"id":80}}],["81",{"pageContent":"For the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter\nThe function `bf` takes a string made of characters representing a BF program and runs it. You do not need to know what all the operations in the BF interpreter are but note that the input command `,` asks for user input.\n\n    // Adapted from http://code.google.com/p/jslibs/wiki/JavascriptTips\n    function bf (code) {\n      var codeLength = code.length\n\n        // Code pointer\n        , cp = 0\n\n        // Data pointer\n        , dp = 0\n\n        // Tape.\n        , m = []\n\n    // Loop start and end positions.\n        , loopIn = {}\n        , loopOut = {}\n\n    // Match [].\n        , stack = [];\n\n      // Register loop jumps\n      for (var cp = 0; cp < codeLength; cp++) {\n        if (code[cp] == '[')\n          stack(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack()] = cp;\n      }\n\n    // Execute.\n      for (var cp = 0; cp < codeLength; cp++) {\n        switch(code[cp]) {\n          case '>':\n            dp++;\n            break;\n          case '<':\n            dp--;\n            break;\n          case '+':\n            m[dp] = ((m[dp]||0)+1)&255;\n            break;\n          case '-':\n            m[dp] = ((m[dp]||0)-1)&255;\n            break;\n          case '.':\n            console.log(String.fromCharCode(m[dp]));\n            break;\n          case ',':\n            m[dp] = prompt('input').charCodeAt(0)||0;\n            break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }","metadata":{"id":81}}],["82",{"pageContent":"break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }\n\nNow the above is a **synchronous** BF interpreter written in JavaScript and it uses `prompt` for input (`,`) which is the browser's native blocking stdin. Loading it in the main browser UI thread would work, however, running large BF programs would cause it to block and hang your tab or browser. Loading it in a Web Worker would not work either because Workers do **not** have access to the `window` obect.\n\n#### CPS'ed BF interpreter\n\nWe can try fixing the interpreter by making the input operation a non-blocking call that takes a callback to continue the program after input was recieved from the user from the UI thread, via the Web Worker message API. let us assume this has been already implemented for us and we can use: `console.input`.\n\nYou would quickly notice that having an asynchrounous operation is infectious and it would force us to restructure our program into a [CPS](http://en.wikipedia.org/wiki/Continuation-passing_style) style.\n\n_Note that This could be further simplified but it's left to demonstrate the point._\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (var cp = 0; cp < codeLength ; cp++) {\n        if (code[cp] == '[')\n          stack.push(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack.pop()] = cp;\n      }\n\n      var ops = {\n        '>': function (cont) {\n          dp++;\n          cont();\n        }\n      , '<': function (cont) {\n          dp--;\n          cont();\n        }\n      , '+': function (cont) {\n          m[dp] = ((m[dp]||0)+1)&255;\n          cont();\n        }\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();","metadata":{"id":82}}],["83",{"pageContent":"}\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();\n        }\n      , ',': function (cont) {\n          console.input(function (data) {\n            m[dp] = data.charCodeAt(0) || 0;\n            cont();\n          });\n        }\n      , '[': function (cont) {\n          m[dp]||(cp=loopOut[cp]);\n          cont();\n        }\n      , ']': function (cont) {\n          cp = loopIn[cp]-1;\n          cont();\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength) {\n          (ops[code[cp]] || noop)(runNext);\n        }\n      }\n      cp = -1;\n      runNext();\n    }\n\nNotice how every function in the system receives a callback function which is responsible for continuing the program. The callback maybe called with values that would've rather been return values. In our case, there exist no need for return values because state is encapsulated within the `bf` function closure.\n\nBy doing so **We eliminated the need for a JavaScript runtime call stack**, as each function would be responsible for continuing the execution of the program. Which means each function has the power and ability to stop the execution (maybe wait for an event to happen) and continue at a later time. Which I think is freeing.\n\n#### Blow it up\n\nEven-though we don't need an actual call stack anymore because every function call in our program is the last statement in it's caller function that would be responsible for continuing it's program after it finishes executing. However we are still bound to the runtime's call stack, that would be exhausted as soon as we try to run a non-trivial BF program.","metadata":{"id":83}}],["84",{"pageContent":"Luckily in functional programming there is a technique called trampolining that would help minimize the call stack size needed to run programs written in CPS. It works by having a loop that is responsible for calling the program's functions that would in turn return a continuation function to be executed by the same loop.\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (cp = 0; cp < codeLength ; cp++)\n        if (code[cp] == '[') stack.push(cp);\n        else if (code[cp] == ']') loopOut[loopIn[cp] = stack.pop()] = cp;\n\n      var ops = {\n        '>': function () {\n          dp++;\n          return runNext;\n        }\n      , '<': function () {\n          dp--;\n          return runNext;\n        }\n      , '+': function () {\n          m[dp] = ((m[dp]||0)+1)&255;\n          return runNext;\n        }\n      , '-': function () {\n          m[dp] = ((m[dp]||0)-1)&255;\n          return runNext;\n        }\n      , '.': function () {\n          console.log(String.fromCharCode(m[dp]));\n          return runNext;\n        }\n      , ',': function () {\n          return function () {\n            console.input(function (data) {\n              m[dp] = data.charCodeAt(0) || 0;\n              run(runNext);\n            });\n          };\n        }\n      , '[': function () {\n          m[dp]||(cp=loopOut[cp]);\n          return runNext;\n        }\n      , ']': function () {\n          cp = loopIn[cp]-1;\n          return runNext;\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength)\n          return (ops[code[cp]] || noop)();\n      }\n\n      function run (cont) {\n        // Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future","metadata":{"id":84}}],["85",{"pageContent":"// Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future\n\nThings should not be this hard. JavaScript must grow as a language to allow constructs that makes it easier to write asynchronous programs. In addition to the web finally realizing the dream of being the application platform, JavaScript also plays a strong role in evented-io server programming which had proven to be quite efficient.\n\nLet us take a look at using [generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) to emulate coroutines that will land in the next version of JavaScript, ES Harmony. The following example is written using the excellent [task.js](http://taskjs.org/) library:\n\n    function bf (code) {\n\n      // Create a task that could yield.\n      task.spawn(function () {\n        var codeLength = code.length\n          , i = 0, cp = 0, dp = 0\n          , loopIn = {}, loopOut = {}, m = {}\n          , stack = [];\n\n        for ( var cp = 0; cp < codeLength ; cp++ )\n          if ( code[cp] == '[' )\n            stack.push(cp);\n          else if ( code[cp] == ']' )\n            loopOut[loopIn[cp] = stack.pop()] = cp;\n\n        for (var cp = 0; cp < codeLength && i < 100000; cp++, i++) {\n          switch(code[cp]) {\n            case '>':\n              dp++;\n              break;\n            case '<':\n              dp--;\n              break;\n            case '+':\n              m[dp] = ((m[dp]||0)+1)&255;\n              break;\n            case '-':\n              m[dp] = ((m[dp]||0)-1)&255;\n              break;\n            case '.':\n              console.log(String.fromCharCode(m[dp]));\n              break;\n\n            // Yield to the event loop until we get the user input.\n            case ',':\n              m[dp] = yield console.input();\n              break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;","metadata":{"id":85}}],["86",{"pageContent":"break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;\n          }\n        }\n     });\n    }\n\nWhat's more, ES Harmony will also include tail call optimization.\n\n### A Shameless Hack\n\nTo get input on the emscripten compiled languages on our [repl.it](http://repl.it) project we considered using a CPS code transformer like the above-mentioned list but the approach failed for the following reasons:\n\n1. Compiling language interpreters to JS using [emscripten](https://github.com/kripken/emscripten/wiki) generates [lots of JavaScript](https://raw.github.com/replit/empythoned/master/dist/python.opt.js) which when ran against these compilers takes forever.\n2. JavaScript is not [tail call optimized](http://en.wikipedia.org/wiki/Tail_call); and this is bad because compiling to CPS means functions would be used for control flow, a whole lot of them. However I think some transformers do use clever tricks to minimize call stack.\n3. Performance hit which is for the most part from the cost of creating and invoking a lot of functions.\n4. Adding an additional compile step makes it even harder to debug.\n\nSo we took the easy way out and hacked the hell out of it. After thinking for a while about the problem of what in essence is resource sharing across threads which is prohibited in browsers for the added complexity and the security concerns of the web. I had a crazy idea of using the Web SQL Database to share data between the Worker and the UI thread since it has a synchronous worker API. While I'm sure this hack doesn't make threads share memory but is fast enough for stdin. The busy loop count (100000000 in the code below) is tuned and maybe tuned further to get faster results.\n\nWhen the language interpreter in a Web Worker hits an input operation it will stop execution, ask the main thread for input via a message, and busy loop while polling for changes in a Web Database table:","metadata":{"id":86}}],["87",{"pageContent":"var DB = self.openDatabaseSync('replit_input', '1.0', 'Emscripted input', 1024);\n    var input = function () {\n      self.postMessage('stdin');\n      var t = null;\n      DB.transaction(function (tx) {t=tx});\n      var i, res;\n      while (!(res = t.executeSql('SELECT * FROM input').rows).length) {\n        for (i = 0; i < 100000000; i++);\n      }\n      t.executeSql('DELETE FROM input');\n      return res.item(0).text;\n    };\n\n\nAnd in the UI thread:\n\n    worker.addEventListener('message', function (e) {\n      if (e.data === 'stdin') {\n        console.input(function (data) {\n          DB.transaction(function () {\n            tx.executeSql('INSERT INTO input (text) VALUES (' + data + ')', []);\n          });\n        });\n      } else {\n        // Do other stuff\n      }\n    }, false);\n\nThe Web SQL Database spec is deprecated for the IndexedDB which has not fully landed in browsers yet but this approach, in theory, should work with it.\n\n### Why all this?\n\nI ran into these issues during my work on [repl.it](http://repl.it) last year. And my recent on and off work on allowing debugging JavaScript in the browser at [codecademy](http://codecademy.com).","metadata":{"id":87}}],["88",{"pageContent":"{\n  \"title\": \"Kierkegaard and Entrepreneurship\",\n  \"date\": \"04/14/2016\"\n}\n---\nEarlier this year I spent a lot of time thinking about what \"impact\" means to\nme. In the tech world, we use it to say that our work matters and that we're\n\"making a dent in the universe\". But it feels empty most of the time. I came to\nthe conclusion that \"impact\" has no meaning to me when I'm easily\nreplaceable. No matter how many people's lives I'm touching with software that\nI've written, if I'm not bringing something unique -- a part of myself -- into\nmy work then I'm not doing something worth doing.\n\nLast month, on the [Philosophize This\npodcast](https://www.youtube.com/watch?v=1yPbakzvrx0), I heard about\nKierkegaard's work on despair and found it to be a weirdly good articulation of\nmy thoughts on work fulfillment and progress. He was a 19th century Danish philosopher\nand wrote primarily on psychology and the human condition. Although he viewed\nmost things through the lens of theology, it's common -- and works pretty well\n-- to have a secular reading of his work.\n\nHe viewed the self as having two opposing aspects. One that he called the\ninfinite and the other is the finite. He described the relationship between them\nas dialectical -- which means that one cannot exist without the other and that\nthere is constant tension between them. Furthermore, there exists a \"synthesis\",\na point which we can balance these contradicting forces.\n\n## The infinite and finite\n\nThe finite aspect of the self deals with worldly facts about the person. It is\nthe condition in which one exists. Your name, sex, race, and even things that\nare more general like the social, political, and cultural environment that you\nfind yourself in. The finite is concerned with necessity as opposed to\npossibilities -- things that are largely predetermined.\n\nThe infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The","metadata":{"id":88}}],["89",{"pageContent":"The infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The\ninfinite is concerned with what the self can become as opposed to its current\nstate. It opens up opportunities to free oneself from the rigidity of finite\nexistence.\n\nIf someone lacked either aspects of themselves, Kierkegaard thought they'd be in\na state of despair -- they can lose themselves in the infinite or in the finite.\n\n## The finite is the default\n\nThere is generally a set path in life for people to follow. Most choices are\nmade for us, and someone can exist purely within the tracks that were\nmanufactured for them by their parents, culture, and society. After we graduate\nand become adults we go to work and get plugged into the place that is deemed\nmost fit for us and contribute our small part as cogs in the machine.\n\n>Just by losing himself this way, such a man has gained an increasing capacity\n>for going along superbly in business and social life, indeed, for making a\n>great success in the world. Here there is no delay, no difficulty with his self\n>and its infinitizing; he is as smooth as a rolling stone, as courant [passable]\n>as a circulating coin. He is so far from being regarded as a person in despair\n>that he is just what a human being is supposed to be.\n\nBob is an engineer because his father was an engineer. He uses vim because\neveryone at work uses vim. He takes the designs passed to him by his product\nmanager and implements them 100% according to spec. He never questions\nanything. He is moved by his managers from team to team without any\nobjections. When asked why he's doing what he's doing, he parrots what his\nmanager told him about the importance of the mission and how he fits in. He is\nas passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is","metadata":{"id":89}}],["90",{"pageContent":"as passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is\n>(in the divine understanding of it), does not dare to believe in himself, finds\n>it too venturesome a thing to be himself, far easier and safer to be like the\n>others, to become an imitation, a number, a cipher in the crowd.\n\nBob is so easy to replace. He provides nothing to his team, work, society, or\nfamily that is unique to himself. He'd rather lose himself in the crowd, become\nindistinguishable, than be himself.\n\n>it is dangerous to venture. And why? Because one may lose. But not to venture\n>is shrewd. And yet, by not venturing, it is so dreadfully easy to lose that\n>which it would be difficult to lose in even the most venturesome venture, and\n>in any case never so easily, so completely as if it were nothing ...one’s self.\n\nBob should know that he stands to lose more by accepting the default. He risks\nlosing himself by taking the seemingly safe and secure choice. Let alone dream,\nimagine, or take the time to figure out what he really cares about in this\nworld.\n\n## Lost in the infinite\n\nEngaging in the infinite aspect of the self is important to balance out the\nfinite. To come up with new ideas, new understanding of the world, and new\nmeaning. In other words, to become something more. But unless this process is\ngrounded in reality (the finite), the self may risk becoming too abstract,\nfantastic, unreal.\n\nFor example, if Bob loves humanity so much it makes him weep, it's just his boss\nhe cannot stand. He has been carried away into the abstract, the infinite, and\nhave lost his relation to the finite, the concrete. He holds an abstract and\n[free-floating belief](https://wiki.lesswrong.com/wiki/Free-floating_belief)\nthat's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine","metadata":{"id":90}}],["91",{"pageContent":"that's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine\nLearning, he accumulates a whole lot of knowledge on the subject but never gets\na chance to apply it at his job. Bob has lost himself in pursuing this knowledge\nbecause he is not able to benefit himself or the world from it.\n\nFinally, and more relevant to our discussion, is being lost in \"willing\" (or\nwishing). For example, Bob wishes the world to move to renewable energy. But he\nnever takes an action towards that end. This goal is so out of his control that\nthere seems to be nothing he can do about it. He never grounds his imagination\nin the finite. He doesn't take the time to come up with the smallest possible\ntask that can be a step towards achieving his desired state.\n\n>the will does not constantly become concrete in the same degree that it is\n>abstract, in such a way that the more it is infinitized in purpose and\n>resolution, the more present and contemporaneous with itself does it become in\n>the small part of the task which can be realized at once, so that in being\n>infinitized it returns in the strictest sense to its self, so that what is\n>farthest from itself (when it is most infinitized in purpose and resolution) is\n>in the same instant nearest to itself in accomplishing the infinitely small\n>part of the task which can be done even today, even at this hour, even at this\n>instant.\n\n\n## Entrepreneurship\n\nI view entrepreneurship as means of reconciling the infinite and finite. You\nventure into your imagination, gather knowledge, and dream about a better\nworld. But you have to bring some of that back to earth. You take a step -- no\nmatter how small -- towards your imagined world in the real world.\n\nThis is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.","metadata":{"id":91}}],["92",{"pageContent":"This is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.\n\nThis notion of progress comes from [Hegelian\ndialectic](https://en.wikipedia.org/wiki/Dialectic#Hegelian_dialectic). When\ntraversing dialectical opposites like the infinite and finite, and are finally\nable to reconcile the conflict and arrive at common truths. This becomes our new\nreality and the process restarts.\n\nI see this as the perfect framework for the work we do in technology. There is\nalways a tension between what is and what could be. There are people and\norganizations who are stuck in the status quo (the finite). On the other hand,\nthere are folks who are stuck in the what could be without any actionability\n(the infinite).\n\nTaking a step into the infinite could be hard, but the hardest thing of all is\nbringing something back to the finite. The real art is coming up with the\nsmallest possible task that can be done here and now.\n\nTake Elon Musk for example, like Bob, he wants the world to move to renewable\nenergy but that's such a big and daunting task that seems unapproachable. Elon\ncould've been lost in the infinite. Instead he took a step towards doing\nsomething within his reach. He started an electric super-car company. It's\ncounter-intuitive how this is relevant as outlined in his [master\nplan](https://www.teslamotors.com/blog/secret-tesla-motors-master-plan-just-between-you-and-me)\nin 2006:\n\n>The strategy of Tesla is to enter at the high end of the market, where\n>customers are prepared to pay a premium, and then drive down market as fast as\n>possible to higher unit volume and lower prices with each successive model.\n\nTen years later, Tesla is shipping the first mass-market electric car and\ninnovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own","metadata":{"id":92}}],["93",{"pageContent":"innovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own\nsense. I think the most important thing is to always make progress. Don't get\nstuck in the weeds for too long. Imagine a better world, and take a small step\ntowards it.","metadata":{"id":93}}],["94",{"pageContent":"{\n  \"title\": \"Leapfrogging the IDE\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nProgress in technology happens incrementally; it's hard to imagine inventing the cellphone without inventing landline telephones first. However, adoption need not respect the incremental nature of innovation. Advanced technology is often easier to adopt because it requires less infrastructure.\n\nThe classic example of this is the astonishing adoption of mobile in Africa especially relative to landline:\n\n![mobile vs fixed in africa](/public/images/africa.jpg)\n\nSometime last year we discovered that some users use [Repl.it](https://repl.it) -- an online REPL and development platform -- as their primary programming tool. This seems surprising at first: other than for learning, why would anyone use a more limited tool over a more mature and flexible one?\n\nIt turns out this was the wrong question to ask. A better one would be: \"if someone had already learned to code on an online REPL and it serves their needs then why would they want to invest in a local setup?\". Because they'd started with Repl.it, they need a compelling reason to install an IDE locally and possibly have to invest in buying a more expensive device (say from a Chromebook to a Mac).\n\nIn fact, this is the exact question our users are [asking](https://repl.it/talk/ask/Can-Replit-substitute-a-code-editor-like-PyCharm/6245): why do I have to switch?\n\n<hr/>\n![replit as primary coding](/public/images/primary.png)\n<hr/>\n\nThis way of formulating questions better explains the leapfrogging phenomenon in general: \"why do I have to invest in a PC if my tablet/mobile handles all my computing needs?,\" \"why do I need a credit-card if I can just use my mobile payment wallet?\" etc.\n\nIn our experience, even the people that make the switch are often dissatisfied with the result -- wishing VSCode  worked just like Repl.it:\n\n<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>","metadata":{"id":94}}],["95",{"pageContent":"<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>\n\nWith programmers growing up today being used to instant, interactive, globally accessible programming tools like Repl.it, Jupyter Notebooks, serverless (pay-as-you-go) compute, and others, it doesn't seem so outlandish to imagine a post-IDE world.\n\n_This blog is built and hosted with Repl.it: [amasad.me/__repl](/__repl)_","metadata":{"id":95}}],["96",{"pageContent":"{\n  \"title\": \"Implementing Bret Victor's Learnable Programming\",\n  \"date\": \"01/10/2014\",\n  \"hidden\": \"true\"\n}\n---\n\nA few days ago I [released debug.js](http://amasad.me/2014/01/06/building-an-in-browser-javascript-vm-and-debugger-using-generators/) and I breifly touched on the educational applications of the library. This morning, I had a couple of hours before going to work so I decided to implement the “Make flow visible” example from Bret Victor’s [‘Learnable Programming’ paper](http://worrydream.com/LearnableProgramming/) (Feel free to change the code):\n\n<iframe width=\"130%\" height=\"300px\" src=\"https://amasad.github.io/learnable-programming-demo/\" style=\"margin-left: -15%; border: 1px solid #EBF2F6;\"></iframe>\n\n[_premalink_](https://amasad.github.io/learnable-programming-demo/)\n\nHere is how it’s done:\n\n1. Given a program, step through it once using [debug.js](https://github.com/amasad/debugjs) to get the execution flow info\n2. Plot the execution flow using [d3](http://d3js.org/)\n3. Whenever the user scrubs through the plot, rerun the steps up to the step index that the user has the pointer over.\n4. Repeat from 1 when the editor code change\n\nThe entire thing is ~250 LOCs and is [up on Github](https://github.com/amasad/learnable-programming-demo).","metadata":{"id":96}}],["97",{"pageContent":"{\n  \"title\": \"Beware the Metagame\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nHave you ever wondered why the less \"pure\" a scientific field is, the less progress we've made?\n\n![](https://imgs.xkcd.com/comics/purity.png)\n\nThe more abstract a subject is, the easier it is to reason about and therefore make progress on. That's why we've made a lot more progress in math and physics than any other subject. The problem became more salient recently as some of the perceived scientific progress made in the less pure sciences -- psychology, medicine, economics -- is being nullified in a widespread [\"replication crisis\"](https://en.wikipedia.org/wiki/Replication_crisis) where many scientific studies are failing to reproduce.\n\nOne way to get more abstract is to take the meta view of a subject. Programming Language Theory (PLT), for example, is the study of programming languages and their features and characteristics. While a lot of progress has been made in PLT, rarely does this translates into features in languages used in the real world. There's often decades-long gap for some form of a PLT idea to make to the industry because programming is messy and complicated and full of human problems that PLT researchers don't bother studying.\n\nI have a lot more respect for people who stick to the base game, avoiding getting sucked into the much more comfortable metagame. While we need researchers and scientists to go meta, they should remain tethered to the base-game and work closely with practitioners.","metadata":{"id":97}}],["98",{"pageContent":"I've first noticed this problem in the startup world where you see famous people that sell books, talk at conferences, and tweet advice to founders, but when you take a closer look, they've never done much founding themselves. They're like the \"entrepreneurship\" professor that never built a business. They're experts in the metagame -- they're polished speakers, engaging writers, and thought-leadering tweeters. The problem, though, is that they're not judged by customers, the market, or nature, instead they're judged by their peers. I call them metapreneurs.\n\nThis is an instance of what Nassim Taleb calls \"The Expert Problem\" -- when other experts and meta-experts judge experts. Eventually the lack of contact with reality will corrupt the field. In the sciences, that lead to the replication crisis and the [absurdities](https://areomagazine.com/2018/10/02/academic-grievance-studies-and-the-corruption-of-scholarship/) of the humanities.\n\nIf you find yourself going to a lot of conferences, opining too much on the latest fad in your field, and talking more about doing the thing than doing the job itself, then you, my friend, are getting sucked into the metagame.","metadata":{"id":98}}],["99",{"pageContent":"{\n  \"title\": \"Fake Minimalism\",\n  \"date\": \"01/12/2017\"\n}\n---\n\nIt's now fashionable to call yourself a \"minimalist\", but is that merely about not having things? I remember going to school everyday carrying nothing at all, no bag, no books, no pen, nothing -- I was a slacker. If I needed a\npen, say for a pop quiz, I had to borrow one quickly. In other words, I depended\non my classmates to provide the pen. Is this really minimalism? Yes, I didn't need the material possession of a pen, but I had to depend on others to provide the pen.\n\nIn Silicon Valley, where your company feeds you, washes your clothes, and supply your\nsocial life, are you a minimalist for not having a kitchen, a washer, or friends\noutside of work? Defined this way, a baby is the ultimate minimalist, after all\nit has zero possessions and relies on the mother for everything.\n\nI think self-sufficiency needs to be taken into account when evaluating\nminimalism -- even if it's at the cost of having more material possessions. For\ninstance, buying a hair clipper and spending a bit of time learning how to\ncut my own hair is definitely more minimal than relying on a barber that I have\nto schedule with, pay to, and go to (that can get sick, go on vacation, or\nmove away).\n\nA similar thing happens in software all the time -- is it more minimal:\n\n- to use a service than it is implement your own?\n- to take on a software package dependency than it is to write your own library?\n- to have users always augment your app with some other app for a missing\n  feature than it is to add it?\n\nA Fake Minimalist will go with the former for every case.\n\nIn his [\"Spec-ulation\" talk](https://youtu.be/oyLBGkS5ICk?t=23m), Rich\nHickey brought this point home by defining software growth as (my emphasis):\n\n- Accretion: to provide more functionality.\n- __Relaxation: to require less (dependencies, inputs, etc).__\n- Fixation: to fix bugs.","metadata":{"id":99}}],["100",{"pageContent":"{\n  \"title\": \"50th Anniversary of The Mother of All Demos\",\n  \"date\": \"12/9/2018\"\n}\n---\n\nI was asked to give a toast in celebration of the 50th Anniversary of [The Mother of All Demos](https://en.wikipedia.org/wiki/The_Mother_of_All_Demos) so I spent some time reflecting on Engelbart's work. \n\nMost of the commentary on his work is focused on the technical achievements and the impressive feats of engineering that's genuinely 50 years ahead of its time. Just this week we, at Repl.it, we introduced Multiplayer -- the ability to code together with anyone in the world -- and although we have the benefits of modern tooling and infrastructure it was still hard work\n\nA more interesting question to ask would be: \"What's Douglas Englebart's generation function?\" In other words, what ideas, themes, and philosophies that have inspired his groundbreaking work?\n\nI didn't have much time to work with, so I had to go mostly of off memory -- this question requires a more in-depth examination. However, I've identified three themes that are worth studying. \n\n## Computers as mind extenders\n\nEngelbart and his contemporaries saw computers as first and foremost tools for mind extension. Something we can use to augment our intellect to take on more and do more. \n\n>\"By augmenting human intellect we mean increasing the capability of man to approach complex problem situation to gain comprehension to suit his particular needs and to derive solutions to problems. Increased capability in this respect is taken to mean mixture of the following: more rapid comprehension, better comprehension, the possibility of gaining useful degree of comprehension in situation that previously was too complex, speedier solutions, better solutions and the possibility of finding solutions to problems that before seemed insoluble.\" -- [Augmenting Human Intellect](https://www.dougengelbart.org/pubs/papers/scanned/Doug_Engelbart-AugmentingHumanIntellect.pdf)","metadata":{"id":100}}],["101",{"pageContent":"This sits in stark contrast to today's computers as the driver for the attention economy. Where computers as seen as entertainment devices at best. A more cynical reading of the way governments and ad-based businesses use computers would lead you to believe they're devices of control.\n\n## Evolutionary design\n\nTo understand Engelbart it's important to not view him as a lone inventor genius a la Tesla that predicted what computers could do 50 years ahead of his time. In his own words you can see that they took a much more exciting approach to discovery:\n\n>\"We're pursuing this monstrous goal by building and trying *empirically* -- we approach evolutionary-wise because we feel it's a whole system problem [...] it's much more than these computer tools\"\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/agdPQuFr0yg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Bootstrapping\n\n\"Bootstrapping\" is another recurring theme in Engelbart's work. I think of it as \"increasing returns\":\n\n- You build tools, and then the tools you built helps you create better tools. \n- Tools make you smarter, and you make better tools that make you smarter... ad nauseam. \n- Tools increase productivity which makes us wealthier which in turn allows us to invest in more and better tools.\n\n## Conclusion\n\nIt's worth noting that what seemed to drive Engelbart was his concern for the unique challenges an exponentially changing world brings. He believed that [\"boosting Collective IQ\"](https://www.dougengelbart.org/pubs/papers/scanned-original/2004-augment-133319-augmenting-society's-collective-iqs.pdf) is imperative for the flourishing of humanity.\n\nIn Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.","metadata":{"id":101}}],["102",{"pageContent":"In Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.\n\n_Thanks to Figma and Dylan Field for inviting me to [reflect](https://www.meetup.com/Figma-SF/events/cwsnhqyxqbmb/) on this awesome day._","metadata":{"id":102}}],["103",{"pageContent":"{\n  \"title\": \"Civilizational Primitives\",\n  \"date\": \"11/16/2022\"\n}\n---\n\nAt the dawn of civilization, with the introduction of the agricultural revolution, humans needed to coordinate in larger numbers so _the hierarchy_ emerged as the primary organizing tool. People organized into pyramid-like structures with ranks and different entitlements and responsibilities. This structure proved useful and spread to apply to every aspect of civilization: we had kings and peasants, owners and serfs, clergy and laymen. \n\nWith the industrial revolution, we needed ways to coordinate in larger numbers and a more decentralized manner. The _assembly line_ emerged as the basic civilizational primitive of this era. Every node — be it a person, a company, or a nation — was hyper-specialized and produced one thing with a standard interface to handle transactions between nodes. While the hierarchy never disappeared, many aspects of society were remade in the shape of the assembly line. Children go through school one grade at a time, the economy is made of supply chains and consumer-producer pairs, money is printed by the Fed and filtered to the economy through a chain of financial institutions. Even software is built by layering on components on a stack going through different stages and pipelines.","metadata":{"id":103}}],["104",{"pageContent":"Today, I believe we are going through another major transition: The Information Revolution. While it’s become out of fashion to point this out, it’s undeniable that civilization is being rebuilt. So what is this era’s civilizational primitive? It seems clear to me it’s _the network_. Unlike the pyramid and the supply chain, the network topology requires less coordination; it’s emergent, self-improving, and self-organizing. The radio, telephone, and the internet are straightforward examples of networks. But if you look deeply, you’ll see that networks are infecting almost everything else: money flows through payment networks (and Bitcoin is bootstrapping money on the network), startups and open-source proved that flatter network-like structures could be a superior way to work, and even software is changing to be built through networks of packages, APIs, and cloud computing. And while schools remain stubbornly unchanged, innovation at the edges resembles a network: kids learn to code and make on networks like Scratch and [Replit](https://replit.com), and they learn how to solve problems on networks like [Synthesis](https://synthesis.is). How will networks change government and politics? Arguably politics is already changed. Today policy is made not top-down but through a decentralized network of universities, think tanks, donors, and politicians. [The Network State](https://thenetworkstate.com) is an attempt to describe the future of governance. \n\nWhile the network, like its predecessors, is a neutral tool, I believe it creates a slightly more free world. Strict hierarchies meant that people were stuck in castes and bad luck. The assembly line reduced people to cogs in a giant machine. While the network affords people more freedom to self organize and choose which networks to affiliate with.","metadata":{"id":104}}],["105",{"pageContent":"{\n  \"title\": \"Why I'm Excited About Object.observe\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nObject.observe is one of the newer additions to JavaScript that will be landing in [Chrome soon](https://groups.google.com/forum/#!topic/v8-users/aeSFJK1L5n4). It lets you listen to changes on objects and their properties. I think it has many interesting applications and here are the few that I'm excited about the most.\n\n## Basic usage\n\nBefore we dive into the applications of `Object.observe`, let's take a second to look at a basic usage example.\n\n```javascript\nvar o = {};\n\nObject.observe(o, function(changes) {\n  // This callback runs asynchronously and aggregates the changes that happened\n  // in the previous execution turn into `changes` param.\n  changes.forEach(function(change) {\n    console.log(change.type, change.name, change.oldValue);\n  });\n});\n\no.foo = 1; // add, 'foo', undefined\no.foo = 2; // update, 'foo', 1\ndelete o.foo; // delete, 'foo', 2\n```\n\nYou can start playing with it in Chrome today by going to 'about:flags' and enabling the *Enable Experimental JavaScript* flag. For more usage examples and API documentation refer to the to the [Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n\n## Two-Way Data Binding\n\nAlso known as the holy grail of JavaScript MVC frameworks. The ability to bi-directionally synchronize your model and view without piling on mountains of code makes for easier to maintain code, lower payload size, and possibly faster applications. Without `Object.observe` we currently rely on:\n\n* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters","metadata":{"id":105}}],["106",{"pageContent":"* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters\n\nWith wrapper objects we lose interop with the plethora of JS libraries that are built to operate on plain objects and incur the cost of converting from and to plain objects when communicating over the network (or with other windows, web workers etc). On the other hand dirty checking can be expensive to perform and needs to be either performed via polling or restricting where and when we can operate on our data objects. Finally, getters and setters will only notify us of changes on the property level and not of the deletion and addition of properties on the parent object and requires a considerable amount of wiring to boot.\n\nFrameworks can start using `Object.observe` as a faster and simpler implementation while keeping the same API. However, once this lands on all browsers, I think most people will be more than happy to go back to using plain old JS objects without losing any of the power these frameworks provide.\n\n## Evented Programming\n\nEvery sufficiently advanced JavaScript library, framework, or application contains at least one implementation of an event emitter system. For example, if you use Backbone or Ember, you have the framework's implementation and also, jQuery's implementation on which both depend. This bloat hurts both the developer, having to deal with multiple similar implementations, and the user, having to download more data and using more bandwidth and battery life. `Object.observe` supports custom notifications via the `Object.getNotifier` API, which can be thought of as “triggering events” in the traditional event emitter implementation.\n\nHere is an example of triggering a ready event on an application controller.\n\n```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging","metadata":{"id":106}}],["107",{"pageContent":"```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging\n\nLast week I wrote about  [JavaScript debugging techniques](http://amasad.me/2014/03/09/lesser-known-javascript-debugging-techniques/) and how to -- among other things -- break on object property access to stop and take a look at what's changing certain properties on your objects. With `Object.observe`, we can get an idea of when and what changed on an object:\n\n```javascript\nObject.observe(someObject, function(changes) {\n  console.log('someObject changed', changes);\n});\n```\n\nUnfortunately, we won't be able to get a stack trace that points back to the code that made the change because the callback runs asynchronously, nonetheless, it should be very useful.\n\n## Other Resources\n\nIf you want to learn more, you might be interested in the following resources:\n\n* [The spec on the Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n* [Rick Waldron's post on Object.observe](http://weblog.bocoup.com/javascript-object-observe/)\n* [Addy Osmani's talk on Object.observe](http://addyosmani.com/blog/the-future-of-data-binding-is-object-observe/).","metadata":{"id":107}}],["108",{"pageContent":"{\n  \"title\": \"What is Perfectionism and How to Cure It\",\n  \"date\": \"03/13/2016\"\n}\n---\n\n> My problem is that I'm a perfectionist\n> -- Everbody\n\nAs I finished writing the title for this post I thought about quitting. I didn't\nthink it was good and told myself that this is off to a bad start and it'll only\nget worse as I write more words. There is always an easy fallback to\nget out of doing hard work without feeling bad about it: \"I'm a perfectionist,\nand I can't possibly achieve perfection in this project so I'm going to quit altogether\".\n\nWhat was really going on here is that I realized that it's going to be harder\nthan what I imagined it would be, and I just didn't want to do the work. Just\nbeing lazy. Laziness is a simplification here and in this post I'll go over all the\nlayers that I've been able to debug in myself.\n\n### False dichotomies\n\nI often notice that before I throw my hands in the air and claim perfectionism I\npresent myself with a dichotomy: \"It's either that I finish this work and hit all\nmy goals or it's not valuable to anyone\". Here are some examples:\n\n* \"I don't think it's worth going to the gym today because I know I don't have\n  the time to go everyday and get six packs\"\n* \"I need to revamp my blog before I write my blog post and I don't have the\n  time to do all that now\"\n\nThe truth is that most things are still valuable even in there imperfect or\nunfinished form. For example, it's hard to argue with the effectiveness of the\npopular Minimum Viable Product approach to product development. You're able to\ndeliver value to people and at the same time test and iterate on your ideas.\n\nBack to our examples, going to the gym at any time no matter what the situation is will be\na categorically positive thing to do. And writing a blog post doesn't strictly\ndepend on your blog's design (I almost fell for this one the other day).\n\n### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision","metadata":{"id":108}}],["109",{"pageContent":"### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision\nfatigue](https://en.wikipedia.org/wiki/Decision_fatigue). You can get tired from\njust making decisions if you had to do so many of them while working on\nsomething.\n\nSay for example you want to tidy up your apartment. Since this is such a general goal, you'll be faced\nwith so many questions along the way: \"Should I fold my clothes like I always do\nor is it time reorganize my closet? Should I throw out the books I'm not using?\nShould I maybe give them away?\" and so on. Very soon you'll be tired just from\nanswering these questions without even doing much work. Then you'll see the\nnice and cozy excuse waiting for you: \"I'm such a perfectionist I can't even tidy up\nmy room!\".\n\n\n### Embarrassment\n\nPutting yourself and your work in the public requires a great deal of\ncourage. For probably some evolutionary survival reasons we tend to think about\nall the things that could go wrong. One of the strongest negative emotions that\nI get when I'm not certain about the quality of my work is the feeling of being\nembarrassed by it. That people much smarter than me will look at it and\nlaugh about how bad it is. That's almost never the case. I've written some\nreally silly posts and code and it rarely gets ridiculed. Even when it does happen,\nit's usually by people that I don't necessarily respect or look up to (see my\npost about on the [Stoic of Open\nSource](http://amasad.me/2016/01/13/the-stoic-of-open-source/) for an example of\nthis). That is not to\nsay that everything I do is perfect, in fact, I get really awesome constructive\nfeedback every time I release something.\n\nAnother tactic for avoiding embarrassment is not to\nover-promise. I'd go as far as to say you should not talk about your\nideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which","metadata":{"id":109}}],["110",{"pageContent":"ideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which\nreminds me of what [Tom](https://twitter.com/tomocchino) my manager (who manages\nprojects like React and Flow at Facebook) likes to say: \"under-promise, over-deliver\".\n\n### Confidence\n\nIf you aspire to do quality work you need to be able to trust in your abilities.\nOr at least that you would try really hard. Going back to the meta-example of writing this post. If I\nwere confident of my abilities to overcome any hardship that started with the\ntitle, I would keep going while knowing that I will rewrite this as many time as\nit takes to get it to good enough state.\n\nSo I would need to be confident of my ability to get close to the goal, and in\nmy ability to persevere and work hard enough to get there.\n\n### Curing perfectionism\n\nRecognizing these patterns in our behavior is a good first step in getting over\nthem. I had a lot of success with -- what I later discovered to be -- cognitive\nbehavioral therapy. [This is a good introduction](http://cbtsanfrancisco.com/cbt-is-for-hackers/) to the subject but we're\nmainly interested in the following methods:\n\n* Forced Activity\n* Exposure\n\nForced Activity is when you recognize a vicious cycle in your behavior and force\nyourself out of it. It's forced because you need to swim against the\ncurrent in order to break out. For example, if you noticed that you always start\nprojects but quit and claim perfectionism, then try to start the smallest project\npossible that is actually perfectible and finish it. If you have too many unread\nbooks and you stopped reading because you can't possibly finish all the books\nthen go throw them out (or delete everything on your kindle). Even if the action is a\nbit radical, do it to get you out of the cycle.\n\nExposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of","metadata":{"id":110}}],["111",{"pageContent":"Exposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of\npublishing code then start by publishing a gist of a program that does something useful\nand share it. Then slowly work your way up to sharing a library and finally to\ncontributing to large open source projects.\n\nUp until last year, I had a crippling  fear of public speaking and this method worked really well for\nme. Although I've spoken a few times before, every time I spoke the fear was\nworse than the one before. However, after committing\nto the Exposure method I started small by\n[speaking](https://twitter.com/brooklyn_js/status/436669188103344128) at a\nfriendly and welcoming meetup in NYC called BrooklynJS. And then worked my way\ntowards a larger conference and spoke at\n[EmpireJS](https://www.youtube.com/watch?v=rcjUR4icvoQ). I then started really\nleaning into it and even performed at a [story telling\nshow](https://www.facebook.com/events/311252482399585). And finally completely\nimprovised a couple of meetup talks. I'm now almost fearless when it comes to public\nspeaking.\n\nIn conclusion I think that perfectionism is mostly a thin veil hiding a\nmultitude of insecurities, fears, and logical fallacies. And it's something we\nneed to face in order to reach self-actualization.\n\n----------------------------------------------\n\n*Thanks to [Haya Odeh](https://twitter.com/hayaodeh) for reviewing this post and\n providing feedback, examples, and refining many of the ideas mentioned here.*","metadata":{"id":111}}],["112",{"pageContent":"{\n  \"title\": \"Python book\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nIn this chapter we'll look at the basics of the Python programming language, and we'll build up to your first program! \n\n## What is Python?\n\nPython is a general-purpose programming language that can be used for many different types of programming projects. It was designed by Guido van Rossum and first released in 1991. It has a simple syntax, making it easy to learn, and is powerful enough to write large applications. It has been used for many things including web development, graphical user interfaces, game development, and scientific applications.\n\nOne of the key features of Python is that it is interpreted. This means that rather than having to compile the program into a machine-readable format, you can simply run the program directly from the source code. This is one of the reasons why Python is so popular for beginners - it's easy to run and experiment with code!\n\nAnother key feature of Python is that it is a high-level language. This means that the programs you write are much more abstract than programs in languages like C. This makes them easier to read and understand, and it makes the programs easier to modify. It also means that you don't have to worry about some of the lower-level details of how the computer actually works.\n\nOne of the best things about Python is that it has a huge library of pre-written code that you can use in your own programs. This makes Python an ideal choice for beginners, since you don't have to worry about the details of how to do things - you just use the functions that someone else has already written.\n\nPython is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions","metadata":{"id":112}}],["113",{"pageContent":"Python is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions\n\nAn expression is a piece of code that returns a value. For example, 2 + 2 returns the value 4, and \"Hello\" + \"World\" returns the value \"HelloWorld\". In Python, expressions are made up of values and operators. Values can be numbers, strings, variables, or even objects, while operators are symbols that perform some kind of action on the values. For example, the plus sign (+) is an operator that adds two values together. The following are some examples of expressions:\n\n```\n\"Hello\" + \"World\"\n\n\"I am \" + \"learning Python\"\n\n2 + 2\n\n\"Hello\" * 3\n\n\"Hello\" / 2\n\n5 * 2\n\n\"Hello\" + \"World\" * 3\n```\n\nIn Python, expressions are evaluated from left to right, so in the above examples, the first value is added to the second, the first number is multiplied by the second number, and so on.\n\n## The print function\n\nThe print function is used to output values to the screen. In Python, print takes one argument, which can be any value, including strings, numbers, and even other objects. For example, the following are all valid print statements:\n\n```\nprint(\"Hello\")\n\nprint(1)\n\nprint(2 + 2)\n\nprint(1 / 2)\n\nprint(1 + 1)\n\nprint(\"Hello\", \"World\")\n\nprint(1 + 2, \"Hello\", \"World\")\n\nprint(2 + 2, \"Hello\", \"World\")\n```\n\nIn Python, the output from print is always shown after a newline character. This is why the print statement in the above examples always ends with a newline. If you want to display multiple lines of text, you can use the triple-quoted string format:\n\n```\nprint(\"\"\"This is\na multi-line string. \"\"\")\n```\n\n## Basic data types\n\nIn Python, integers are used to represent whole numbers. In other languages, the integers might be called \"int\" or \"long\" instead. For example, the following are all valid integer values:\n\n```\n123\n\n1234\n\n1234567890\n\n-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```","metadata":{"id":113}}],["114",{"pageContent":"-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```\n\"Hello\"\n\n\"Hello, World\"\n\n\"This is a string\"\n\n\"This is a string\" + \" with multiple words\"\n```\n\nStrings can be enclosed in single quotes (') or double quotes (\"). In Python, strings are always treated as Unicode, which means that you can use any characters that are part of the Unicode character set.\n\nThe following are all valid strings:\n\n```\n'Hello'\n\n'Hello, World'\n\n'This is a string'\n\n'This is a string' + ' with multiple words'\n\n'This is a string' + ' with multiple words' + ' and multiple lines'\n\n'This is a string' + ' with multiple words' + ' and multiple lines' + ' and a newline'\n```\n\n## Variables\n\nA variable is a name that refers to a value. Variables can be used to store values that you need to use later. For example, you might have a variable named \"number\" that stores the value 2. Later, you can use the variable number to represent the value 2.\n\nThe following are all valid variable names:\n\n```\nnumber\n\na\n\na1\n\na2\n\nabc\n```\n\nSome variables are predefined in Python, such as True and False.\n\nVariables can be assigned values using the assignment operator, which is an equals sign (=). For example, the following assigns the value 2 to the variable number:\n\n\n```\nnumber = 2\n```\n\nNow `number` holds the integer `2`. We can now use the variable in the next expression:\n\n```\nprint(number * 5)\n```\n\nWhich will print `10`.\n\n\n## Your first program\n\nBefore we write our first program let's learn one more function: input().\n\nThe input() function is used to ask the user to input a value. For example, the following code will ask the user to enter a number:\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nWhen the user enters a number and hits enter, the number is stored in the variable number.\n\nNow let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:","metadata":{"id":114}}],["115",{"pageContent":"Now let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:\n\nprint(\"Hello\")\n\nprint(\"World\")\n```\n\nThis code prints the words \"Hello\" and \"World\" to the screen.\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nThis code asks the user to enter a number and stores it in the variable number.\n\n```\nprint(\"You entered: \", number)\n```\n\nThis code prints the word \"You entered:\" and then the number that was entered.\n\n# Chapter 2: Control Flow\n\nIn the last chapter we learned how to write and execute Python programs as a series of instructions. However, what makes programming powerful is its ability to control the flow of execution. That is, we can specify conditions under which a certain instruction is executed.\n\n## Boolean Values\n\nPython has a data type boolean, which can have the values True or False .\n\n```\n>>> True\nTrue\n>>> False\nFalse\n>>> True == False\nFalse\n```\n\nThe == operator tests for equality. The != operator tests for inequality.\n\nNote that True and False are not strings.\n\n## Comparison Operators\n\nThe comparison operators test whether two values are equal or not. The comparison operators are == , != , < , > , <= , >= .\n\n```\n>>> 2 < 3\nTrue\n>>> 2 == 3\nFalse\n>>> 2 != 3\nFalse\n>>> 2 > 3\nFalse\n>>> 2 >= 3\nFalse \n>>> 2 <= 3\nFalse\n```\n\n## Boolean Operators\n\nThe and operator evaluates to True if both operands are True . The or operator evaluates to True if either operand is True . The not operator negates a Boolean value.\n\n```\n>>> True and True\nTrue\n>>> True and False\nFalse\n>>> False or True\nTrue\n>>> not True\nFalse\n```\n\n## If Statements\n\nLines of code can be grouped into a block. A block begins with a line that starts with a colon ( : ) and end when the indentation decreases. The lines within the block must be indented.\n\n```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .","metadata":{"id":115}}],["116",{"pageContent":"```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .\n\nThe if statement is an expression. If x > y is True , then the expression x is True .\n\nThe and and or operators can be used in an if statement.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nThe if statement is a compound statement. The compound statement consists of the if statement and the two lines of code. The and operator is used to join two statements.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nIf x is greater than y and greater than z , then the statements print(x) and print(z) are executed.\n\n## Else\n\nThe else keyword can be used in an if statement to specify what should happen if the condition is not true.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelse:\n  print(x + y)\n```\n\nIn this example, the value of x is printed if x is greater than y . Otherwise, the value of x + y is printed.\n\nPython provides a short-circuit evaluation. If x > y is true, then x + y will never be evaluated because it is not necessary.\n\n## Nested if Statements\n\nA nested if statement contains one if statement inside another if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\n  if x > z:\n    print(x)\n    print(z)\n```\n\nThis nested if statement will print the value of x if x is greater than y . If x is greater than z , then the value of x is printed.\n\n## else and elif\n\nelse and elif are used to extend the if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nThe elif keyword can be used in place of the else keyword.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nIf x is greater than y , then the statements print(x) and print(y) are executed. If x is greater than z , then the statements print(x) and print(z) are executed.\n\n## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.","metadata":{"id":116}}],["117",{"pageContent":"## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.\n\n## While Loops\n\nA while loop executes a block of code while a condition is True .\n\n```\ni = 0\nwhile i < 10:\n  print(i)\n  i = i + 1\n```\n\nIn this example, the value of i is printed. The while loop continues until the value of i is greater than 10.\n\nThe while loop is an expression. If i < 10 is True , then the expression i is True .\n\n## For Loops\n\nA for loop executes a block of code a specified number of times.\n\n```\nfor i in range(10):\n  print(i)\n```\n\nIn this example, the value of i is printed 10 times.\n\nThe for loop is a compound statement. The compound statement consists of the for loop and the two lines of code.\n\n## Break and Continue\n\nThe break and continue keywords can be used in a loop.\n\n```\nwhile True:\n  i = input('Enter a number: ')\n  if i > 0:\n    print('The number is positive.')\n    continue \n  if i < 0:\n    print('The number is negative.')\n    break\n\nThe break keyword is used to terminate a loop.\n\nThe continue keyword is used to skip the rest of the code block and continue to the next iteration of the loop.\n\n## The range() function\n\nThe range() function can be used to generate a list of numbers.\n\n```\nfor i in range(5):\n  print(i)\n```\n\nThe range() function takes one parameter, which is the number of numbers in the list. The range() function returns a list.","metadata":{"id":117}}],["118",{"pageContent":"{\n  \"title\": \"Repl.it is not an IDE\",\n  \"date\": \"09/15/2020\"\n}\n---\n\nWhen a new thing is invented, we're often stuck with the old words to define it. The first car was a \"horseless carriage,\" and the first computer was a \"giant brain.\" In the same inaccurate way, Repl.it is an \"online IDE.\"<small>[1]</small>\n\nRepl.it gets its name from \"REPL\", the Read Eval Print Loop, a basic language tool found in most modern programming languages and environments. It's a tool that allows you to interact with a program by reading, evaluating, and printing data.\n\nIf you think about development environments as a continuum from REPL to IDE, you can see how Repl.it is located closer to the REPL end. It's a tool for exploratory programming. It's for playing with ideas.   \n\nRepl.it is a reaction to the modern software development grind, where many developers spend their time waiting for builds, running tests, fighting with linters, and configuring frameworks. It's an attempt to get back to the basics of programming -- to make coding fun again.  \n\nTo use Repl.it you don't have to ditch your IDE. You can use it to investigate a library's design, try out a new language feature, experiment with a new framework, or even use it to build and host a side-project.\n\nRepl.it collapses the entire development lifecycle into a simple interface. No need for pull requests, continuous integration, or deployment. You simply code and its live! With [Multiplayer](https://repl.it/site/multiplayer), you can even do all this with other people in real-time. \n\nIf your IDE is a car, Repl.it is a motorcycle. If your IDE is a desktop computer, Repl.it is an iPad. If your IDE is a skyscraper, Repl.it is a cozy vacation house. \n\nRepl.it is a tool for exploratory programming. It's for playing with ideas. \n\nRepl.it is a tool for sharing code. It's for building community.\n\nRepl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase.","metadata":{"id":118}}],["119",{"pageContent":"Repl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase. \n\nRepl.it is a tool for building side-projects. It's for hosting fun apps.\n\nRepl.it is a tool for experimenting with new ideas. It's for being creative. \n\nNext time you have an idea, kickback on the couch and hit up [repl.new](https://repl.new). You can always go back to your IDE when you need it. \n\n---\n<small>\n[1]: It's unfortunately how we currently describe Repl.it on the marketing pages, which was necessary when Repl.it was unknown. However, this will change soon. \n</small>","metadata":{"id":119}}],["120",{"pageContent":"{\n  \"title\": \"Computers Doing The Right Thing\",\n  \"date\": \"12/24/2021\"\n}\n---\nI'm fascinated by the idea of computers doing The Right thing without explicit user input. Today this is most apparent in autocorrect, but the idea -- in a more advanced form -- goes back to the early days of computing. \n\nI think if software designers embraced some of the ideas I'm going to talk about here, computers will be much more delightful to use. We won't need endless pages of menus and buttons. And humans can be free to think about their task as opposed to the software that's doing the task. \n\n## DWIM\n\nInterlisp is one of the most fascinating could-have-been computer systems in history. It shipped with one of the first from-the-ground-up interactive programming environments, structured editor, and many other innovations. Most impressive was the concept of Do What I Mean (DWIM).\n\n![interlisp manual](/public/images/dwim.png)\n\nThe most basic DWIM feature is one of spell-correction, but it goes way further than that. It can fix some basic logic errors and even lets the programmer define their own DWIM logic. \n\n## From correction to intention\n\nDWIM and other contemporary examples (like Google's \"did you mean?\") are about correcting user errors. A more advanced and fascinating idea is for the computer to detect intention and act on it. Humans do it all the time; we see the intention in other people and act on it. Like for example making way for someone who's walking towards you. \n\nSoftware too can and should do basic intention-detection and I'm surprised I don't see it much in the wild. Let's look at examples of how we used it at work. \n\n## Intent-based development environment\n\nAt Replit, we're really passionate about making a simple yet powerful programming environment. The environment needs to be very intuitive for newbies and should be enjoyable for experts. \n\n![hello world](/public/images/helloworld.png)","metadata":{"id":120}}],["121",{"pageContent":"![hello world](/public/images/helloworld.png)\n\nThe environment always starts with 3-columns, something we've tested and made sure that newbies intuitively get: files, editor, console. That's great, but now **what if you want to do web development?**\n\nYou simply write the code, and the environment will open a new pane to show you the output. \n\n![web dev](/public/images/web.png)\n\nSo how does it work? We hook into the Linux Audit system and watch for any new open sockets. In other words, if you start a server we'll assume you want to see the output from it. And in the vast majority of cases, we're right.\n\nWeb development is not the only thing people want to do on Replit, many would also like to build games, plot, or boot up old operating systems for fun. In this case, if you wrote the code, or invoked the program that wants to do graphics, we will detect that and stream VNC down to your browser. So how do we do it? Initially, we relied on [LD_PRELOAD](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/) which allows you to override arbitrary function calls and inject your own logic. Pretty neat and works for other intent-based functionality. However, we decided to [move away](https://blog.replit.com/native-graphics-love) from that, here is the new approach:\n\n> In order to avoid using the LD_PRELOAD trick, we took a page out of systemd's socket activation feature, so that we detect the intent of a repl wanting to communicate with X by opening the socket to the X server, and launch the server + Window Manager at that point in time.\n\nFinally, much of software development today involves open-source packages. However, package manager can be a bit of pain to use, and honestly they can take out of the flow of coding. So while we do have native UI for package management, we also built a system to detect your intent to install an OSS package and simply do it for you. \n\n![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it","metadata":{"id":121}}],["122",{"pageContent":"![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it\n\nAs you can see intent-detection required system-level knowledge and hacking. At Replit, we're completely obsessed with creating delightful experiences so we go the extra mile to make it happen. But it's worth recognizing that it's not perfect. Sometimes we get it wrong, and the user can get into a pretty messed-up state. \n\nWhile complete detection of intent is an [AI-complete problem](https://en.wikipedia.org/wiki/AI-complete), there are a lot of heuristics that we can apply. Including using modern AI techniques. And software can and should get smarter as more people use it. \n\nI hope this inspires someone to make their software Do The Right Things.","metadata":{"id":122}}],["123",{"pageContent":"{\n  \"title\": \"The Stoic of Open Source\",\n  \"date\": \"01/13/2016\"\n}\n---\n\nTwo unrelated things happened recently:\n\n1. A few high profile open source maintainer burnouts<sup>1</sup>\n2. I've been reading a lot of philosophy<sup>2</sup>\n\nI was first introduced to Stoicism by a friend who recommended the book [A Guide\nto the Good\nLife](http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614). And\nthey kept coming up whenever I'm reading about philosophy, and for good reason,\nthey're a cool bunch.\n\nStoics understood that you can never depend on external factors for happiness\nand that the only way to achieve a sense of well-being is to be internally\nsatisfied. However, unlike the cynics or the skeptics, they *can* derive\nhappiness from the external world. In other words, **they get all the upside\nwhile avoiding downside**. This sounds amazing, and at first glance it sounds a\nbit like Buddhism, but I think the defining feature of Stoicism is their use of\npsychological tricks and reasoning to achieve their goal of tranquility. That's\nwhy I think it may resonate with the programmer community. Maybe we can learn\nsomething from them about open source maintenance?\n\n## insults and attacks\n\nOne thing that angers me -- and I see angers many open source\nmaintainers -- is the harsh criticism mixed with personal attacks that some\nusers launch against maintainers. There could be thousands of satisfied\nusers but a handful of loud and vile individuals could make your life\nmiserable. This can be related to how the Stoics dealt with insults. And they\nhad a lot to say about the subject.\n\nEpictetus recommended that we pause to consider our insulter. If he is a fool then\nrather than become angry or hurt, we should feel relief over his disapproval and\ninsults. Indeed, **we should be more concerned if we find the fool agreeing with\nus**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.","metadata":{"id":123}}],["124",{"pageContent":"us**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.\n\n>Begin each day by telling yourself: Today I shall be meeting with interference,\n>ingratitude, insolence, disloyalty, ill-will, and selfishness -- all of them\n>due to the offenders’ ignorance of what is good or evil?\n\n> -- Marcus Aurelius\n\nIf you are putting yourself and your work in the public eye then it's very\nlikely that you're going to have a run-in with the above-mentioned unpleasant\npeople. So accept it as a reality and learn to deal with it.\n\nSeneca suggests a potentially more useful way of dealing with insults:\n\n> Why is it an insult, to be told what is self-evident?\n\nIf you found that there is some truth in the attack. Then simply extract that\nknowledge as constructive feedback and use it to improve yourself and your project.\n\nThose are some tools we can use to reason out the sting of the insult, but\nwhat do we do about it? do we have to reply? The Stoics advocated two main ways of\nresponding to insults:\n\n1. Humor\n2. Refusing to respond\n\nBy simply laughing off an insult, we are implying that the insult and insulter\nare not to be taken seriously therefore stripping them of any legitimacy that would\notherwise be implied if we replied seriously to their insult. Here are a couple\nof amusing anecdotes from Seneca:\n\n>Seneca points approvingly to Cato’s use of humor to deflect a particularly\n>grievous insult. Cato was pleading a case when an adversary named Lentulus spit\n>in his face. Rather than getting angry or returning the insult, Cato calmly\n>wiped off the spit and said, “I will swear to anyone, Lentulus, that people are\n>wrong to say that you cannot use your mouth!” Seneca also approves of Socrates’\n>response to an even more abusive insult.  Someone once came up to Socrates and,\n>without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether","metadata":{"id":124}}],["125",{"pageContent":">without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether\n>or not to wear a helmet. <sup>4</sup>\n\nIf you are quick-witted then this type of humor may come naturally to you, but I'm\nnot. And, paradoxically, spending a lot of much time coming up with the perfect comeback\nwill have the negative effect of dwelling over the insult. Therefore the best\nthing to do is act as if it never happened. This, first of all, robs them\nof the pleasure of having upset us. And also shows everyone in the community\nthat we can't be bothered with childish behavior and we have more important\nthings to attend to (such as maintaining the project).\n\n## on making mistakes\n\nEveryone makes mistakes, and open source maintainers are no exception. You'll\neventually push a breaking change that will unleash a mob of semver purists\ngunning for your head (refer to the previous section on how to deal with\nobnoxious people). Here, I'll talk about how you should reason about the fact\nthat you made a mistake.\n\n>Truths about the past are necessary: it is not merely that they aren't other\n>than they are—they can't be other than they are, for nothing has the power to\n>change the past -- Epictetus\n\nStoics were pioneers of logic, and it followed from their use of logic that\nwe should have a fatalistic attitude towards the past. We just learn from our\nmistakes and move on -- there could have never been a world where you have not made\nthat mistake. Because without that event happening the world where you are now\nlooking back at that mistake doesn't exist. The last part was me going out on a\nlimb, but all this to say is that you can't change the past and there is no\npoint in feeling regret.\n\nMistakes may help you revise and strengthen your processes and tests. It may\neven get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever","metadata":{"id":125}}],["126",{"pageContent":"even get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever\ncaused the failure of an open source project, the important thing is to learn\nand move on.\n\n## work on your own terms\n\nTaking a utilitarian approach to open source seems to be the best and most\nsustainable. In the JS Infra team at\nFacebook we have the following dictum:\n\n> We only open source what we use in production\n\nWhen we stop using something internally we either find a new home for it or\nsimply deprecate it. This puts us in a better position to serve our community. Similarly, you\ncan approach your personal open source projects with the same attitude. Keep\nyour project focused and fully aligned with your needs.\n\nFor example, if someone sends you pull request for a feature that you are not\ngoing to use yourself and don't have the time test and maintain, then simply refuse it. It's\nbetter to be focused in scope than to make the project suitable for every\npossible use case while increasing your chances of burnout.\n\n> Nothing is worth doing pointlessly -- Marcus Aurelius\n\nPeople looking from the outside at open source are often amazed by how a\nworld based on altruism could exist. Sorry, it doesn't. A lot can be gained from\nparticipating in open source. Slaving away with no explicit goal is a recipe\nfor disaster. I'm not saying that helping others is not a valid a\ngoal -- it could be, however, it should be intentional.\n\n>It is impossible that happiness, and yearning for what is not present, should\n>ever be united -- Epictetus\n\nTry not tie your identity and sense of well-being to your open source\nproject. Align your needs with the community, get the upside of any contributions and\npopularity. But try not to get affected by any downside.\n\n---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open","metadata":{"id":126}}],["127",{"pageContent":"---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open\nsource projects. So I probably don't understand the magnitude of stress sole\nmaintainers may feel.\n\n[2] My favorite books so far: A History of Western Philosophy by Bertrand Russel,\nThe Guide to the Good Life by William Braxton, and the Philosophize This! podcast.\n\n[3] Great [blogpost](http://throughablogdarkly.blogspot.com/2012/12/stoicism-dealing-with-insults.html?m=1) summarizing how the Stoics dealt with insults\n\n[4] A passage from The Guide to The Good Life\n</small>","metadata":{"id":127}}],["128",{"pageContent":"{\n  \"title\": \"Do What Makes The Best Story\",\n  \"date\": \"1/8/2020\"\n}\n---\n\nKids are always telling themselves stories. Try to remember yourself as a child lying in bed, anticipating an exciting day tomorrow, and you'll probably remember telling yourself a story about how cool it's going to be, who's going to be there, and how much fun you'll have. Self storytelling might be more pronounced in kids -- they like to say it out loud -- but it never goes away and only subsides to the background in adults. Self storytelling is so essential for people that one of the most effective [techniques](https://en.wikipedia.org/wiki/Cognitive_behavioral_therapy) for treating depression and anxiety boils down to \"tell yourself better stories.\" \n\nLife is also a form of self storytelling. We're continually retelling ourselves our life story, but very few people think of themselves as authors of their story, not mere subjects. People with extraordinary high-agency realize this early in life and start maximizing the interestingness of their life story.\n\nHaving a fascinating life story is not just an exercise in vanity -- it has a real impact on your success in life. You'll have an easier time attracting friends as well as life and business partners. It'll also make it much easier to sell yourself or your products. It has a kind of compounding [halo effect](https://en.wikipedia.org/wiki/Halo_effect).\n\nStartups also have to be good stories. A good business idea or market is not enough to endure the pain and have the motivation to get a startup off the ground. Without an interesting story about the founding of the company and the vision, you'll have a hard time attracting talent and money. Notice how the most successful startups in the world all have remarkable genesis stories. \n\nSo next time you're faced with a tough decision, consider the path that makes a more interesting story. If it turned out to be the wrong decision to have made, you'd at least be fun at dinner parties.","metadata":{"id":128}}],["129",{"pageContent":"{\n  \"title\": \"stuff.js\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"12/11/2012\",\n  \"hidden\": \"true\"\n}\n---\n\nWith the explosion in online tools that allow to write, share, and run HTML, CSS, and JavaScript\nlike [JSFiddle](http://jsfiddle.net/), [CSSDeck](http://cssdeck.com/), [codepen](http://codepen.io/)\nand many others! I was surprised to see that there wasn't a good opensource library to facilitate\nsecurely running arbitrary code in the browser. So I pulled this out of our codecademy.com source code\ninto a well-tested library with a nice interface. I call it [stuff.js](https://github.com/Codecademy/stuff.js)\n(stuff as in stuffed turkey) and it's on [GitHub](https://github.com/Codecademy/stuff.js).\n\nHere is how you can create a live coding interface (similar to codepen) in less than thirty lines of code using stuff.js\nand codemirror:\n\n```javascript\nstuff(secureIframeUrl, function (context) {\n  var html = CodeMirror.fromTextArea($('#html'), {\n    onChange: reload\n  , mode: 'text/html'\n  });\n  var js = CodeMirror.fromTextArea($('#js'), {\n    onChange: reload\n  , mode: 'javascript'\n  });\n  var css = CodeMirror.fromTextArea($('#css'), {\n    onChange: reload\n  , mode: 'css'\n  });\n\n  var t = null;\n  function reload () {\n    clearTimeout(t);\n    t = setTimeout(function () {\n      var code = '<!DOCTYPE html><html><head>';\n      code += '<style>'  + css.getValue() + '</style>';\n      code += '<body>' + html.getValue();\n      code += '<script>' + js.getValue() + '</script>';\n      code += '</body></html>';\n      context.load(code);\n    }, 50);\n  }\n  reload();\n});\n```\n\nStuff.js puts security first. It is intended to be served from multiple origins for the code to be properly sandboxed\nand not have access to the top window.","metadata":{"id":129}}],["130",{"pageContent":"{\n  \"title\": \"Investing in Synthesis\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"4/21/2022\",\n  \"description\": \"I'm co-leading a round in Synthesis, a startup scaling the custom school built for Elon Musk's kids\",\n  \"image\": \"https://amasad.me/public/images/synthesis.png\"\n}\n---\n\nComputers give humanity the power to solve some of the most critical problems our species has ever faced. However, until today, we have failed to leverage this unprecedented tool; we teach kids to be mere consumers of this powerful machine. To change this, society needs three things:\n\n- Access to the tool\n- Education in the complex skills necessary to use it\n- Education in the problem-solving skills necessary to maximize the potential for human progress\n\nAt Replit, we’re making computer programming accessible and learnable for anyone, no matter their background, location, or socio-economic status. That covers points 1 and 2, but what about point 3? We need a way to offer any kid from anywhere the opportunity to learn collaboration, critical thinking, and problem-solving so they can capitalize on the promise of computers.\n\nFor this reason, I’m pleased to announce that I’m leading along with Balaji Srinivasan a new [$12M investment](https://www.synthesis.is/fundraise-amjad-balaji) in [Synthesis](https://synthesis.is), the innovative education program where kids learn to solve complex problems by playing team games.","metadata":{"id":130}}],["131",{"pageContent":"I first met Joshua Dahn, the co-founder of Synthesis, when I visited the Ad Astra school on the campus of SpaceX. I had heard they were using Replit to learn to code and build projects, so I visited expecting a regular school. But what I saw was radical. Elon Musk hired Josh to build a lab school for his kids and SpaceX engineers–and what Josh created blew me away. Now, Synthesis is taking the most popular class from that school and scaling it up for kids from across the globe. They designed Synthesis to train supercollaborators, who can work together to solve complex problems to advance human civilization.\n\nLast month, I was hanging out with Chrisman Frank, the CEO of Synthesis. He shared their progress with me, and I couldn’t believe what they had accomplished. They’re teaching thousands of kids the skills needed to move civilization forward. I spoke with Balaji, and we both agreed that we needed to do whatever we could to help Synthesis succeed.\n\nBalaji notes six features that make Synthesis a particular company in his [announcement](https://balajis.com/synthesis). They bear repeating here:\n\n> 1. First digital, then physical. A full replacement for the education system will eventually require physical locations. Too many parents depend on state-run schools for childcare. However, it’s important to go digital first, then physical. Synthesis is building a networked community online and then, later, creating physical infrastructure as needed be.\n> 2. Scale what can be scaled. Today’s K-12 instruction can be decoupled into (a) curricula, (b) small group tutoring and (c) de facto childcare. While the tutoring and childcare components will continue requiring hands-on attention for each student, the curricula can be created by world class instructors and cost-effectively scaled to millions of children. That means one could have the polish of a Hollywood movie or an AAA-quality game for educational content, which is what Synthesis is working on.","metadata":{"id":131}}],["132",{"pageContent":"> 3. Go direct. Legacy media is incentivized to protect legacy systems. Therefore, companies offering an exit must go direct to customers and build their own distribution. Otherwise, they’ll either get politically attacked or forced to fold back into the values of the incumbent system. And so Synthesis is reaching parents entirely through social media and eschewing legacy media corporations.\n> 4. Make exit easy. Our education systems won’t reform from within. The necessary improvements require too much change. The only real solution is to create something better from the ground up that’s so attractive users can’t help but exit the old system. Something like that doesn't arise overnight - it's proved out in stages, by people gradually opting out of the current system, providing feedback and driving features, till the parallel system is better in all respects and ready for broad adoption. This, too, is part of the Synthesis strategy.\n> 5. Win and help win. Finally, the aim of education should be to train kids to grow the global pie for humanity so all can benefit. In other words, kids need to learn how to work together and succeed in a competitive environment so that they can contribute to the common good. And Synthesis believes that teaching values like this is as important as teaching calculus.\n\nI believe that Replit + Synthesis could become the educational stack for millions of kids worldwide. In the past, kids had to go through K-12 then university education before contributing to the real world, but things are changing fast for a few reasons:\n\nFirst, the traditional track isn’t available to many people simply because of where they were born. Second, the few who graduate often end up with loads of debt and little to no hirable skills. Third, and most importantly, it seals them off in school for 14+ years and then expects them to offer something productive to society.","metadata":{"id":132}}],["133",{"pageContent":"Together, Synthesis and Replit are fixing this problem. Synthesis lets any kid anywhere collaborate with peers to practice solving humanity’s toughest challenges, like managing wildfires and colonizing space. Replit empowers these kids to learn code, turn their ideas into real solutions, and build businesses around them online.\n\nNo barriers to entry. No unnecessary debt. No more waiting.\n\nIn essence, Synthesis is the complement of Replit. To build the future, the next generation needs two critically essential skills. They need to know how to think with computers and collaborate with humans. Replit lets anyone learn the first. Synthesis allows anyone to learn the second. I can’t think of two higher leverage ways to move society forward.\n\n\nIf you have kids ages 8-14, you can sign them up for Synthesis [here](https://www.synthesis.is/).\n\nIf you’d like to join their team, view their [open positions here](https://www.synthesis.is/careers).","metadata":{"id":133}}],["134",{"pageContent":"{\n  \"title\": \"Vision\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"11/27/2021\",\n  \"hidden\": \"true\"\n}\n---\n\n## Vision\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating. \n\nWhen there is widespread code literacy, we believe that it will transform humanity again and perhaps in more radical ways. It's hard to imagine what the world will look like when there is a generation of people who grew up with computer superpowers. But we can be sure about a few things:\n\n- Technological power will be decentralized: When everyone can code, there will be less reliance on power centers to manage all information technology. Power centers like Silicon Valley will decentralize into internet communities. \n\n- Wealth will be more distributed: When people have the tools to create and participate in the global digital economy, they will have the ability to lift themselves out of poverty. The wealthy and the poor will not differ by pidegree, instead anyone who can generate good ideas can be wealthy.\n\n- Software will be more local: No one knows better what a community needs other than the community itself. Instead of a handful of giant companies creating the software for everyone in the world, we'll see more personal and community-grown software.","metadata":{"id":134}}],["135",{"pageContent":"- Education will be transformed: When people can be economically productive much earlier in life, education systems will change to become more tailored to individuals and more pragmatic. Since the best way to learn is to create, people will become more efficient learners by building computer simulations.\n\n- Institutions will be more democratic: Totalitarian regimes have relied on technological supremacy since the beginning of time to subject people. But when people have agency over technology, the power balance will improve.\n\nWe happen to be at absolutely the right time to be attempting to create systems to increase computing literacy and give people superpowers:\n\n- Cloud computing allows us to deliver collaborative and powerful tools wirelessly and at very little cost to the user.\n\n- With advent of satellite internet we're quickly approaching universal connectivity.\n\n- Low-end devices are getting more affordable by the year, nearly free, and very close to universal computer access.\n\n- Bitcoin and web3 allows users to easily generate and capture wealth on the internet.\n\n- Schools and governments are starting to understand the need for coding literacy.\n\n- The funding landscape allows ambitious projects like Replit to exist\n\n## Mission\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\n## Plan\n\nIn the first phase of the company we poured everything into building the default entry-to-programming environment. One which put us on an exponential growth path towards millions of programmers. Now we have the opportunity to build the next major software platform.","metadata":{"id":135}}],["136",{"pageContent":"We're entering the next major phase of our company, where we're inventing the building blocks for the software creator economy. The primitives that will power the next paradigm shift of software collaboration. We think we're transitioning from a stacked model of software creation to a networked one. One which value is builtin, and the ability to monetize will be inseparable from creation.\n\nIf we're succesful in empowering the next generation of softawre creators we'll have the ability to weave interconnected communities and software into the world's  first massively distributed and collaborative operating system. One that’s focused on creation and self-expression, that’s networked by default, and that let’s people create and earn on the internet.\n\n## Design principles\n\n\n- Learnable yet scalable interfaces: Interfaces today present the same UI to vastly different users, from children to adults, from novices to experts. Our mission demands that we make computing environments more accessible to novices while making it possible to transition to more powerful interfaces. Replit starts with a simple editor and console, which gets learners very far. The UI, however, is adaptable and presents different faces to different users and use-cases.\n\n- Infrastructure as legos: A core part of commanding computer power is to be able to build for the modern internet-connected world. Despite progress in cloud computing, infrastructure remains inaccessible to novices, hobbyists, and educators. We change this by designing simple and scalable components, like cloud-hosted servers accessible right from the repl, storage, databases, etc., that require little configuration and maintenance by the programmer. Coders can then mix and match components to create endless possibilities.","metadata":{"id":136}}],["137",{"pageContent":"- People-centric technology: It's more exciting and fun to create and learn with other people. The future demands that computers and the internet have human interconnectedness as a core primitive. From our multiplayer computing protocol to our community spaces for sharing software, we build support for human beings, and we put collaboration right at the heart of our technology.\n\n## Technology\n\nReplit is an emerging computing universe. To understand it, you have to understand its basic components:\n\n1. Replit is a website where anyone can get a computer with a development environment in the cloud instantly from any device, and get effectively infinite machines to learn, build, and play with them. It's a site where creators from all over the globe can meet and collaborate. It's a place to discover and remix software (\"view source\" for all software). It's a place to go from your first line of code to your first app to your first startup. It's the ultimate website that blurs the distinction between building to learn and learning to build and eventually building to earn. It's the place where ideas become wealth.\n\n2. It's a protocol for remote computing between a human to machine and machine to machine. This protocol powers the website, but also power bots, third-party apps, and many other use-cases yet to be discovered. It's making Replit into an open platform where developers can build plugins, extensions, and entirely new experiences and businesses on the platform. It's collaborative from the ground up, it's extensible, and it's interactive and alive. It will be the basis for a massively multiplayer cloud operating system of the future.","metadata":{"id":137}}],["138",{"pageContent":"3. It's a massively distributed computing network. If GitHub is a network of dead code, Replit is a network of live code. Any program on any machine on the network can call functions on any other program. It's Alan Kay's original vision for object-oriented programming -- a biological-like system of live machines communicating via message-passing.  It's empowering for developers to build and scale apps. It unlocks a radically new way of collaborating on software. And it's a platform for infrastructure providers to publish and monetize services for developers on the network.\n\n## Metrial from the blog\n\n- [Post from 2017 laying out the technical foundations](https://blog.replit.com/holistic)\n- [More on technical motivations and inspiration](https://amasad.me/disintegrated)\n- [What Replit is not](https://amasad.me/replit_ide)\n- [How Replit wins](https://amasad.me/leapfrog)\n- [Series A announcement](https://blog.replit.com/seriesa)\n- [On how and why Replit is fun](https://blog.replit.com/internet-of-fun)\n\n## Material from the web\n\n- [Podcast interview with Amjad on the past and future of Replit](https://www.youtube.com/watch?v=DZcglTSv-2Y)\n- [Another one](https://www.youtube.com/watch?v=isIpbcH_N80)\n\n## A handful of user stories:\n- [User story showing our reach & impact](https://twitter.com/HayaOdeh/status/1462900554930147328)\n- [How we give creators superpowers](https://twitter.com/amasad/status/1348804890877857792)\n- [Retaining users through the childhood years](https://twitter.com/amasad/status/1390810578214539266)\n- [Users hacking Replit itself](https://twitter.com/amasad/status/1083517163153944576)\n- [Users learning and earning](https://twitter.com/amasad/status/1451255029059358747)\n- [How the replit community coordinates](https://twitter.com/amasad/status/1354534990109761542)\n- [How Replit community builds meaningful relationships](https://twitter.com/amasad/status/1377287503351181313)","metadata":{"id":138}}],["139",{"pageContent":"{\n  \"title\": \"Introducing Waraby, Mobile Optimized Arabic Search Web App\",\n  \"date\": \"01/18/2014\",\n  \"image\": \"http://i.cloudup.com/wrHDYFfRJw.png\",\n  \"hidden\": true\n}\n---\n\n[Waraby](http://waraby.net/) is an Arabic search mobile app that I'm releasing today.\nI've built it more than six months ago for my personal use and I've been very pleased with it.\nI called it “Waraby” which comes from blending “Web” and “Araby”.\n\n### Why\n\nTyping in Arabic -- or really, any non-latin language -- is challenging because it wasn’t part of the early PC design. In addition to that, many PCs come with no Arabic pre-installed and no character annotations on the keyboard. This lead to a generation of computer and internet users using English characters to express Arabic words and meanings. This is often referred to as transliteration or more commonly “Arabezy” or “Arabish” (comes from the blending of Arabic and English words).\n\nOne of the fundamental activities we do online is Search, and for Arabic speakers used to transliteration [Yamli](http://yamli.com) is a lifesaver. It works by converting your transliterated English words into Arabic so you can use the language you’re used to in day-to-day chat and messaging to search for Arabic content on the Web. However, Yamli isn’t mobile optimized and frankly, it’s a pain to use on the phone.\n\nHere is how Waraby makes Arabic mobile search delightful:\n\n#### Simple\n\nIt’s a full screen App with a wide textarea that auto scrolls down when focused to give enough room for suggestions.\n\n<img src=\"https://i.cloudup.com/ea1o38uH4z.gif\" alt=\"waraby layout\" height=\"400\" />\n\n#### Responsive\n\nSuggestions are neatly aligned under the word being typed with the highest confidence result at the top. Furthermore, hitting search will open the Arabic-based Google search for the best results.\n\n<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail","metadata":{"id":139}}],["140",{"pageContent":"<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail\n\nIf you hit back while on the search result you can go back to Waraby with your latest search query waiting for you.\n\n<img src=\"https://i.cloudup.com/YFgiljjUiT.gif\" alt=\"waraby back button\" height=\"400\" />\n\nIt handles long queries gracefully.\n\n<img src=\"https://i.cloudup.com/vyALZc44bE.gif\" alt=\"waraby long queries\" height=\"400\" />\n\nFinally, If you decide to visit the app and start using it, don’t forget to add it to your [home screen](http://support.apple.com/kb/TI42).","metadata":{"id":140}}],["141",{"pageContent":"My name is Amjad Masad.\n\nI'm the CEO and founder of [Replit](https://replit.com), an online coding environment that makes coding more fun, approachable, and social. Starting a new project goes from countless hours of setting up a development environment to the two seconds it takes to start up a new repl in your browser.\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating.\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\nIf this mission speaks to you, you should consider [working with us](https://replit.com/careers).\n\nBefore founding Replit, I was a tech lead on the JavaScript infrastructure team (which I\nhelped start) at Facebook. We built and maintained open source tools that made\nJavaScript development easier, accessible, and generally better. We built and/or\nmaintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React","metadata":{"id":141}}],["142",{"pageContent":"maintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React\nNative](http://facebook.github.io/react-native/) packager. Some form of this\nteam is still going strong and now are doing even more amazing things like the\nYarn package manager.\n\nBefore that I was #1 employee at [Codecademy](https://codecademy.com). I did\nsome tech-leading, built product and infrastructure. Being that early at a\nhigh-growth consumer startup is a great, albeit compressed, learning\nexperience.\n\nBefore that I was briefly at Yahoo. And before that I was going to college and on the side I worked in cybersecurity.\n\nAs for non-work stuff, I'm into powerlifting and grilling steaks. I also like to read and mostly interested in philosophy of mind and AGI. Understanding and potentially simulating the mind is what kept me interesting in computers as a kid. I'm also interested in tradition and paleoanthropology. There is so much that's great about the modern world but there is also so much to be desired when it comes to living a fulfilling and healthy life. And I think the past holds more wisdom than people like to admit. \n\nI enjoy scifi movies, especially old ones. Some of my favorites include The\nForbidden Planet, Brazil, and Colossus: The Forbin Project. I'm of the opinion\nthat good Hollywood movies are [on the\ndecline](https://whyevolutionistrue.wordpress.com/2016/04/05/the-decline-of-good-hollywood-movies/).\n\n![pictuer](https://amasad.me/public/images/pic.jpeg)\n\nHere are some interviews/articles written about me:\n\n* [Invest Like the Best podcast](https://podcasts.apple.com/de/podcast/amjad-masad-the-future-of-software-creation/id1154105909?i=1000592027219)\n* [ARK Invest podcast](https://www.youtube.com/watch?v=bO0GunZCio8)\n* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)","metadata":{"id":142}}],["143",{"pageContent":"* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)\n* [Moment of Zen Podcast](https://www.youtube.com/watch?v=hrk4IVHyvZo)\n* [This Week in Startups podcast](https://www.youtube.com/watch?v=isIpbcH_N80)\n* [The Best Business Show podcast](https://www.youtube.com/watch?v=DzeGAGhsjb8)\n* [Replit: Remix the Internet](https://www.notboring.co/p/replit-remix-the-internet)\n\nOlder stuff:\n* [An interview with a Japenese\n  magazine](http://gihyo.jp/dev/serial/01/software_designers/0042)\n* [An essay by Fadi\n  Ghandour](https://www.linkedin.com/pulse/20130919080958-1326123--young-hungry-and-waiting-to-be-unleashed)","metadata":{"id":143}}],["144",{"pageContent":"Amjad Masad is a Jordanian American entrepreneur and engineer. He is the founder and CEO of Replit, the world's leading online programming environment and community. Before Replit, Amjad **used to** worked at Facebook, overseeing the JavaScript infrastructure team and building some of the world's most popular open-source developer tools. Before that, he was a founding engineer at Codecademy, the world's leading online coding school.","metadata":{"id":144}}],["145",{"pageContent":"# Replit's community guidelines and rules\n\nReplit's Community is a place where you can share all of the amazing projects you create on Replit! There's a lot to discover and do here, so we'll help you get started.\n\nSome quick links and overview of what follows: -\n\n- [Community Values](#communityvalues)\n- [Getting started](#gettingstarted)\n- [Community Standards](#communitystandards)\n- [Additional Information](#additionalinformation)\n\n\n# Community Values\n\n**Empower others.**\nReplit is for everyone, and everyone starts somewhere. Be patient and inclusive - things that are simple for you may be hard for others. We have absolute beginners and coding experts on our platform, and we want everyone to feel at home here.\n\n**Support one other.**\nAs part of the Replit Community, we hope you'll share your wins so other members can celebrate you and that you'll return the favor by supporting other users' work through likes, follows, and comments.\n\n**Be kind.**\nThere is no place for hate in our community. Respect each other, use appropriate language, and be kind. Be positive, and always be sure to reinforce that coding on Replit is a fun and friendly experience.\n\n# Getting Started\n\n**Everyone starts somewhere.** Share your first program - or \"repl\" - with the community by posting it with the tag `#MyFirstRepl` and introduce yourself by adding a post to your repl with a little bit of information about you. This way, people in the community can come to cheer you on in your coding journey. *Don't share any personal identifying information like your full name or contact info!* \n\n**Wondering how to share a repl to Community?** Simply open your repl, click on its name in the top right corner and click on the `Publish` button, or, you can go to the [community page](https://replit.com/community/all) and then click on the `Publish a Repl` button there. as shown in the images below.\n\n![Screenshot from 2022-03-26 19-28-59](publish_workspace.png)\n\nOR\n\n![Screenshot from 2022-04-14 00-01-11](publish_community.png)","metadata":{"id":145}}],["146",{"pageContent":"![Screenshot from 2022-03-26 19-28-59](publish_workspace.png)\n\nOR\n\n![Screenshot from 2022-04-14 00-01-11](publish_community.png)\n\nIn either case, you'll then see something like this (might differ slightly):\n\n![Screenshot from 2022-03-26 19-30-21](publish_modal.png)\n\nHere, you can add tags that tell people what you've created, such as `#python`, `#game`, or the name of a hackathon you're participating in, like [#Kajam2021](https://replit.com/community/kajam2021)!. You can also give it an icon to make it even more unique!\n\nTo add more information about your repl, you can Add a Post. This is kind of like a caption for your repl.\n\nNote that all your code is automatically updated in the community! So you don't have to post everytime you make a change.\n\n---\n\n## A quick overview of the community\n\nWhen you head over to the [Community page](https://replit.com/community), you'll see our Community homepage. *There's always new content on here to explore, but the layout will look the same.*\n\n![Screenshot from 2022-03-26 21-00-19](community_page.png)\n\n**First and most important is the `RESOURCES` section.** These are official posts created by the Replit team that contain helpful information about things like [upcoming events](https://events.thedrone7.repl.co), threads about new features, and the very repl you are reading right now!\n\n**Next up are `TOP TAGS`**. These are the most popular tags on Community. \n* At the top of the list are `official tags` which have a checkmark next to them. These are official tags by Replit that indicate what sort of content you should expect, such as `app` or `game`.\n* Below these are popular tags that community members are using on their own repls.\n\n**Now, let's take a look at some posts!** \nYou can sort posts as you please: the default `Hot` shows what's trending, `New` sorts the posts in order of the time they were published, and `Top` shows all-time most popular repls and posts.\n\nYou can also use the **search bar** to find specific repls and content. \n\n---\n\n## Community Standards","metadata":{"id":146}}],["147",{"pageContent":"You can also use the **search bar** to find specific repls and content. \n\n---\n\n## Community Standards\n\n**Replit is for everyone.** To ensure that everyone feels welcome and safe here, we require all users to agree to our Community Standards.\n\nIf you find any repls, posts or comments that violate the standards, you can report it by clicking on the three dots next to the repl's title or comment and selecting \"Report\".\n\n![report_repl](report_repl.png)\n\nTo report a user who has been harassing a lot of people, you can [use this website](https://contact.moderation.repl.co) and we will investigate all of their activity.\n\n### The Terms of Service\n\nAll users must follow Replit's [Terms of Service](https://replit.com/site/terms) anytime they use the site. \n\nSome highlights:\n\n* **No illegal or regulated content.** Please don't use Replit for promoting or engaging in any illegal activity, even unintentionally. This includes dealing in drugs, sex, gambling, weapons, or pirated software.\n\n* **Don't misuse the service.** Do not share content that can harm other users, such as spam, malware, or phishing. We also don't allow repls that consume too many resources, such as spam bots and cryptocurrency miners.\n\nUsers who violate these Terms of Service anywhere on the site are subject to be banned from any and all of Replit's services. Banned users may no longer access the online IDE and any code they may have written, the Community, and they will be barred participation in any future events organized by Replit.\n\n### Be Kind\n\nCoders of all levels are creating on Replit! \n\nComments are a great place to offer support, ask questions, share ideas, help a new user, geek out about a shared interest, or provide constructive feedback!\n\nComments are *not* the place to be mean or sarcastic about someone's programming skills or project. If you see anyone bullying or spamming others in the comments, you should report them.","metadata":{"id":147}}],["148",{"pageContent":"Comments are *not* the place to be mean or sarcastic about someone's programming skills or project. If you see anyone bullying or spamming others in the comments, you should report them.\n\nComments, posts, or repls that go against this standard will be removed from Community and the users will be issued a warning.\n\n### Keep it SFW\n\nContent that makes other community members feel uncomfortable or unwelcome such as swearing, nudity, violent, or graphic content is strictly disallowed.\n\nAny form of content that is found violating this rule will be removed from the community and the creator of such content will either be warned or banned from the community.\n\n### No Hate Speech\n\nThere is no place for hate in our community. Respect each other, use appropriate language, and be kind. We do not tolerate targeting any person or group of people for any reason whatsoever. Any abusive or threatening writing that expresses prejudice against a particular group, especially based on race, religion, or sexual orientation goes against our community standards.\n\nWe remove any comment, post, or repl containing hate speech from our Community and ban the offending users (after which they can appeal, more details about this at the end).\n\n### No advertising or spamming\n\nWe hope all of our users will become dazzlingly wealthy someday, but please don't advertise your wares by sharing links or spamming in comments or posts unless you have specific permission from the author of the post's author.\n\nWe remove comments and posts like this and issue a warning to the offending users. After a second warning, the users will be permanently banned from Community.\n\n### Age\n\nEveryone can and should code, but Replit is only available to users above the age of 13. This is due to [COPPA](https://www.ftc.gov/legal-library/browse/rules/childrens-online-privacy-protection-rule-coppa) regulations. \n\nAny users presumed to be under the age of 13 will be temporarily banned from Replit and can appeal by offering proof of their age.","metadata":{"id":148}}],["149",{"pageContent":"Any users presumed to be under the age of 13 will be temporarily banned from Replit and can appeal by offering proof of their age.\n\n### Some other things to remember\n\n- Give credit and don't plagiarize code. Be sure to give a friendly shout out to the creators whose ideas and code helped you build your project. They'll appreciate it and you'll appreciate it too when your turn for a shout-out rolls around!\n\n- Avoid spamming users by mentioning them in your posts or comments, especially if they have nothing to do with them. \n\n*Thank you for helping us make our Community a safe and creative place!*  \n\n---\n\n## Warnings and Bans\n\nThere are usually 3 kinds of actions that can be taken upon the users breaking the rules.\n\n### Warnings\n\nThe user will be warned for breaking minor rules. 5 warnings will lead to a temporary (community) ban.\n\n### Bans\n\nThere are 2 kinds of bans - community and site-wide.\n\nThe user will be banned from the community only for breaking the rules stated above. However, if they are found breaking the Replit [Terms of Service](https://replit.com/site/terms), then their ban will be site-wide.\n\nWhen the user is banned from the community, they will not be able to create any posts or comments and they will also be unable to share their repls with the community. However, they will still be allowed to use the online IDE and create new stuff.\n\nWhen someone is banned site-wide, their account will be terminated, and all of their repls will be taken down and deleted.\n\nCommunity ban is usually temporary, at the end of which, the user can appeal the ban (more details below). When the temporary ban ends, they will be issued a warning (acting as the first warning towards the second ban).\n\nA second community ban is always going to be permanent.\n\n---\n\n## Additional information","metadata":{"id":149}}],["150",{"pageContent":"A second community ban is always going to be permanent.\n\n---\n\n## Additional information\n\nIf anyone believes a moderator has taken any unfair action towards them, they can appeal the action at [the moderator contact website](https://contact.moderation.repl.co/). If they are still dissatisfied, they can E-Mail [community@replit.com](mailto:community@replit.com).\n\nIf you have found an exploit, please share the details with [security@replit.com](mailto:security@replit.com). Exploiting and causing problems for others can also lead to you getting site-wide banned.\n\nIf you have found a bug or have any feedback for us, we are always curious about how to improve replit, so reach out to us by clicking on the `?` icon in the bottom right of the sidebar and choosing `Contact support`.\n\n![Screenshot from 2022-03-26 20-57-09](help_menu.png)\n\nWe also have a [Discord Community](https://replit.com/discord) where you can chat with other AMAZING coders and ask for help with any coding-related questions you may be facing.","metadata":{"id":150}}],["151",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Bounty Hunting\n\nIf you're looking for a way to build projects and earn Cycles while you do it, you're going to love Bounties.\n\n## Become a Bounty Hunter\n\nIf you'd like to become a verified Bounty Hunter, [apply here](https://replit.typeform.com/to/ss7IxmIf).\nFill out the form and you'll be notified when you've received the Verified Bounty Hunter badge on your applications.\n\nOtherwise, get started by browsing the [Bounties page](https://replit.com/bounties) and apply to earn Cycles.\n\n## Browse Bounties\n\nEach posted Bounty will include the reward (in Cycles) for successful completion and a description of the work they'd like done.\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/bounties/pick_bounty.png\"\n  alt=\"pick a bounty\"\n/>\n\n## Apply to work on a Bounty\n\nOnce you find a Bounty you'd like to work on, click the \"Apply to Work\" button in the upper-right-hand corner.\n\nIn your application message, tell the Poster why you're ideally suited to completing the work. Feel free to include links to previous work or your portfolio.\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/bounties/apply_bounty.png\"\n  alt=\"pick a bounty\"\n/>\n\n## Do the work\n\nIf the Bounty Poster selects your application, you'll see the \"Accepted\" badge on your application:\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/bounties/accepted.png\"\n  alt=\"time to do the work!\"\n/>\n\nNow it's time to do the work!\n\nCommunicate with the Bounty Poster early and often - make sure you're both clear on requirements and expectations.\n\n## Deliver the work\n\nWhen you've completed your work, return to the Bounty page and click \"Submit Work.\"\n\nAdd a description of the work (pro-tip: relate it to the acceptance criteria outlined in the Bounty) and link to the Repl where you've written the code.\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/bounties/submit_solution.png\"\n  alt=\"submit a solution\"\n/>\n\nThe Poster will review your work and may ask for changes.","metadata":{"id":151}}],["152",{"pageContent":"<img\n  src=\"https://replit-docs-images.util.repl.co/images/bounties/submit_solution.png\"\n  alt=\"submit a solution\"\n/>\n\nThe Poster will review your work and may ask for changes.\nIf the changes are in the scope of the original Bounty, simply go back to the Repl, make the changes, and submit again.\n\nOnce the Poster accepts your work, you're awarded your Cycles.","metadata":{"id":152}}],["153",{"pageContent":"---\nsidebar_position: 5\ntitle: Bounty Templates\n---\n\n## Communication Expectations\n\nTo ensure a successful bounty posting and hunting experience, effective communication is crucial throughout the entire process. To assist with this, we have provided several templates that can be used to ensure a professional experience and alignment of expectations. It is important to note that these templates are meant to serve as a starting point, and should be tailored to suit your specific needs and preferences.\n\n## Bounty Hunter\n\n### Upon Acceptance\n\nOnce you have accepted a Bounty, you should reach out to the Poster within 24 hours via email or Discord.\n\n```\nHello there,\n\nI'm very excited to begin working on this Bounty. I am located in <geoarea>. I usually work between the hours of <xyzxyz> and the best way to reach me is by email. I just wanted to take a moment to check in and outline my approach.\n\n- <milestone 1> - <your expected date of delivery>\n- <milestone 2> - <your expected date of delivery>\n\nPlease let me know if you have any questions. I look forward to working with you.\n\nBest,\nYour Name\n```\n\n### Check-ins\n\nTo ensure a smooth and successful Bounty experience, it is important to maintain regular communication with the Bounty Poster. This includes providing updates on progress every few days, as well as addressing any roadblocks, pain points, or questions that may arise. Lack of visibility into the progress of the project is a common cause of dissatisfaction among Bounty Posters. Keeping them informed will help to mitigate this issue and maintain a positive working relationship.```\n\n#### What to say when giving a status update:\n\n```\nI wanted to check-in and give you an update on my progress. Everything is going well and I am still on target to meet <milestone 1> by <expected date of delivery>. Please reach out if you have any questions or further information to share about this Bounty.\n```\n\n#### What to say when you need to change the timeline:\n\n```","metadata":{"id":153}}],["154",{"pageContent":"```\n\n#### What to say when you need to change the timeline:\n\n```\nI wanted to give you an update on my timeline. <xyx> has taken longer than I expected due to <xyxyx> reasons. I have been able to determine next steps, but wanted to let you know my <milestone 1> date has changed to <new expected delivery day>. I have solved any current roadblocks and am on track to complete the Bounty.\n```\n\n### Upon Submission\n\nCongratulations on successfully completing the Bounty! It is now important to promptly follow up with the bounty poster to allow them to review the completed work. This will provide an opportunity for them to provide feedback or request any necessary changes. Following up quickly will help ensure a smooth process and timely completion of the project.```\n\n```\nHi there,\n\nI have submitted the completed Bounty at <link to the Bounty>. Please let me know if you requests for changes or have any questions on the submission. It has been a pleasure working with you.\n```\n\n### Changes are Requested\n\nIf the Bounty Poster requests any changes, it is important to respond within 24 hours to acknowledge receipt of their feedback. During this response, it is crucial to discuss a plan for the next steps and a timeline for implementing the suggested updates. It is important to approach any requested changes in a constructive manner. To assist with this process, we have provided two templates you can personalize:```\n\nExample:\n\n```\nThank you for <list the input or changes requested>. I value your feedback as it helps me become a better Bounty Hunter. I will have a revised version of this project ready for you to review by <date>.\n\nOne solution to the input you mentioned is <list the solution in a detailed, non-technical way>. Does this sound like an ideal solution for your Bounty? If so, I can have an updated version to you by <date>.\n```\n\nExample:\n\n```\nI know you are concerned about <list the concern in a polite way>. Including <list the suggestion in a detailed, non-technical way> may be an ideal solution.","metadata":{"id":154}}],["155",{"pageContent":"```\n\nExample:\n\n```\nI know you are concerned about <list the concern in a polite way>. Including <list the suggestion in a detailed, non-technical way> may be an ideal solution.\n\nI am open to revisions and willing to make changes to improve the quality of your work. If this solution works for you, I can get you an updated version by <date>.\n\n```\n\n## Poster\n\n### Upon Acceptance\n\nOnce you accept a Bounty Hunter for your Bounty, you should reach out to them within 24 hours via email or Discord. Feel free to use this template if you are not sure how to start.\n\n```\nHi <name>,\n\nI am excited to work with you on this Bounty. You seem like a great fit for this project. Here is a little bit about me <share information that is helpful for the Bounty Hunter to know about you>.\n\nI would like to chat with you soon to review requirements and set milestones.\n\nPlease let me know if you have any questions about the Bounty as you get started.\n```\n\n### Check-ins\n\nOpen and consistent communication with the Bounty Hunter is crucial, especially if the project is complex or has multiple milestones. This will help ensure that the project stays on track and is completed within the agreed-upon timeframe. Here are a few examples of what you can say to stay in touch with your Bounty Hunter:\n\n```\nHi,\n\nI wanted to check in and see how the Bounty was going. Do you have any questions about  the requirements? I am happy to chat <via email or Discord> if you need further guidance.\n```\n\n```\nHello,\nHow is the Bounty going? Do you think you are still on track to complete it by <date>? Do you have any part of it completed that you can send to me as a sample? Please let me know if you have any questions.\n```\n\n### Upon Submission","metadata":{"id":155}}],["156",{"pageContent":"```\n\n### Upon Submission\n\nOnce your Bounty Hunter submits the Bounty, we recommend you review the submission within 3 days. If you’re happy with the submission, feel free to press the `Accept` button to complete the Bounty and release the Cycles to the Bounty Hunter. Send them a thank you or acknowledgement that the work has been received and the Cycles released.\n\n```\nHi,\n\nJust received your submission. It looks great. Thank you for all your hard work on this. <Mention what you liked about working with this Bounty Hunter. Would you like to work together again?>\n```\n\n### Changes Requested\n\nYou can request changes on your Bounty's Discussion tab. It is important that the changes you request are within the scope of the original project. Give clear expectations of what needs to be changed and ensure the Bounty Hunter has the correct resources or access to test projects, if needed.\n\n```\nHello,\nThanks for your submission! Would you be up for changing the following:\n\n<Include specific details of what changes to make or information regarding testing/deployment of the project>.\n```","metadata":{"id":156}}],["157",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Frequently Asked Questions (FAQ)\n\n### What are Bounties?\n\nBounties are a simple way to trade Cycles for different types of tasks on Replit.\n\nIf you have a new product idea, need coding assistance for a personal project, or want to integrate an API, create a Bounty! You'll be able to examine submissions and pick a developer, known as a Bounty Hunter, to complete the project, which is referred to as the \"work.\" When you post a Bounty, Replit will deduct the required Cycles from your account and hold them until the project is finished.\n\n## Bounty Posting\n\n### How do I post a Bounty for others to complete?\n\nYou can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).\n\n### What types of projects are available for Bounties?\n\nAnything you can think of or need for your own project. Some of the more popular Bounties we’ve seen are: internal tools for your startup, features for existing Repls (like chat moderation or API integration), websites, and bots (Discord, Slack, Telegram).\n\n### What should I name my Bounty?\n\nKeep it simple and descriptive! The name should highlight what is distinctive about that particular Bounty. Try to think about what will catch a Bounty Hunter’s eye.\n\n### How many Cycles should I offer for a Bounty?\n\nWe offer suggestions within the Bounty creation form for certain categories but ultimately, you decide based on your budget and the caliber of developer you want to work with.\n\nIf you are looking to build a full web app or product MVP, we recommend the following pricing:\n\n- $2,500 (250,000 Cycles) - $3,500 (350,000 Cycles) if your app needs:\n  - 1 external connection / API\n    - e.g. fetching Twitter data is one API connection\n  - 1-2 pages\n  - completion in 4-6 weeks","metadata":{"id":157}}],["158",{"pageContent":"- $2,500 (250,000 Cycles) - $3,500 (350,000 Cycles) if your app needs:\n  - 1 external connection / API\n    - e.g. fetching Twitter data is one API connection\n  - 1-2 pages\n  - completion in 4-6 weeks\n- $4,500 (450,000 Cycles) - $6,500 (650,000 Cycles) if your app needs:\n  - 2-3 API connections\n  - 2-3 pages\n  - a developer with 2+ years of experience\n  - user account creation\n  - ideal for 2-3 month projects\n- $8,000+ (800,000+ Cycles) if your app needs:\n  - unlimited API connections\n  - 3+ pages\n  - the ability to handle your first 1000+ users\n  - ideal for 3+ month projects\n\nIf you can't put the full amount upfront for a large Bounty, indicate in your initial post the payment milestones that will be posted through other Bounties.\n\nFor assistance around creating your Bounty post or matching with the right developer, feel free to email bounties@replit.com for help.\n\n### Are there any fees for posting a Bounty?\n\nYes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also note, Replit will hold the entire amount of Cycles you’ve promised for the Bounty from your account when posting a Bounty.\n\n### Can I cancel a Bounty after it’s been accepted?\n\nNo, you can only cancel a Bounty _before_ accepting an application.\n\nTo cancel an accepted application for a Bounty, contact the Replit team through the \"Contact Support\" button in the \"Having trouble?\" section. If you want to make changes to the accepted Bounty, it's best to discuss the proposed revisions directly with the Bounty Hunter.\n\n## Bounty Hunting\n\n### What if I want to complete Bounties and earn Cycles?\n\nIf you want to become a verified Bounty Hunter, you can apply [here](https://replit.com/bounties/join). However, being a verified Bounty Hunter is not required to apply for Bounties. Replit’s Bounty program is looking for experienced coders who can tackle Bounties and provide great customer service for Bounty Posters.\n\n### What workspace should Bounty Hunters use to create the work?","metadata":{"id":158}}],["159",{"pageContent":"### What workspace should Bounty Hunters use to create the work?\n\nReplit provides access to private Repls for coding the work, which is Replit’s recommended workspace for completing a Bounty. The completed work must be submitted on Replit with a valid Repl link.\n\n### Are there any fees for completing a Bounty?\n\nNo. Upon successful completion of the Bounty, the Bounty Hunter’s account will be credited with the full Bounty amount listed.\n\n### Am I able to cash out my Cycles into real money?\n\nYes. Cycles earned from Bounties are eligible for cash out.\n\nThere is a 25% cash out fee and additional fees based on your country of residence and chosen payment method.\n\n### How do I request a Cycles cash out?\n\nOnce you have earned at least 35,000 Cycles ($350 USD) from Bounties, you can contact cashout@replit.com with the subject line \"Cycles Cash Out - username\", replacing \"username\" with your Replit username. In the body of your email, write the number of Cycles that you wish to cash out.\n\nIf this is your first cash out, we will send you an online form to verify your identity on [Persona](https://withpersona.com/). You will need a valid government ID and a device with a camera to complete this verification.\n\nAfter that, you will need to verify your payment information by completing the cash out form on Replit's site [here](https://replit.com/cash-out).\n\nOnce you have verified your identity and payment information on your Replit account, we will withdraw the requested amount of Cycles from your wallet and execute the payment. If you no longer have a payable balance of Cycles equivalent to the amount you requested, we will cancel the payment and ask you for a new desired amount to withdraw.\n\n### Are [secrets](/programming-ide/storing-sensitive-information-environment-variables) included in my work to the Bounty Poster?","metadata":{"id":159}}],["160",{"pageContent":"### Are [secrets](/programming-ide/storing-sensitive-information-environment-variables) included in my work to the Bounty Poster?\n\nNo, when the work is provided, contents in the `secrets` sidebar is not included. If the intent is to provide that information to the Poster, the parties should discuss how they would like to transfer that information.\n\n### What rights are transferred in the work upon completion?\n\nAll rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Bounty Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).\n\n## Support\n\n### How do I contact the Bounty Poster or the Bounty Hunter about the Bounty?\n\nIf you have questions for the Bounty Poster, you can include them in the application form, or reach out through any social media platforms linked in the user’s profile.\n\nThe Poster will indicate a preferred communication channel (such as email or Discord) in the Bounty post for discussions throughout the project.\n\nIf you are unable to contact the Poster or Bounty Hunter and need assistance with a Bounty, you can reach out to the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page.\n\n### What if I have a dispute with Poster or a problem with the work?\n\nWe encourage our Bounty Posters and Bounty Hunters to try and settle conflicts among themselves. If for any reason this fails, or if you encounter non-permitted usage, users can contact the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page.","metadata":{"id":160}}],["161",{"pageContent":"---\nsidebar_position: 1\n---\n\n# About Cycles\n\n## What are Cycles?\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/about-cycles/cycles-banner-blog.png\"\nalt=\"Cycles Banner\"\nstyle=\"width:70% !important;\"\n/>\n\nCycles are Replit's virtual tokens that can be used to purchase extra compute power and functionality for your Repls.\n\nCycles [can be purchased](https://replit.com/pricing) for $0.01 USD each, starting at a minimum of 150 Cycles. They can be combined with any user plan. You can either make a one-time Cycles purchase or use Auto-Refill to start a monthly recurring Cycles subscription. That means basic plan users can unlock Power Ups as needed (e.g. Private Repls) without committing to a plan. With Cycles, Hacker plan users can surpass the 5 Boosts and Always On that come with their plan.\n\nDefault view:\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/about-cycles/default-view.png\"\nalt=\"Buy Cycles Modal\"\nstyle=\"width:70% !important;\"\n/>\n\nChoose any number of Cycles by clicking on other:\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/about-cycles/choose-any-number.png\"\nalt=\"Buy Cycles Modal: Any number of cycles\"\nstyle=\"width:70% !important;\"\n/>\n\nCreate a monthly subscription by toggling Auto-Refill on:\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/about-cycles/create-monthly-sub.png\"\nalt=\"Buy Cycles Modal: Any number of cycles\"\nstyle=\"width:70% !important;\"\n/>\n\n## Managing Your Cycles\n\nOnce you purchase Cycles, you can view your balance and usage within your \"My Cycles\" page located in your menu.\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/about-cycles/managing-your-cycles.png\"\nalt=\"My Cycles Page\"\nstyle=\"width:70% !important;\"\n/>\n\nOnce your Cycles balance is insufficient, your Power Ups will automatically turn off and you will need to repurchase Cycles to continue accessing the same functionality.\n\nManage your subscription:\n\n- Click on the pencil, which will lead you to your Stripe page.","metadata":{"id":161}}],["162",{"pageContent":"Manage your subscription:\n\n- Click on the pencil, which will lead you to your Stripe page.\n- On the Stripe page you will be able to edit your current subscription or cancel it.\n\n## Important Notes\n\nWe also want to be clear, Cycles are NOT a cryptocurrency. They are a virtual token native to Replit's platform and do not have any value in real currency.\n\nPurchasing compute resources is just the first step for Cycles. We have a lot more in store for these tokens and what they will become. For now, we're excited to introduce this new Power Up method to our community!\n\nIf you have any more questions about Cycles or how to use them, check out our Cycles FAQ [here](/getting-started/faq#cycles).","metadata":{"id":162}}],["163",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Tipping\n\n## Overview\n\nTipping is now available as a way to support and reward creators who provide value to our community with Cycles they can spend on Replit.\n\nIf you want to tip a Repl, simply head to the project's cover page, tap one of the tip buttons, and wait for the success message to appear.\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/tipping/tipping-accept.gif\"\n  alt=\"tipping success\"\n/>\n\nTo buy Cycles for tips, head to your [Cycles page](https://replit.com/cycles) and buy a one-time or recurring package.\n\nHead to our [community page](https://replit.com/community/all) and find some cool projects to tip today!\n\n## What am I allowed to tip?\n\nYou can only tip your favorite creators by tipping one of their _creations_. This includes Repls and Templates.\n\nYou cannot go to someone's profile and tip them Cycles directly.\n\n## Do I have to use Cycles?\n\nYes, tipping on Replit is only available with Cycles.\n\n## How can I earn more tips?\n\nBy creating something awesome! The most tipped creators will be those that create fun and original projects for the Replit community. If people like what you've built, they will tip you!\n\nFor a guide on how to give your Repls the best chance of getting noticed in the community, check out [this guide]/hosting/sharing-your-repl#publish-your-repl).\n\n## Can I cancel a tip?\n\nIf you clicked a tip button you did not mean to press, you will have a few seconds to click **Cancel Tip** in the bottom righthand blue box that appears.\n\n<img\n  src=\"https://replit-docs-images.util.repl.co/images/tipping/tipping-canceled.gif\"\n  alt=\"tipping canceled\"\n/>\n\n## Can I get a refund on tips?\n\nNo. All tips are final. If you want, try contacting the creator you may have accidentally tipped and sort out a resolution with them directly.\n\n## Is there a fee on tipping?\n\nYes. A 10% fee on tips charged to the receiver of the tip.\n\n## Can I cash out my tips into real money?","metadata":{"id":163}}],["164",{"pageContent":"## Is there a fee on tipping?\n\nYes. A 10% fee on tips charged to the receiver of the tip.\n\n## Can I cash out my tips into real money?\n\nNo. Only Cycles earned from Bounties are eligible for cash out. To learn more about cash out on Bounties head [here]/bounties/faq#am-i-able-to-cash-out-my-cycles-into-real-money).","metadata":{"id":164}}],["165",{"pageContent":"---\nslug: /\n---\n\n# Introduction to Replit\n\nReplit is a platform for creating and sharing software. You can write your code and host it all in the same place. Replit is also a place to learn how to code, so we have some awesome built-in educational features as well.\n\nReplit can do it all. It can replace your:\n\n- code editor (e.g. VS Code, Sublime Text, IntelliJ IDEA)\n- development environment (e.g. your operating system, and build tools like npm or pip)\n- cloud provider (e.g. AWS, Netlify)\n- team collaboration tools (e.g. Google Docs, GitHub)\n- teaching tools (e.g. Canva, Moodle, Blackboard)\n- learning tools (e.g. Codecademy, Coursera, Udemy, Udacity)\n\nEvery Repl you create is a fully functional development and production environment. \"[Hosting from your editor](https://amasad.me/hosting)\" makes it easy to iterate quickly on your work, collaborate with others, and get feedback.\n\nWe know there's a lot to learn, so we've broken down some of the key features below for [developers](#replit-for-software-developers), [learners](#learning-code-replit-for-students), and [teachers](#replit-for-teachers). Choose your own path, or go through all of them to become an expert in all things Replit!\n\nIf videos are your thing, check out our getting started video [here](https://youtu.be/D4f7_lPwXtE).\n\n## Replit for Software Developers\n\nFor software developers, Replit can be your IDE in the cloud. Having your IDE live in the cloud has a lot of benefits.\n\n- There's no setup! You can access your environment from any device, including your phone or tablet, and everything will _just work_.\n- You can manage things like dependencies, build scripts, and environment variables in a single place and always be in sync.\n- It's easy to get help from others. Every Repl is multiplayer-ready by default, so you can work with other developers in a Google Docs-like environment in real-time from anywhere in the world.","metadata":{"id":165}}],["166",{"pageContent":"- It's easy to get help from others. Every Repl is multiplayer-ready by default, so you can work with other developers in a Google Docs-like environment in real-time from anywhere in the world.\n\nAnd under the hood, a Repl is a Docker container running in a VM, so you can run shell commands and do pretty much anything possible from a standard Linux box.\n\nCheck out the learning path below to get started:\n\n### [Introduction to the IDE](/tutorials/introduction-to-the-repl-it-ide)\n\nLearn how to use the Replit IDE through a practical guide\n\n### [Storing secrets](/programming-ide/storing-sensitive-information-environment-variables)\n\nYou can easily add environment variables to keep others from viewing sensitive data such as API credentials.\n\n### [Configuring your Repl](/programming-ide/configuring-repl)\n\nRepls are highly configurable and you can customize them to run almost any project in any language in any way you want.\n\n### [Integrating with GitHub](/tutorials/github-and-run-button)\n\nYou can link Replit to your GitHub to push changes up or bring in new changes that were made externally.\n\n### [File history](/programming-ide/workspace-features/file-history)\n\nWe have a built-in time-travel feature so you can view previous versions of your code.\n\n### [Pair programming](/tutorials/pair-programming-using-multiplayer-with-repl-it)\n\nYou can invite your friends or colleagues to help you with problems or hack on stuff together.\n\n### [Web hosting](/hosting/hosting-web-pages)\n\nSee how to host a front-end website for your homepage, landing page or portfolio.\n\n### [Deploying HTTP servers](/hosting/deploying-http-servers)\n\nDeploy a full-blown web application written in nearly any back-end language or framework.\n\n### [Always On Repls](/hosting/enabling-always-on)\n\nKeep your Repl alive 24/7.\n\n### [The Replit Database](/hosting/database-faq)\n\nStore data persistently between Replit runs in a simple key-value store that feels like using a local dictionary or hashset.\n\n## Replit for Learners","metadata":{"id":166}}],["167",{"pageContent":"### [The Replit Database](/hosting/database-faq)\n\nStore data persistently between Replit runs in a simple key-value store that feels like using a local dictionary or hashset.\n\n## Replit for Learners\n\nWhether you're teaching yourself or taking a course, if you're learning how to code, you'll find our learning resources helpful.\n\nYou can work through our [project-based tutorials](/tutorials/overview) to learn how to code on Replit. Most of our projects are in Python, the most popular programming language today, and JavaScript, the language of the internet.\n\nIf you're learning another language, we probably cover it in one of our teacher-contributed [curriculums](/teaching-curriculum/intro-teaching-curriculum).\n\nWe also have a beginner-friendly [forum](https://ask.replit.com/c/code-help/14) and [Discord server](https://replit.com/discord) where you can get (and give) help on nearly anything.\n\n## Replit for Teachers\n\nIf you're a teacher or professor who spends significant time teaching coding, whether that be in a classroom or a one-on-one environment, we have features to help you give feedback to students, set up and automatically grade homework assignments, and comply with your local privacy laws.\n\nThe following feature docs will help you get started making the most of Replit for teaching:\n\n### [Threads and Feedback](/teams-edu/reviewing-submissions#leaving-feedback-on-projects-using-annotations)\n\nLeave comments on your students' code, or let them peer review each other, using in-line discussion threads.\n\n### [Automatic Testing and Grading](/teams-edu/testing-assessments-autograding)\n\nImagine if you had a robot to grade your students' homework. You can set up simple or advanced automated tests for your students' assignments and homework.\n\n### [Comply with Local Privacy Regulations](/teams-edu/privacy-faq)\n\nWe will help you keep your students and their work safe online, while complying with various privacy laws and regulations such as FERPA, COPPA, GDPR, CCPA, and many others.","metadata":{"id":167}}],["168",{"pageContent":"# Using Replit for free\n\nReplit offers a number of helpful features which you don't need to pay for. A free account gives you access to:\n\n- A user-friendly, no-setup online [integrated development environment (IDE)](https://replit.com/site/ide) for beginners with autocomplete and free [automatic hosting](https://replit.com/site/hosting).\n- Remote teaching capabilities, allowing teachers to connect with their whole class and help students 1-1 with [multiplayer](https://replit.com/site/multiplayer).\n- Support for Python, Java, HTML/CSS/JavaScript, and 50+ other [languages](https://replit.com/languages).\n- Support for games, graphics, audio and an easy-to-use database.\n\nRead on to learn how to take advantage of our free features. Everything mentioned in this post can be done with a free account.\n\n## Repls\n\nRepls are the core of the Replit service, and they will always be available for all users. You can create as many repls as you like, and in any of the 50+ languages we support. Start by logging into your account, or [signing up for a free account](https://replit.com/signup).\n\nOnce logged in, you can create new repls and access your existing ones by navigating to the \"My Repls\" tab found in the left side-bar menu.\n\nCreate a new repl by clicking the blue \"+\" button in the top-right of your screen. You'll be prompted to choose a language and name your repl. Pick any language you like by typing a name in the search, or by browsing the available languages by category.\n\nSelect the owner of the repl, and then click \"Create repl\". You will notice that repls belonging to free accounts are public.\n\nLearn more about [managing your repls here](/getting-started/managing-repls).\n\nFor a practical intro to using repls, follow [this tutorial](/tutorials/introduction-to-the-repl-it-ide).\n\n## Multiplayer","metadata":{"id":168}}],["169",{"pageContent":"Learn more about [managing your repls here](/getting-started/managing-repls).\n\nFor a practical intro to using repls, follow [this tutorial](/tutorials/introduction-to-the-repl-it-ide).\n\n## Multiplayer\n\nReplit is the first fully multiplayer programming environment, meaning you can invite other people to code and collaborate with you. You can use this function to pair program with others, teach your classroom, create collaborative projects for your students, or simply present your work to others.\n\nFor a practical intro to using the multiplayer feature, follow [this tutorial](/tutorials/pair-programming-using-multiplayer-with-repl-it).\n\n## Teams\n\nThe Teams feature allows you to share all your repls and folders by default. It isn't necessary for teaching, learning, or collaboration on Replit, but it can make it much easier to work with others.\n\nTeams for Education is now free for all educators. To learn more, check out [Teams for Education](/teams-edu/intro-teams-education).\n\n## Compliance\n\nWe take user privacy very seriously and only collect data insofar as it's important to provide our service. You can read more about our privacy policy [here](https://replit.com/site/privacy),) and go through our privacy FAQs [here](/teams-edu/privacy-faq).\n\nAs a small, team we're unable to comply with the various ed-tech regulations around the world. However, you can use Replit completely anonymously without providing any identifiable information; just choose a language from our [languages page](https://replit.com/languages) and start coding.\n\nIf you're teacher, one anonymous workflow you can use is to create a repl with the instructions and starter code, and then have your students fork the repl, work on the assignment, and send the link back.","metadata":{"id":169}}],["170",{"pageContent":"# Managing your repls\n\nTo manage and keep track of all your repls, head to your Repls Dashboard. You can find it on your account by clicking on the 'My Repls' tab on the left-hand side.\n\nRepls are listed in order of when they were created, with the most recent first. Each repl has its own three-dot menu at the far right. Bringing up this menu will allow you to:\n\n- Edit the repl (change its name and description)\n- View its history\n- Fork the repl\n- Move the repl\n- Pin it to your profile\n- Delete the repl\n- Toggle privacy settings (subscribers only)\n\n## Public/Private Repls\n\nBy default all Repls created are 'public'. This means that anyone on Replit may discover and view the source code for these Repls. Users will be able to publish these Repls to the community and others will be able to view on comment on the Repl.\n\nUsers with Hacker plan subscriptions or cycles may elect to make their Repl 'private'. This means that only the creator (and any one they explicitly invite) to the Repl may view the source code. This also means that the Repl will not be available to share to the community.\n\nNote: Private Repls will be inaccessible to other users on Replit, however, if the Repl is hosted (eg: HTML, Node.js, Django) the output of those Repls may still be accessible on the internet. If you are hosting sensitive information please use a non-hosted Repl (eg: Nix) to ensure complete privacy.\n\n## Starring Repls\n\nYou can \"star\" a Repl to mark it as a favorite. This means you can then easily filter your dashboard to show only your starred Repls by clicking on the star slider at the top of your dashboard. There is no limit to how many Repls you can star. Only you can see which Repls you have starred; this info will not appear in your profile.\n\n## Searching\n\n### Basic Search","metadata":{"id":170}}],["171",{"pageContent":"## Searching\n\n### Basic Search\n\nTo search your repls, click on the search bar. You will be presented with the options \"+ New\" and \"Search\". Click \"Search\" and start typing keywords. This will filter repls whose title or language match any of the keywords (separated by spaces).\n\nRepls only need to match one of the keywords in order to be included in the results.\n\nExample:\n\n**Search Query:** `draft repl python3`\n\n**Returns:**\nAll repls that satisfy one or more of the following conditions:\n\n- has `draft` in the title\n- has `repl` in the title\n- is a `python3` repl\n\n### Search by Language\n\nYou can search for repls in a specific language by using the `language:` filter.\nTyping in `language:` followed by the language you want to filter by will prompt\nyou with language suggestions.\n\nYour search term will need to be the language name we use internally, which is why\nwe suggest selecting from the provided list. For example, to search for all C++11\nlanguages, you would search `language:cpp11`. To search for HTML, CSS, JS repls,\nyou would search `language:html`. This filter is case sensitive.\n\n### Search by Title\n\nSince plain searches include results with matching languages, you can search within repl titles only using the `title:` filter. Your search term may not include spaces.\nThis filter is case insensitive.\n\nExample:\n\n**Search Query:** `title:best project`\n\n**Returns:**\nRepls that satisfy one or more of the following conditions:\n\n- has `best` in the title\n- has `project` in the title","metadata":{"id":171}}],["172",{"pageContent":"# FAQ | Frequently Asked Questions\n\n## Why does my Always On Repl restart sometimes?\n\nRepls will need to switch physical servers once in a while to help conserve resources, causing your Always On Repl to restart. Your Repl will turn back on, install all packages, and then run your code, so there will be a small delay between the restart and your code running again.\n\nAlways On can be purchased using [Cycles](/cycles/about-cycles) or as part of the [Hacker Plan](https://replit.com/pricing). See [the Always On doc](/power-ups/boosts) for how to turn on this Power Up.\n\n### For help with Always On for chatbots/Discord bots\n\nSee the [Replit Discord](https://discord.util.repl.co/join) server #bot-help channel, or our Chatbots category in the [Replit Ask Forum](https://ask.replit.com/c/code-help/discord-bots/24)\n\n#### Read our [Database FAQ](/hosting/database-faq) for persisting data.\n\n## How do I restore a Repl?\n\nUse the clui (command line user interface, [blog](https://blog.replit.com/commandbar)) to access the trash:\n\n1. Go to https://replit.com/~/cli.\n2. Once you get to the terminal, type \"Trash\".\n3. Choose the \"View\" option to see your most recently deleted repls.\n4. Go back to \"Trash\" again and choose \"Restore\" this time, along with the title of the project you want to restore.\n\n## How do I restore a file in my Repl?\n\nCheck out our docs on the [History tool](/programming-ide/using-repl-history) to learn how you can restore a file.\n\n## Where can I get help with my code?\n\nIf you are having trouble with your code, you can always reach out to our lively community on our [Discord server](https://discord.util.repl.co/join) or our [forum](https://ask.replit.com). If you can't find answers within our community, search [Stackoverflow](https://stackoverflow.com/), [YouTube](https://youtube.com), or these docs: [HTML](https://www.w3schools.com/html/default.asp), [Python](https://www.python.org/doc/), [Javascript](https://developer.mozilla.org/en-US/docs/Web/javascript).","metadata":{"id":172}}],["173",{"pageContent":"Here are some basic debugging steps you can take if you are stuck with your code:\n\n1. Double check your code line by line for any syntax mistakes.\n2. Enter the command `kill 1` in the Shell tab in your Repl.\n3. Fork the Repl.\n4. Install all the necessary packages via our package manager if available [packager tab.](/programming-ide/installing-packages)\n5. Refresh the page.\n\n## Why is my Repl failing to load?\n\nIf your Repl is failing to load, try these debugging steps:\n\n1. Test your [internet connection](https://www.speedtest.net/).\n2. Try a different browser.\n3. Check if your browser has enabled JavaScript.\n4. Use the command `kill 1` in the shell—this will kill and restart the virtual Linux machine backing your Repl.\n\nIf none of the above steps helped, check Replit's [Service Status](https://status.replit.com), if \"all systems are a go,\" and you still have issues loading your Repl, please contact [Replit Support](https://replit.com/support).\n\n## How do I create a custom domain?\n\nYou can link any Repl to any domain that you own. Learn how to connect your domain [here](/hosting/hosting-web-pages#custom-domains).\n\n## I'm having trouble logging in, what should I do?\n\n1. Make sure you are using the correct email and password.\n2. Use the forgot password [page](https://replit.com/forgot) to reset your password.\n3. Try a different browser to log in.\n4. If those steps fail, contact support.\n\n## How do I change my email if I signed up with Google/Github/Facebook?\n\nWe require a password to change your email on your account. If you signed up with another service, such as Google or GitHub, you will not have a password available. To change emails you will first need to go through the reset password process.\n\nFor step-by-step instructions:\n\n1. Open the left sidebar, click on your username to open the dropdown menu, and then click `Log out`.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/getting-started/Log%20Out.jpg\"\n   alt=\"Log out\"\n   style=\"maxWidth: 100% !important; height: 400px !important\"\n   />","metadata":{"id":173}}],["174",{"pageContent":"<img\n   src=\"https://replit-docs-images.util.repl.co/images/getting-started/Log%20Out.jpg\"\n   alt=\"Log out\"\n   style=\"maxWidth: 100% !important; height: 400px !important\"\n   />\n2. Go back to the login page, click forgot password, and enter your email for the connected account:\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/getting-started/Forgot%20PW.jpg\"\n   alt=\"Forgot PW\"\n   style=\"maxWidth: 100% !important; height: 400px !important\"\n   />\n3. You will receive an email with a link to create a new password. If you don't see the email, make sure it isn't in your spam filter.\n4. Now you can go to your [account page](https://replit.com/account) and change your account email address using your new password.\n\n## How do I change my username?\n\nYou can **only** change your username **1 time**, by [clicking here](https://replit.com/~/cli/account/change-username?run=1). If the option is not available to you, then you have already changed it.\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/misc/account-change-username.png\"\nalt=\"Change username\"\nstyle=\"maxWidth: 100% !important; height: 400px !important\"\n/>\n\n## Can I merge accounts?\n\nUnfortunately, at this time, we don't have a way for users to merge accounts.\n\n## How can I update Python to the latest version?\n\nOur official Python repl is currently on version 3.8. CodingCactus has\na usable [Python 3.10 template](https://replit.com/@CodingCactus/Python-310), but it doesn't support the Python console and the [tkinter](https://docs.python.org/3/library/tkinter.html) UI library.\nWe are working on an infrastructure update to make updating software in repls easier: nix modules. This\nwill enable a fully functional Python repl template for the latest version of Python.\n\n## How do I turn on Explorer?\n\nIf you want to be on the cutting edge, turn on Explorer mode in your Account settings.\n\n1. Navigate to your username in the upper-left corner the site, and select the down arrow.\n2. Select **Account**.","metadata":{"id":174}}],["175",{"pageContent":"If you want to be on the cutting edge, turn on Explorer mode in your Account settings.\n\n1. Navigate to your username in the upper-left corner the site, and select the down arrow.\n2. Select **Account**.\n   ![Show Account in username menu](https://replit-docs-images.util.repl.co/images/getting-started/select-account-in-dropdown.png)\n3. Scroll down to **Roles**.\n4. Toggle on **Explorer**.\n   ![Showing toggle on for Explorer in Roles settings](https://replit-docs-images.util.repl.co/images/getting-started/toggle-explorer.png)\n\nExplorers are the first to see new Replit features in the Workspace. Because those features are stil in development, sometimes things don't work as expected. If something isn't working correctly, please let us know. You can remove the role at any time to go back to the Replit you know and love.\n\n## Cycles\n\n### What are Cycles?\n\nCycles are Replit's new digital tokens! They can be purchased on Replit and combined with any user plan to increase your Repls' performance and functionality.\n\nCycles are _not_ a cryptocurrency. They are virtual tokens native to the Replit platform and are meant to improve your experience on Replit.\n\n### What can I use Cycles on?\n\nAt this moment you can use Cycles to buy Private Repls, Always On, Boosts, Ghostwriter, and more features are coming soon!\n\n### What are Power Ups?\n\nPower Ups are anything that improves your Repls' functionality and performance. Current available Power Ups include: [Boosts](/power-ups/boosts), Always On, or Private Repls.\n\n### How much are Cycles worth?\n\nCycles can be purchased for $0.01 USD per Cycle. If you earned Cycles through [Bounties](/category/bounties), they are eligible for cash out.\n\nThere is a 25% cash out fee and additional fees based on your country of residence and chosen payment method.\n\n### Can anyone buy Cycles?\n\nAny user, regardless of their Replit plan, can purchase Cycles.\n\nYou cannot buy Cycles through the Replit Mobile App though, you need to use the web version.\n\n### Can I get a refund on Cycles?","metadata":{"id":175}}],["176",{"pageContent":"Any user, regardless of their Replit plan, can purchase Cycles.\n\nYou cannot buy Cycles through the Replit Mobile App though, you need to use the web version.\n\n### Can I get a refund on Cycles?\n\nCycles are non-refundable. For further details, please refer to [Cycles Terms](https://replit.com/site/cycles-terms)\n\n### How do I use my Cycles?\n\nYou can use your current Cycles on any Power Up from the Workspace (inside of a Repl).\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/FAQ/private-repl-purchase.gif\"\nalt=\"Purchase Private Repls\"\nstyle=\"maxWidth: 100% !important; height: 400px !important\"\n/>\n\n### What happens when I toggle off my Power Up?\n\nFor Always On and Boosts, your Power Up power up's functionality on that Repl. You can change Power Ups on and off for as long as your Cycles balance meets the required amount.\n\n### How do I stop paying for a Power Up (i.e., end a Cycles subscription)?\n\nFor Always On and Boosts make sure that you toggle off from inside of the Repl where its activated before the renewal date.\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/FAQ/toggle-off-boost.gif\"\nalt=\"Toggle Off Boost\"\nstyle=\"maxWidth: 100% !important; height: 400px !important\"\n/>\n\nFor private Repls bought with Cycles, head to [My Cycles page](https://replit.com/cycles) and toggle off the subscription.\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/cycles/FAQ/toggle-off-private-repls.gif\"\nalt=\"Toggle Off Private Repls\"\nstyle=\"maxWidth: 100% !important; height: 400px !important\"\n/>\n\n### What happens to my private Repls if I stop using Cycles or run out of Cycles?\n\nYour Repls will remain private but you will not be able to edit the code unless you make the Repl public or subscribe to private Repls again with Cycles.","metadata":{"id":176}}],["177",{"pageContent":"# CLUI, the Graphical CLI\n\nReplit has created a text-based interface to interact with various aspects of your account. This page serves as documentation of the various capabilities of CLUI.\n\n## Accessing CLUI\n\nNavigate to the [CLUI page](https://replit.com/~/cli) to access the graphical prompt CLI\n\n![clui](https://replit-docs-images.util.repl.co/images/animations/nav-to-clui.gif)\n\nThe prompt will display in-line information about the commands which can be run.\n\n## Walkthrough\n\nThis video walks you through how to access and use the CLUI.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/a728d471bcaa4bf9861a4ce96ce62b51\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n\n<br/>\n\n## Command Reference\n\n<details>\n  <summary><b>account</b>: Manage your account</summary>\n\n`account view-warns` <br></br>\nView warnings you have been issued.\n\n`account change-username` <br></br>\nChange your username (this can only be done once).\n\n</details>\n\n<details>\n  <summary><b>trash</b>: List and restore deleted repls</summary>\n\n`trash restore --title $title` <br></br>\nRestore a deleted repl by its title. If multiple repls exist with the same name, the most recently deleted repl will be restored.\n\n`trash view` <br></br>\nView your most recently deleted repls.\n\n</details>\n\n<details>\n  <summary><b>team</b>: View and manage your teams</summary>\n\n`view` <br></br>>\nView the members of your team.\n\n`fork-repl-to-project` <br></br>\n\n> Forks an existing Repl to create a Team Project\n\n</details>\n\n<details>\n  <summary><b>clear</b>: Clears the screen</summary>\n\n`clear` <br></br>\nClears screen.\n\n</details>\n\n## Further Reading\n\nCheck out our [blog post](https://blog.replit.com/clui) for a discussion on building CLUI.","metadata":{"id":177}}],["178",{"pageContent":"# Replit Mobile App\n\nBring your coding projects to life on-the-go with the Replit Mobile App.\n\n## About the Replit Mobile App\n\nThe Replit Mobile App is available for [Android](https://play.google.com/store/apps/details?id=com.replit.app) and [iOS](https://replit.com/mobile) users. With this app, you can take your coding projects anywhere you go and unleash your creative potential. Whether you want to write a Python bot, build a website, or run any program, the Replit Mobile App powered by Nix has you covered.\n\n## Key Features\n\n- Effortless hosting with zero setup deployment\n- Real-time multiplayer collaboration for live coding\n- Support for coding in any language and framework\n- Access to over 15 million projects to clone and remix\n- Ability to set up custom domains for your projects\n- Easy import of existing projects from Github\n- Repl Auth integration for user authentication\n- Quick database setup with ReplDB\n- All-in-one code editor, compiler, and IDE\n\n## Signing up, logging in, and and signing out of accounts\n\nDownload the Replit Mobile App on your [Android](https://play.google.com/store/apps/details?id=com.replit.app) or [iOS](https://replit.com/mobile) device.\n\nTo sign up, tap **Start coding**. You will be redirected to create an account with Replit. You can either sign up with email/password or use a third-party authentication providers such as Google, Github, and Facebook.\n\nTo log in, tap **Already have an account?**. You'll be redirect it to log in to your existing account.\n\nTo log out, go to your Replit account. Tap `Log Out` listed under the `Other` sections of your account. You'll receive a notification prompting you to confirm that you want to log out. Tap `Log Out` and you'll now be logged out of your Replit account on the mobile app.\n\n## Sharing app feedback","metadata":{"id":178}}],["179",{"pageContent":"## Sharing app feedback\n\nSharing feedback about the Replit Mobile App is simple. You can either shake your phone to bring up a feedback form or navigate to your Replit account and tap **Send App Feedback** under the **Other** section. After that, choose the corresponding category and you'll be able to send us your feedback on the Mobile App.\n\n## Features coming soon\n\nThe first version of the Replit Mobile App is creation first. You can write, run, and host projects just like you can on the Replit site.\n\nThese features are currently unavailable on the mobile app but are coming soon:\n\n- Repl publishing\n- Community feed\n- Cycles and subscriptions purchasing\n- The Learn Hub\n- 100 days of Code\n- Custom THemes","metadata":{"id":179}}],["180",{"pageContent":"# Firewalled Replit\n\nReplit offers an alternative domain, [firewalledreplit.com](https://firewalledreplit.com), that provides a more restricted user experience. By logging into Replit from this domain rather than our main domain, the following restrictions are applied:\n\n- A firewall is used to prevent repls from accessing the Internet (apart from a small number of software package repositories).\n- Replit’s community and search features are hidden.\n\nNo registration is needed to use firewalledreplit.com, and there is no need to migrate your user account or repls to the new domain. Users are free to switch between using [firewalledreplit.com](https://firewalledreplit.com) and our original domain [replit.com](https://replit.com) at any time.\n\nMost repls will function normally on firewalledreplit.com, but those that depend on being able to access the external internet might not function as expected.\n\nFor IT administrators who may wish to enforce the use of firewalledreplit.com rather than replit.com, [this document]/teams-edu/it-administrators-toolkit) provides guidance on how that can be done.\n\n_Read more about this change at [our blog post](https://blog.replit.com/computing-superpower-at-school). Also, see our [commitment to user safety.](https://replit-docs-images.util.repl.co/images/teamsForEducation/Our%20Commitment%20to%20User%20Safety.pdf)_\n\n## FAQ\n\n**What is different about firewalledreplit.com?**\n\nThe new domain firewalledreplit.com is more strictly filtered to eliminate any avenue for students to create web proxies and, therefore, bypass school filters and reach inappropriate content. Additionally, there will be no community, search, or spotlight features. Students will not be able to view any public repls that are shared within the broader Replit community. They can only see projects and repls that are created inside the Teams for Education organization.\n\n**Why is this change happening?**","metadata":{"id":180}}],["181",{"pageContent":"**Why is this change happening?**\n\nWe take trust and safety seriously. While we want students to have the opportunity to experience the full power of Replit and coding, some schools have asked for stronger guarantees that their students will not be able to access adult or inappropriate content. We’ve listened, and that’s why we’re providing firewalledreplit.com as a new option for those schools.\n\n**Will I still be able to access the same Teams for Education features?**\n\nYes. There will be no change to the education-focused features.\n\n**Can my students still collaborate with other students that are a part of our organization?**\n\nYes, [students can still work with other students]/teams-edu/group-projects) who are a part of the same project (as organized by the teacher). Students will NOT be able to view community repls or comments and can only interact with other students that are a part of their team.\n\n**How is this solution different from blocking repl.co?**\n\nPreviously, we advised schools that wanted to prevent students from accessing proxies to block the repl.co domain. However, this had the side-effect of also preventing them from coding functional web applications on Replit. In contrast, the new domain firewalledreplit.com allows students to work on web applications that are fully functional except that they cannot access the broader Internet. Additionally, firewalledreplit.com hides community sharing and commenting features so that students can focus on coding.\n\n**How do I know students will not be able to access proxies or bypass school filters on firewalledreplit.com too?**","metadata":{"id":181}}],["182",{"pageContent":"**How do I know students will not be able to access proxies or bypass school filters on firewalledreplit.com too?**\n\nEvery method that students have used in the past to bypass school filters relies on repls being able to access the Internet. On firewalledreplit.com, repls are completely blocked from accessing the Internet, apart from repositories of well-known, trusted software libraries that are needed for coding. These include pypi.org for Python, npmjs.org for NodeJS and maven.org for Java. This blocking is enforced deep within our network, and there is no way for students to bypass it while using the firewalledreplit.com domain.\n\n**What can I do if students are still accessing replit.com and I want to prevent this?**\n\nAfter switching your students over to use firewalledreplit.com, you do have the option of blocking replit.com and repl.co to fully ensure students cannot bypass the new domain and the additional safeguards that it provides. However, blocking these domains will also eliminate the ability for students to see trending/popular repls posted in the community which can act as inspiration and creativity for students.\n\n**Can I ask for additional websites from the Internet to be permitted for access from firewalledreplit.com?**\n\nSorry, but to ensure the security of firewalledreplit.com, we do not have plans to allow additional websites to be accessed through firewalledreplit.com. Only access to a limited number of well-known software library repositories will be allowed.\n\n**Will this limit the languages I can use or access?**\n\nNo. You can still create projects in the same languages as replit.com.\n\n**Will my speed be affected?**\n\nNo. You will still have access to the same dedicated cluster for Teams for Education that has more speed and storage.\n\n**Do I need to transfer projects/repls from replit.com to firewalledreplit.com?**","metadata":{"id":182}}],["183",{"pageContent":"No. You will still have access to the same dedicated cluster for Teams for Education that has more speed and storage.\n\n**Do I need to transfer projects/repls from replit.com to firewalledreplit.com?**\n\nNo. Since the projects are attached to the organization/account and not the website domain, they will be made available on firewalledreplit.com automatically.\n\n**Can our district request our own sub-domain or for specific content to be further filtered?**\n\nWith this new domain, firewalledreplit.com, there will be no access to the Internet through repls and the exclusion of community. Both of these features essentially create an environment where the focus is solely on coding and collaborating with only those the teacher allows. Therefore, there would be no added benefit to further filtering and no need to create a district-specific subdomain.","metadata":{"id":183}}],["184",{"pageContent":"---\nsidebar_position: 1\n---\n\n# PostgreSQL on Replit\n\n## What is PostgreSQL?\n\nPostgreSQL is a powerful, open source object-relational database system that is widely used in web applications and other software development projects. We use PostgreSQL version 15 in our integration, which allows you to easily create a production-ready PostgreSQL database directly within Replit. You can run queries and connect to the database using our provided environment variables. For more information on PostgreSQL, visit the [official documentation](https://www.postgresql.org/docs/).\n\n## Why use PostgreSQL?\n\n<ol>\n  <li>\n    <b>Simplicity:</b> With our integration, you can easily set up a PostgreSQL\n    database without having to install any additional software or configure any\n    settings. All you need to do is click a button and you'll have a\n    fully-functional database ready to go.\n  </li>\n  <li>\n    <b>Seamless integration:</b> Our integration is designed to work seamlessly\n    with Replit, so you can easily access your database and run queries within\n    the Replit environment or within your code with minimal configuration.\n  </li>\n  <li>\n    <b>Production-ready:</b> The database created with our integration is\n    production-ready, so you can use it for real-world applications and\n    projects.\n  </li>\n  <li>\n    <b>Convenience:</b> With our provided environment variables, you can easily\n    connect to the database from your code, without having to worry about\n    setting up the connection manually. This saves you time and makes it easier\n    to get your project up and running.\n  </li>\n  <li>\n    <b>Neon documentation:</b> Provides guides on how to connect various\n    frameworks, such as Django, to your PostgreSQL database in the{' '}\n    <a href=\"https://neon.tech/docs/connect/\">neon documentation</a>.\n  </li>\n  <li>\n    <b>Connection pooling:</b> If you need to enable connection pooling for any\n    reason, you can contact us and we'll do it manually for you. More","metadata":{"id":184}}],["185",{"pageContent":"</li>\n  <li>\n    <b>Connection pooling:</b> If you need to enable connection pooling for any\n    reason, you can contact us and we'll do it manually for you. More\n    information on connection pooling can be found in the{' '}\n    <a href=\"https://neon.tech/docs/connect/connection-pooling/\">\n      neon documentation\n    </a>\n    .\n  </li>\n  <li>\n    <b>Compute lifecycle:</b> The database will go to sleep after 5 minutes of\n    no queries, so you may experience disconnects. More information on the\n    compute lifecycle can be found in the{' '}\n    <a href=\"https://neon.tech/docs/introduction/compute-lifecycle/\">\n      Neon documentation\n    </a>\n    .\n  </li>\n</ol>\n\n## Setup\n\n<ol>\n  <li>Open a new tab in Replit and type \"PostgreSQL\"</li>\n  <img\n    src=\"https://replit-docs-images.util.repl.co/images/hosting/databases/pgopentab.png\"\n    alt=\"Open a new tab in Replit and type PostgreSQL\"\n  />\n  <li>\n    In the \"PostgreSQL\" panel, click \"Buy Cycles & create a DB\" or \"Use Cycles\n    to create a DB\"\n  </li>\n  <img\n    src=\"https://replit-docs-images.util.repl.co/images/hosting/databases/pgbuy.png\"\n    alt=\"In the PostgreSQL panel, click Buy Cycles & create a DB or Use Cycles to create a DB\"\n  />\n  <li>\n    Expand the \"Database env variable\" section and copy the variable name\n    (DATABASE_URL), for use later\n  </li>\n  <img\n    src=\"https://replit-docs-images.util.repl.co/images/hosting/databases/pgvar.png\"\n    alt=\"Expand the Database env variable section and copy the variable name (DATABASE_URL), for use later\"\n  />\n</ol>\n\n## SQL Explorer\n\nWe provide a SQL explorer that you can use to create tables and manage your database. And if you have purchased Ghostwriter, you can use that within the SQL explorer to help you write queries.\n\n## Usage (NodeJS)\n\n### Preparation\n\n<!-- 1. Use the Packager to install `knex` and `pg` -->\n\n1. <span>\n     Use the Packager to install <code>knex</code> and <code>pg</code>\n   </span>\n2. <span>Connect to the DB with Knex using the URL secret</span>\n\n   ```js\n   const knex = require(\"knex\")({","metadata":{"id":185}}],["186",{"pageContent":"1. <span>\n     Use the Packager to install <code>knex</code> and <code>pg</code>\n   </span>\n2. <span>Connect to the DB with Knex using the URL secret</span>\n\n   ```js\n   const knex = require(\"knex\")({\n     // We are using PostgreSQL\n     client: \"postgres\",\n     // Use the secret we provide to connect to the Database\n     connection: process.env.DATABASE_URL,\n\n     // Optionally, you can use connection pools to increase query performance\n     pool: { min: 0, max: 80 },\n   });\n   ```\n\n3. <span>\n     Use an Async IIFE so we can use <code>await</code>\n   </span>\n\n   ```js\n   (async () => {\n     // Leave this empty for now\n   })();\n   ```\n\n### Code\n\n1. <span>Create a table</span>\n\n   ```js\n   await knex.schema.createTable(\"users\", (table) => {\n     table.increments(\"id\");\n     table.string(\"username\");\n     table.integer(\"points\");\n   });\n   ```\n\n2. <span>Insert a row</span>\n\n   ```js\n   await knex(\"users\").insert({\n     username: \"alice\",\n     points: 0,\n   });\n   ```\n\n3. <span>Update the row</span>\n\n   ```js\n   await knex(\"users\")\n     .where(\"username\", \"alice\")\n     .update({\n       points: knex.raw(\"points + 1\"),\n     });\n   ```\n\n4. <span>Get the row</span>\n\n   ````js\n   const user = await knex('users')\n       .where('username', 'alice')\n       .first();\n       ```\n   ````\n\n5. <span>Print the row to the console</span>\n\n   ```js\n   console.log(user);\n   ```\n\n6. <span>Delete the row</span>\n\n   ```js\n   await knex(\"users\").where(\"username\", \"alice\").delete();\n   ```\n\n### Final Code\n\n```js\n// Connect to the Database\nconst knex = require(\"knex\")({\n  // We are using PostgreSQL\n  client: \"postgres\",\n  // Use the secret we provide to connect to the Database\n  connection: process.env.DATABASE_URL,\n\n  // Optionally, you can use connection pools to increase query performance\n  pool: { min: 0, max: 80 },\n});\n\n(async () => {\n  // Create a demo table called \"users\"\n  await knex.schema.createTable(\"users\", (table) => {\n    table.increments(\"id\");\n    table.string(\"username\");\n    table.integer(\"points\");\n  });\n\n  // Add a demo user to the table with 0 points","metadata":{"id":186}}],["187",{"pageContent":"await knex.schema.createTable(\"users\", (table) => {\n    table.increments(\"id\");\n    table.string(\"username\");\n    table.integer(\"points\");\n  });\n\n  // Add a demo user to the table with 0 points\n  await knex(\"users\").insert({\n    username: \"alice\",\n    points: 0,\n  });\n\n  // Increment the points by 1\n  await knex(\"users\")\n    .where(\"username\", \"alice\")\n    .update({\n      points: knex.raw(\"points + 1\"),\n    });\n\n  // Get the user\n  const user = await knex(\"users\").where(\"username\", \"alice\").first();\n\n  // Print the user\n  console.log(user);\n\n  // Delete the user\n  await knex(\"users\").where(\"username\", \"alice\").delete();\n})();\n```\n\n## Usage (Python)\n\n### Preparation\n\n1. <span>\n     Use the Packager to install <code>psycopg2</code>\n   </span>\n2. <span>\n     Connect to the DB with <code>psycopg2</code> using the URL secret\n   </span>\n\n   ```py\n   import psycopg2.pool\n\n   # Create a connection pool with a min_size of 0 and a max_size of 80\n   pool = psycopg2.pool.SimpleConnectionPool(0, 80, process.env.DATABASE_URL)\n\n   # Get a connection from the pool\n   conn = pool.getconn()\n\n   # Create a cursor using the connection\n   cur = conn.cursor()\n\n   # Do your database operations using the cursor\n   # <Your code goes here>\n\n   # Close the cursor and return the connection to the pool\n   cur.close()\n   pool.putconn(conn)\n\n   # When you are done using the pool, close it to release the resources\n   pool.closeall()\n   ```\n\n### Code\n\n1. <span>Create a table</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       CREATE TABLE users (\n           id SERIAL PRIMARY KEY,\n           username VARCHAR(255),\n           points INTEGER\n       )\n       \"\"\"\n   )\n   ```\n\n2. <span>Insert a row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       INSERT INTO users (username, points)\n       VALUES (%s, %s)\n       \"\"\",\n       ('alice', 0)\n   )\n   ```\n\n3. <span>Update the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       UPDATE users\n       SET points = points + 1\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n4. <span>Get the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"","metadata":{"id":187}}],["188",{"pageContent":"cur.execute(\n       \"\"\"\n       UPDATE users\n       SET points = points + 1\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n4. <span>Get the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       SELECT *\n       FROM users\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   user = cur.fetchone()\n   ```\n\n5. <span>Print the row to the console</span>\n\n   ```py\n   print(user)\n   ```\n\n6. <span>Delete the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       DELETE FROM users\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n### Final Code\n\n```py\nimport psycopg2.pool\n\n# Create a connection pool with a min_size of 0 and a max_size of 80\npool = psycopg2.pool.SimpleConnectionPool(0, 80, process.env.DATABASE_URL)\n\n# Get a connection from the pool\nconn = pool.getconn()\n\n# Create a cursor using the connection\ncur = conn.cursor()\n\n# Do your database operations using the cursor\n\n# Create a demo table called \"users\"\ncur.execute(\n    \"\"\"\n    CREATE TABLE users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(255),\n        points INTEGER\n    )\n    \"\"\"\n)\n\n# Add a demo user to the table with 0 points\ncur.execute(\n    \"\"\"\n    INSERT INTO users (username, points)\n    VALUES (%s, %s)\n    \"\"\",\n    ('alice', 0)\n)\n\n# Increment the points by 1\ncur.execute(\n    \"\"\"\n    UPDATE users\n    SET points = points + 1\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\n# Get the user\ncur.execute(\n    \"\"\"\n    SELECT *\n    FROM users\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\nuser = cur.fetchone()\n\n# Print the user\nprint(user)\n\n# Delete the user\ncur.execute(\n    \"\"\"\n    DELETE FROM users\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\n# Close the cursor and return the connection to the pool\ncur.close()\npool.putconn(conn)\n\n# When you are done using the pool, close it to release the resources\npool.closeall()\n```","metadata":{"id":188}}],["189",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Replit Database\n\n## What is Replit Database?\n\nReplit Database is a simple, user-friendly key-value store inside of every Repl. No configuration is required; you can get started right away!\n\nRead on for answers to Database FAQs, or jump right in and follow [this basic phone book tutorial](/tutorials/using-the-replit-database) where you'll learn how to perform the fundamental \"CRUD\" (Create, Read, Update, Delete) operations with Replit Database.\n\nHere's a short video on how to use the Replit database, or read the text explanation below.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Vx5Ci77K-ss\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Using Replit Database\n\nEvery Repl can access and interact with its own unique Replit Database. This database can be accessed from the library, and requires no configuration beyond import. Interacting with the Replit Database follows much of the same syntax and logic as creating and interacting with the key-value pairs of a Python dictionary.\n\n### Importing the database\n\nTo access the Replit database we use `import db`:\n\n```python\nfrom replit import db\n```\n\n### Creating data\n\nThe Replit Database works a lot like a Python dictionary, so we can add data to our database by assigning values to keys using square bracket indexing:\n\n```python\nfrom replit import db\n\n# Add a key and associated value to the database\ndb[\"key1\"] = \"value1\"\n```\n\nReplit Database is able to handle different types of values like lists, dictionaries, integers, floats, NoneType, and strings:\n\n```python\nfrom replit import db\n\ndb[\"key1\"] = \"value1\"\ndb[\"integer_1\"] = 100\ndb[\"float_1\"] = 9.99\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\ndb[\"none_key\"] = None\n```\n\nMake use of 2D lists as a value to create table-like structures within your database:\n\n```python\nfrom replit import db\n\ndb[\"2D_key\"] = [[\"id\",\"name\"],[1,\"James\"],[2,\"Angel\"]]","metadata":{"id":189}}],["190",{"pageContent":"db[\"none_key\"] = None\n```\n\nMake use of 2D lists as a value to create table-like structures within your database:\n\n```python\nfrom replit import db\n\ndb[\"2D_key\"] = [[\"id\",\"name\"],[1,\"James\"],[2,\"Angel\"]]\n\nfor column in db[\"2D_key\"]:\n    print(column)\n```\n\n**Output:**\n\n```\nObservedList(value=[\"id\",\"name\"])\nObservedList(value=[1,\"James\"])\nObservedList(value=[2,\"Angel\"])\n```\n\nThe `ObservedList` object you see in the output is a Replit Database object that acts like a Python list and can be indexed as such.\n\n### Reading data\n\nRead from your database by referencing the key of the value:\n\n```python\nfrom replit import db\n\n# Create data in the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Access and print data from the database\nprint(db[\"key1\"])\nprint(db[\"my_list\"][0])\nprint(db[\"my_dictionary\"][\"key_a\"])\n```\n\n**Output:**\n\n```\nvalue1\n1\nvalue_a\n```\n\nWe can use the built-in Python dictionary method `.get()` to retrieve the value at the key passed in as an argument:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"float_1\"] = 9.99\n\n# Access the value of the data created by its key\nprint(db.get(\"float_1\"))\n```\n\nWe can loop through the keys stored in the database to get access to the values of those keys:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Access the keys from the database and print the values associated for key in db\n  print(db.get(key))\n```\n\nThe `.keys()` method returns a list of the keys in our database:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Print all the keys from the database\nprint(db.keys())\n```\n\n**Output:**\n\n```\n{'key1', 'my_list', 'my_dictionary', '2D_keys'}\n```","metadata":{"id":190}}],["191",{"pageContent":"db[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Print all the keys from the database\nprint(db.keys())\n```\n\n**Output:**\n\n```\n{'key1', 'my_list', 'my_dictionary', '2D_keys'}\n```\n\nThe `.prefix()` method allows us to get the values of keys with only part of that key. This allows us to return multiple values for keys that share the same prefix:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Print all the keys from the database that have a prefix of \"my\"\nprint(db.prefix(\"my\"))\n```\n\n**Output:**\n\n```\n('my_dictionary', 'my_list')\n```\n\n### Updating data\n\nWe can update values that are stored in our database by assigning new values to their associated key:\n\n```python\nfrom replit import db\n\n# Create data with \"float_1\" as key and print\ndb[\"float_1\"] = 9.99\nprint(db[“float_1”])\n\n# Update data at \"float_1\" key and print\ndb[“float_1”] = 3.33\nprint(db[“float_1”])\n```\n\n**Output:**\n\n```\n9.99\n3.33\n```\n\nWe can also mutate numbers that are stored in our database:\n\n```python\nfrom replit import db\n\n# Create data with \"float_1\" as key and print\ndb[\"float_1\"] = 9.99\n\n# Perform an operation on the data\ndb[\"float_1\"] += 0.01\n\n# Print result of operation\nprint(db[\"float_1\"])\n```\n\n**Output:**\n\n```\n10.0\n```\n\n### Deleting data\n\nWe make use of the `del` keyword and square bracket indexing to delete key-value pairings from our database:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"float_1\"] = 9.99\n\n# Delete the data we added at the key \"float_1\"\ndel db[\"float_1\"]\nif \"float_1\" not in db:\n\tprint(\"Value deleted successfully.\")\n```\n\n**Output:**\n\n```\nValue deleted successfully.\n```\n\n### Summary\n\nOverall, the Replit Database is a simple and useful database that allows us to easily and dynamically update our data. The features resembling the Python dictionary mean we can use the built-in Python dictionary functions to interact with our database.\n\n## FAQs\n\n### Where can I find my database?","metadata":{"id":191}}],["192",{"pageContent":"## FAQs\n\n### Where can I find my database?\n\nWhen viewing your Repl, you'll find the Database icon toward the bottom of the sidebar – it's the second last icon. That’s Replit’s key-value database, built right into your Repl!\n\n### How can I access my database?\n\nTo access Database, you can use a library or simple curl commands.\n\nReplit provides official clients. Use one of these clients if your Repl is in one of these languages:\n\n- [Python](https://pypi.org/project/replit/)\n- [Node.js](https://www.npmjs.com/package/@replit/database)\n- [Go](https://github.com/replit/database-go)\n\n### How do I use my database?\n\nWhen you click on the Database icon in the sidebar, you'll see some instructions. If your Repl is in a language that has an official Database client, you can quickly import it and start using Database by clicking on the \"Insert\" buttons.\n\nIf your language does not have a client, we provide some curl examples. They are found below, and are a useful reference if you wish to write your own Database client.\n\n**Set**\n\n```\ncurl $REPLIT_DB_URL -d '<key>=<value>'\n```\n\nIf your key and value don't use any unsafe characters, you can use\nan alternative version:\n\n```\ncurl -XPOST $REPLIT_DB_URL/<key>=<value>\n```\n\n**Get**\n\n```\ncurl $REPLIT_DB_URL/<key>\n```\n\n**Delete**\n\n```\ncurl -XDELETE $REPLIT_DB_URL/<key>\n```\n\n`Delete` returns status code 204 if the key was deleted or 404 if the key did not exist.\n\n**List**\n\n```\ncurl $REPLIT_DB_URL --get -d 'prefix=<key>'\n```\n\nor\n\n```\ncurl \"$REPLIT_DB_URL?prefix=<key>\"\n```\n\nThe returned keys will be separated by newlines.\n\nListing also takes a query parameter: `encode=true`. If set, the returned keys will be URL encoded. This lets you safely handle keys that contain newlines.\n\n### What is REPLIT_DB_URL?\n\nThis is the environment variable we have created with your Repl. It is the key that will allow you to access your database.","metadata":{"id":192}}],["193",{"pageContent":"### What is REPLIT_DB_URL?\n\nThis is the environment variable we have created with your Repl. It is the key that will allow you to access your database.\n\nThe clients listed above take care of using `REPLIT_DB_URL` for you, but you will need it if you want to write your own client or use a database from a language that doesn't yet have a client. Here are two examples:\n\nPython:\n\n```\nimport os\nprint(os.getenv(\"REPLIT_DB_URL\"))\n```\n\nNode.js:\n\n```\nconsole.log(process.env.REPLIT_DB_URL)\n```\n\n`REPLIT_DB_URL` provides full access to your database. Therefore, you should take care not to expose it to the world or share it with people you don't trust.\n\nThe value of `REPLIT_DB_URL` changes from time to time, so we recommend that you don't copy it elsewhere. Subsequent reads by the same process will see the same value. We will restart your Repl if we need to change it after it has been read.\n\n### What limits does Database have?\n\nThe limits are currently:\n\n- 50 MB per database (sum of keys and values)\n- 5,000 keys per database\n- 1000 bytes per key\n- 5 MB per value\n\nThere are rate limits that apply to all operations. You will receive an HTTP 429 if you exceed them. We recommend implementing an exponential backoff and retry to handle this case.\n\n### How can I tell how much storage I'm using?\n\nThe Database sidebar shows you the number of keys in your database along with\nthe total storage occupied by your keys and values.\n\n### Is my Database private?\n\nYes, each Database is private and isolated. Every Repl has its own database, and they are not shared among repls.\n\n### How do I share a database across repls?\n\nThe easiest way to do this is to use one Repl as the primary database and have other repls connect to it via web hosting. [Here’s an example Repl in Python](https://replit.com/@util/Replit-Database-proxy).\n\nAny requests sent to the above Repl will operate on its database, so sending\nrequests to it from other repls means that they all share the same information.","metadata":{"id":193}}],["194",{"pageContent":"---\nsidebar_position: 8\n---\n\n# Strike system FAQ\nLearn about warnings, banned community access, and site bans in Replit.\n\n### What is a Warning in Replit?\n\nA Moderator will send you a warning when you violate the [Community Standards](https://replit.com/@moderation/Welcome?c=244171), [Terms of Service](https://replit.com/site/terms), or [Privacy Policy](https://replit.com/site/privacy). Other disciplinary actions may include unpublishing of your Repl(s), cancellation of a Bounty, and/or hiding/deleting comments and Bounty Applications.\n\n### Can I republish my Repl after it's been unpublished?\n\nYes. Revise your Repl to abide by the [Community Standards](https://replit.com/@moderation/Welcome), then republish.\n\n### How can I appeal a Moderation decision?\n\nContact the mods if you believe they took unfair action towards you. Appeal at the [Moderator Contact Website](https://contact.moderation.repl.co/) or reach out to [Support](https://replit.com/support) for site bans.\n\n### What happens when I'm banned from the Community?\n\nWhen banned from the community, you cannot create posts, comments, share Repls, or participate in [Bounties](https://replit.com/bounties). However, you can still use the online IDE for features unrelated to community activity. If ready to rejoin and abide by the guidelines, contact us at the [Moderator Contact Website](https://contact.moderation.repl.co/).\n\n### What happens when I'm banned from Replit?\n\nA ban from Replit means you cannot log into your account and all Repls will have been deleted. This often occurs for violating the [Terms of Service](https://replit.com/site/terms). Appeal your ban by making a ticket at https://replit.com/support if you are ready to abide by the Terms of Service.","metadata":{"id":194}}],["195",{"pageContent":"# Trust and Safety at Replit\n\nAt Replit, we strive to create a fun and creative community that is also trusted and safe. To achieve this goal, we have implemented rules and policies that promote positive behavior and protect our users. In this document, you will find a summary of our key rules, tips on how to report any concerns, and information on where you can learn more.\n\n## Rules for Content and Behavior\n\nTo maintain a safe and trusted environment, we have established a set of rules that are detailed in our [Terms of Service](https://replit.com/site/terms).  The same rules apply whether you are publishing Repls, or engaging with other users in our Community.\n\n - Keep it appropriate. All content must be suitable for a workplace environment and free of any offensive language or nudity. We prohibit violent and graphic content, as well as content that depicts or encourages self-harm.\n - No bullying. We have a zero-tolerance policy for bullying, trolling, doxxing, hate speech, racism, sexism, or any other form of prejudice. Violation of this rule may result in an immediate ban.\n - No illegal or regulated content. Replit should not be used for any illegal activities, such as dealing in drugs, sex, gambling, weapons, or pirated software.\n - Misuse of the service is not allowed. Do not share content that could harm other users, such as spam, malware, or phishing. We also do not allow Repls that consume an excessive amount of resources, such as spam bots and cryptocurrency miners.\n\n## How we enforce our rules\n\nWe have a dedicated team of moderators who work hard to keep our service safe by actioning reports concerning content that violates our [Terms](https://replit.com/site/terms), [Community Guidelines](https://replit.com/@moderation/Welcome), or [Privacy Policy](https://replit.com/site/privacy).","metadata":{"id":195}}],["196",{"pageContent":"If your content violates the rules, we will take appropriate action against it. In circumstances of serious violations, you may be banned from using Replit.  For more information on the actions we take, checkout our [Strike System FAQ](/legal-and-security-info/strike-system-faq).\n\n## Protecting Underage users\n\nReplit upholds the [highest global privacy standards](/teams/privacy-faq) for our youngest members. To ensure that their personal information remains safe, we don't collect it in the first place. Our [Teams for Education](https://replit.com/teams-for-education) platform enables students to join Replit without providing even a name or email address—only a username and password are required.\n\nTo protect children from inappropriate images, we automatically scan all images uploaded to Replit. Our machine learning technology quickly detects and flags most images that violate our rules for review by a moderator.\n\nWe also take swift action to prevent predators from using Replit. Any account that shares child abuse material (CSAM) or seeks sexual contact with minors will be terminated and may be reported to the authorities.\n\n## How to Make Reports\n\n### Reporting a Repl\n\nReport a Repl to a moderator by visiting its cover page and clicking the kebab menu. Select the \"Report\" option and provide a reason for the report. A moderator will investigate and take appropriate action within 24 hours.\n![Reporting a Repl](https://replit-docs-images.util.repl.co/images/animations/report-repl.gif)\n\n### Reporting a User\n\nReport a user by accessing the \"Report\" option on their profile page. Provide a reason for the report, and a moderator will review and address it within 24 hours.\n![Reporting a User](https://replit-docs-images.util.repl.co/images/animations/report-user.gif)\n\n### Reporting a Comment","metadata":{"id":196}}],["197",{"pageContent":"![Reporting a User](https://replit-docs-images.util.repl.co/images/animations/report-user.gif)\n\n### Reporting a Comment\n\nIf an abusive comment is on another user's Repl, use the \"Report\" option to send it to a moderator for review. If a user posts an abusive comment on one of your Repls, you may hide or delete it to remove it from public view.\n![Reporting a Comment](https://replit-docs-images.util.repl.co/images/animations/report-comment.gif)\n\n### Reporting a Bounty\n\nReport a bounty by accessing the \"Report\" option on the bounty page. If you are the poster of a bounty, you can also report a bounty application that violates our rules in a similar way.\n![Reporting a Repl](https://replit-docs-images.util.repl.co/images/animations/report-bounty.gif)\n\n### Reporting a Theme\n\nReport a theme by accessing the \"Report\" option on the theme page. Themes should not be reported because of their appearance, but only because they contain content such as an offensive name that violates our rules.\n![Reporting a Repl](https://replit-docs-images.util.repl.co/images/animations/report-theme.gif)\n\n## Additional Information\n\nThis page contains an easy-to-read summary of information that is given in more detail in our other policy documents. If you would like more information, please consult these resources:\n\n- [Terms of service](https://replit.com/site/terms)\n- [Replit Ask terms of service](https://ask.replit.com/tos)\n- [Discord community code of conduct](https://code-of-conduct.discordmods.repl.co/)\n- [Privacy policy](https://replit.com/site/privacy)\n- [Copyright claims and takedown requests](/legal-and-security-info/copyright-claims-takedown-requests)","metadata":{"id":197}}],["198",{"pageContent":"# Usage Quota & Limits\n\nReplit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at https://replit.com/site/pricing and may be updated there from time to time Long periods of inactivity may result in an account or your use of the Service being deemed inactive.\n\n- CPU per Repl: determined by plan (hard)\n\n- RAM per Repl: determined by plan (hard)\n\n- Concurrent Repls: 20 (hard)\n\n- Storage per Repl: 1 GB (hard)\n\n- Storage per account: determined by plan (soft)\n\n- Network bandwidth: 100 GB (soft)","metadata":{"id":198}}],["199",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Always On\n\nRepls typically go to sleep after a period of inactivity. To make sure that your Repl is restarted, you can use the Always On Power Up.\n\nYou can add Always On to your Repls by purchasing [Cycles](https://replit.com/pricing) or by subscribing to our [Hacker plan](https://replit.com/site/pricing), which comes with one Always On Power Up.\n\n## What does Always On do?\n\nRepls ordinarily do not run unless someone presses the \"Run\" button or if [the Repl receives HTTP traffic](/hosting/deploying-http-servers). Always On runs your Repl when neither of those occur. When running your Repl, Always On will install packages and apply [your Run button configuration](/repls/dot-replit).\n\nAlways On does not extend your Repl's lifetime, and all Repls are subject to go to sleep at any time. However, Always On will immediately run your Repl again whenever this happens. If your process exits on its own, Always On will not restart it. We recommend using [Replit Database](/hosting/database-faq) to persist information outside of your process.\n\n## Enabling Always On\n\nYou can toggle on Always On from your Repl. To enable it:\n\n1. Navigate to your Repl\n2. Open the info panel by clicking on your Repl's name in the navbar\n3. Enable Always On by pressing the toggle\n\n![Screenshot of Always On toggle](https://replit-docs-images.util.repl.co/images/repls/always-on-toggle.png)\n\nOnce you've enabled Always On, your Repl will restart whenever it goes to sleep.","metadata":{"id":199}}],["200",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Boosts\n\nIf you want to make your Repls more powerful, you can use the Boost Power Up to increase the number of vCPUs and how much RAM your Repl has.\n\nAll Repls come with **0.5 vCPU and 0.5 GB RAM**.\n\nThe [Hacker plan](https://replit.com/site/pricing) comes with one **4x Boost (2 vCPUs + 2GB RAM)** you can use on any of your Repls and a **Coding Boost** that applies a **4x Boost (2 vCPU + 2GB RAM)** to the Workspace you are actively coding in.\n\nYou can also boost any of your Repls up to **32x (16 vCPUs + 16GB RAM)** with [Cycles](/cycles/about-cycles).\n\n## Boosting your Repl\n\nYou can Boost your Repl from inside the Workspace. To activate a Boost:\n\n1. Navigate to your Repl\n2. Open the info panel by clicking on your Repl's name in the navbar\n3. Open the Boost selection menu by pressing the toggle\n   ![Screenshot of Boost toggle](https://replit-docs-images.util.repl.co/images/power-ups/boosts.png)\n4. Choose one of the options in the Boost selection menu\n   ![Screenshot of Boost toggle](https://replit-docs-images.util.repl.co/images/power-ups/boosts-menu.png)\n5. Press the Activate button\n\nYour Repl is now boosted!","metadata":{"id":200}}],["201",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Complete Code\n\nGhostwriter is a code completion tool that provides suggestions based on the code in your current file. To use it, simply start coding and the suggestions will appear inline.\n\n## Features\n\n- Code completion suggestions based on your current file\n- Enhanced suggestions by using code comments\n- Prompt engineering for improved results\n- Toggle code completion on or off in editor settings\n\n## How to Use\n\n1. Start coding in your file and Ghostwriter will provide code completion suggestions.\n2. Use code comments to provide additional context for more accurate suggestions.\n3. Write clean, relevant code and comments for the best results from Ghostwriter.\n4. If desired, toggle Ghostwriter on or off in the editor settings.\n\n## Examples\n\nHere is an example of Ghostwriter providing basic code completion suggestions:\n\n![ghostwriter basic code generation](https://replit-docs-images.util.repl.co/images/ghostwriter/gw-generation-basic.gif)\n\nAnd here is an example of Ghostwriter using code comments to generate more accurate suggestions:\n\n![ghostwriter basic code generation](https://replit-docs-images.util.repl.co/images/ghostwriter/gw-generation-smart.gif)\n\n## Prompt Engineering\n\nGood prompts for AI code helpers like Ghostwriter can greatly improve the tool's performance and usefulness. Here are some examples of original prompts and improved versions that provide more context and detail:\n\n| Original Prompt                                      | Improved Prompt                                                                                                        | Possible AI Confusion                                                                                                                                  |","metadata":{"id":201}}],["202",{"pageContent":"| ---------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `// write a function that adds two numbers together` | `// a function that returns the sum of two numbers`                                                                    | Ghostwriter might get confused with what to do with the added numbers. In the original prompt, no steps are specified with what to do with the result. |\n| `// event listener`                                  | `// 'ready' event listener`                                                                                            | Ghostwriter will not know what to write next if only 'event listener' is specified.                                                                    |\n| `// fetch a random image from unsplash`              | `// use axios to fetch a random image from the unsplash api`                                                           | Ghostwriter might accidentally provide a URL instead of actually making the api call.                                                                  |\n| `/* apply a custom style to my checkbox */`          | `/* select all html elements with the .checkbox class and use labels and pseudo-elements to give it a custom style */` | Ghostwriter will most likely get confused selecting the checkbox element.                                                                              |\n| `// create an array of numbers`                      | `// create an array of numbers from 0 to 10`                                                                           | Ghostwriter might not know which numbers to include in the array without more specific instructions.                                                   |","metadata":{"id":202}}],["203",{"pageContent":"| `// sort the list of names`                          | `// sort the list of names alphabetically`                                                                             | Ghostwriter might not know the desired sorting order without more specific instructions.                                                               |\n| `// read data from the file`                         | `// read data from the file 'data.txt'`                                                                                | Ghostwriter might not know which file to read without a specific filename.                                                                             |\n| `// connect to the database`                         | `// connect to the MySQL database using the 'mysql' library`                                                           | Ghostwriter might not know which database to connect to or which library to use.                                                                       |\n| `// loop through the list`                           | `// loop through the list of numbers and print each one`                                                               | Ghostwriter might not know what to do with the list items without specific instructions.                                                               |\n| `// insert a new record`                             | `// insert a new record into the 'users' table`                                                                        | Ghostwriter might not know which table to insert into without a specific table name.                                                                   |\n\n## Toggling Code Completion\n\nTo deactivate Ghostwriter's Code Completion feature, go to your editor settings and switch Ghostwriter on or off.\n\n![toggle code completion](https://replit-docs-images.util.repl.co/images/ghostwriter/toggle-gw.png)","metadata":{"id":203}}],["204",{"pageContent":"---\nsidebar_position: 7\n---\n\n# Comparing Github Copilot and Replit Ghostwriter\n\nIn this doc, we'll be comparing Github Copilot and [Replit Ghostwriter](https://replit.com/site/ghostwriter). We'll go over how each works, available features, pricing, and more. Much of the information for Github Copilot in this doc was pulled from Github's Copilot marketing page and their associated docs.\n\n## What is Ghostwriter?\n\nGhostwriter is more than just an AI pair programmer. It is Replit’s suite of artificial intelligence features which include: Complete Code, Generate Code, Transform Code, and Explain Code. Complete Code is our flagship feature and it offers autocomplete-style suggestions as you code.\n\n## What is Github Copilot\n\nGitHub Copilot is an AI pair programmer. It offers autocomplete-style suggestions as you code. You can receive suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do.\n\n## How does Ghostwriter work?\n\nGhostwriter returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Ghostwriter considers what you type and other context from your Repl like the programming language you're using.\n\n## How does Github Copilot work?\n\nGitHub Copilot analyzes the context in the file you are editing, as well as related files, and offers suggestions from within your text editor. GitHub Copilot is powered by OpenAI Codex, a new AI system created by OpenAI.\n\n## What are Ghostwriter's features?\n\n**Complete Code** - Ghostwriter leverages context to provide code suggestions as you're typing. Press `tab` to accept suggestions.\n\n<video controls width=\"80%\" loop src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/221029_GW_JS_Demo.mp4\" type=\"video/mp4\">\n</video>\n\n**Generate Code** - Provide a natural language prompt, and let Ghostwriter generate code to help solve your problem.","metadata":{"id":204}}],["205",{"pageContent":"</video>\n\n**Generate Code** - Provide a natural language prompt, and let Ghostwriter generate code to help solve your problem.\n\n<video controls width=\"80%\" loop src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/generate_code.mp4\" type=\"video/mp4\">\n</video>\n\n**Explain Code** - Highlight code, and Ghostwriter will walk through it step-by-step in plain English. This feature is especially useful when trying to understand other people's code or code you wrote in the past.\n\n<video controls width=\"80%\" loop src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/explain_code.mp4\" type=\"video/mp4\">\n</video>\n\n**Transform Code** - Transform Code allows users to highlight blocks of code, describe the adjustments needed (like changing variable names), and Ghostwriter will provide a suggested rewrite of the code block.\n\n<video controls width=\"80%\" loop src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/transform_code.mp4\" type=\"video/mp4\">\n</video>\n\n## What are Github Copilot's features?\n\nCopilot offers two main features: autocomplete-style suggestions and generating code through natural language comments. Both features are used to generate code or entire functions in real-time. Copilot also integrates into multiple editors including Visual Studio, VS code, & Neovim.\n\n## How much does Replit Ghostwriter cost?\n\nCurrently, Ghostwriter costs 1,000 Cycles per month ($10 USD/month). Feel free to visit our [Ghostwriter marketing page](https://replit.com/site/ghostwriter) to upgrade and see more live examples of Ghostwriter in action.\n\n## How much does Github Copilot cost?\n\nGitHub Copilot is available as a monthly and yearly subscription. The monthly subscription is $10 per calendar month and the yearly subscription is $100 per year.","metadata":{"id":205}}],["206",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Explain Code\n\nGhostwriter can give you step-by-step natural language explanations of your code with Explain Code. This feature is especially useful when trying to understand other people's code or code you wrote in the past.\n\nConsider this example from [100 Days of Code](https://replit.com/learn/100-days-of-python). Follow these steps:\n\n1. Select the block of code you want explained.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Explain_Code_Step_1.png\"\n   style=\"width: 70% !important;\" />\n2. Right-click in the editor to open up the context menu.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Explain_Code_Step_3.png\"\n   style=\"width: 70% !important;\" />\n3. Select `Explain code` from the context menu and wait for Ghostwriter to generate an explanation for the code you selected.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Explain_Code_Step_4.png\"\n   style=\"width: 70% !important;\" />\n4. Once your explanation has been generated, you'll see a step-by-step walkthrough of the code you selected.\n5. If the explanation wasn't helpful, you can have Ghostwriter try again by pressing the `Generate new feedback` button.\n6. You can also help Ghostwriter improve by telling us whether it was a good explanation, and/or pressing the `Share feedback` button to provide written details.","metadata":{"id":206}}],["207",{"pageContent":"---\nsidebar_position: 6\n---\n\n# FAQ\n\n## General\n\n### What is Ghostwriter?\n\nGhostwriter is Replit’s suite of artificial intelligence features: Complete Code (our flagship feature), Generate Code, Transform Code, and Explain Code. Together, they enhance your development experience on Replit.\n\n### How does Ghostwriter work?\n\nGhostwriter returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Ghostwriter considers what you type and other context from your Repl like the programming language you're using.\n\n### How much does Ghostwriter cost?\n\nCurrently, Ghostwriter costs 1,000 [Cycles]/cycles/about-cycles) per month ($10 USD/month). You can find more pricing details on our [pricing page](https://replit.com/pricing).\n\n### Which programming languages does Ghostwriter support?\n\nGhostwriter performs best with JavaScript and Python code, but it supports 16 languages in total. The current list:\n\n- Bash\n- C\n- C#\n- C++\n- CSS\n- Go\n- Java\n- JavaScript\n- HTML\n- PHP\n- Perl\n- Python\n- R\n- Ruby\n- Rust\n- SQL\n- TypeScript\n\nNote: effectiveness may vary by language.\n\n### Can I turn off Ghostwriter Complete Code?\n\nYes. You can turn off Ghostwriter Complete Code in the Replit workspace. See step-by-step guide [here]/ghostwriter/complete-code#turning-complete-code-on-and-off).\n\n### How can I cancel my Ghostwriter subscription?\n\nGo to the [Cycles page](https://replit.com/cycles) and you will see a toggle for Ghostwriter in the menu. Turn the toggle off to turn off your Ghostwriter subscription's auto-renewal. You will still have access to Ghostwriter's features until the date of your renewal.\n\nNote: cancelling your Ghostwriter does not turn off or change the amount of your Cycles Auto-Refill. To do that, see below:\n\n### How do I turn off or change the amount of my Cycles Auto-Refill?","metadata":{"id":207}}],["208",{"pageContent":"Note: cancelling your Ghostwriter does not turn off or change the amount of your Cycles Auto-Refill. To do that, see below:\n\n### How do I turn off or change the amount of my Cycles Auto-Refill?\n\nGo to the [Cycles page](https://replit.com/cycles), and press the `Edit Your Subscription on Stripe` button to turn off or change the amount of your Cycles Auto-Refill subscription:\n\n<img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/cycles-auto-refill-settings.png\" />\n\n### What is the difference between Generate and Complete Code?\n\nComplete Code actively provides suggestions in your workspace while you program in Replit. In contrast, for Generate Code, you select then prompt the feature with words describing the code you'd like.\n\nThe two features use different models. For more information on how each works, visit the [Complete Code]/ghostwriter/complete-code) and [Generate Code]/ghostwriter/generate-code) docs.\n\n### How good is Ghostwriter?\n\nGood! And we’re developing Ghostwriter to be faster, more powerful, and more accessible than any comparable offering. Our product features are constantly getting better and faster.\n\n### How can I help?\n\nUse Ghostwriter and share your feedback with Replit as you code. We also encourage you to report bugs, offensive output, code vulnerabilities, or unwanted data to our Support team at [replit.com/support](https://replit.com/support). Replit works and ships fast, takes trust and safety seriously, and we are committed to continually improving our products.\n\n### Can Ghostwriter be used on other platforms?\n\nGhostwriter is exclusive to Replit.\n\n## Privacy\n\n### Is code I write on Replit shared through Ghostwriter?\n\nGhostwriter will not share your code with other users. It currently is based on open-source large language models trained on public data.\n\n### Does Ghostwriter change my rights for code I write on Replit?","metadata":{"id":208}}],["209",{"pageContent":"### Does Ghostwriter change my rights for code I write on Replit?\n\nNo. As was the case before Replit launched Ghostwriter, code in public Repls is automatically subject to the MIT License. Check out [Licensing Information]/legal-and-security-info/licensing-info) for details. To check if a given Repl of yours is public or private, go to [My Repls](https://replit.com/repls).\n\n### What data is collected when I use Replit?\n\nTo work as an online development environment, Replit collects your interactions with the service and data that you input so we can display and run your software. Like any online service, we use this data so that we can provide and improve our services.\n\n### How can I report problems with code generated or suggested for me?\n\nCode generated or suggested for you may be incorrect, offensive or otherwise inappropriate. By reporting this, you can help us to improve our products. Click the “Share feedback” link at the bottom right of the Generate Code window to provide your feedback, or visit our [Support page](https://support-form.util.repl.co/) to provide your feedback. Please include a copy of the code that you wrote and the code suggestion or explanation that you received.\n\n### Where can I learn more about Replit privacy and data protection?\n\nFor more information about how Replit processes personal data, please see our [Privacy Policy](http://replit.com/privacy).","metadata":{"id":209}}],["210",{"pageContent":"---\nsidebar_position: 5\n---\n\n# Generate Code\n\nWith Generate Code, you can give Ghostwriter a natural language prompt, and Ghostwriter will return a block of code to fulfill the purpose. This feature can write large chunks of code at once, so it's useful when you want to write small programs or several related functions in one shot.\n\nTo use Generate Code, follow these steps:\n\n1. Right-click in the editor to open up the context menu\n   <img\n      src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Generate_Code_Step_2.png\" />\n2. Select `Generate code` from the menu\n   <img\n      src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Generate_Code_Step_3.png\" />\n3. Input a natural language prompt in the text field\n4. Press `Generate code`\n   <img\n      src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Generate_Code_Step_5.png\" />\n5. Ghostwriter will provide suggested code. From here, you can choose to:  \n   **A) Type a new prompt** - Refine your prompt and try again.  \n   **B) Generate** - If you want to try again with the current prompt, press `Generate` again.  \n   **C) Copy to clipboard** - Copy the code block, so you can paste wherever you want.  \n   **D) Insert in editor** - Paste the code directly into the editor where your cursor is.  \n   **E) Share feedback** - Don't like the suggestions? Help us improve by providing feedback.","metadata":{"id":210}}],["211",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Getting Started\n\nGhostwriter currently includes four features:\n\n**[Complete Code]/ghostwriter/complete-code)** - Ghostwriter's flagship feature. Ghostwriter leverages context to provide code suggestions as you're typing. Press `tab` to accept suggestions.\n\n**[Explain Code]/ghostwriter/explain-code)** - Highlight code, and Ghostwriter will walk through it step-by-step in plain English.\n\n**[Transform Code]/ghostwriter/transform-code)** - Transform Code allows users to highlight blocks of code, describe the adjustments needed (like changing variable names), and Ghostwriter will provide a suggested rewrite of the code block.\n\n**[Generate Code]/ghostwriter/generate-code)** - Provide a natural language prompt, and let Ghostwriter generate code to help solve your problem.\n\nYou can get access to these features with a Ghostwriter subscription for 1,000 [cycles]/cycles/about-cycles) ($10 USD) per month.\n\n## Activating Ghostwriter\n\nGhostwriter can be activated with [Cycles]/cycles/about-cycles).\n\nOnce your purchase cycles, you can activate Ghostwriter from A) the Cycles page or B) the workspace.\n\n### Activating Ghostwriter from the Cycles page\n\n1. Open the Cycles page from the sidebar menu or go to https://replit.com/cycles.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Purchase_Cycles_1.png\"\n   style=\"width: 70% !important;\" />\n2. Purchase cycles—you will need at least 1,000 to activate Ghostwriter.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Purchase_Cycles_2.png\"\n   style=\"width: 70% !important;\" />\n3. Once you complete checkout, there will be a section to \"Activate\" Ghostwriter.\n4. Jump into a Repl, and start programming with Ghostwriter!\n\n### Activating Ghostwriter from the workspace\n\n1. Open the Repl Info menu by clicking the name of your Repl in the header.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Purchase_Cycles_3.png\"\n   style=\"width: 70% !important;\" />","metadata":{"id":211}}],["212",{"pageContent":"<img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Purchase_Cycles_3.png\"\n   style=\"width: 70% !important;\" />\n2. Once the menu opens, you will see a section for Ghostwriter. Press the \"Learn More\" button.\n   <img\n   src=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Purchase_Cycles_4.png\"\n   style=\"width: 70% !important;\" />\n3. Select \"Subscribe to Ghostwriter\"\n4. Complete Stripe checkout (if you do not have any Cycles in your account).\n5. Jump back into the workspace and start programming with Ghostwriter!\n\nOnce you have access to Ghostwriter, all of its features will be enabled in the workspace the next time you code.\n\n## Toggling Ghostwriter on and off\n\nTo toggle Ghostwriter on and off, navigate to the Cycles page, which can be accessed from the sidebar menu or by going directly to https://replit.com/cycles.\n\nFrom there, you will have the ability to toggle Ghostwriter on and off (see below).\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/ghostwriter/Toggle_Cycles_1.png\"\nstyle=\"width: 70% !important;\" />","metadata":{"id":212}}],["213",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Transform Code\n\nWith Transform Code, Ghostwriter can refactor your code to run faster, translate it into another language, and make your code easier to read\n\nTo use Transform Code, follow these steps:\n\n1. Select the block of code you want to transform.\n   ![image](https://replit-docs-images.util.repl.co/images/ghostwriter/Transform_Code_Step_1.png)\n2. Right-click in the editor to open up the context menu.\n   ![image](https://replit-docs-images.util.repl.co/images/ghostwriter/Transform_Code_Step_3.png)\n3. Select `Transform code`.\n   ![image](https://replit-docs-images.util.repl.co/images/ghostwriter/Transform_Code_Step_4.png)\n4. Type a prompt for what you would like to change about the highlighted code block in the provided text field.\n5. Press `Transform`\n   ![image](https://replit-docs-images.util.repl.co/images/ghostwriter/Transform_Code_Step_6.png)\n6. Ghostwriter will provide a suggestion to transform your code. From here, you can choose to:  \n   **A) Type a new prompt** - Refine your prompt and try again.  \n   **B) Transform** - If you want to try again with the current prompt, press `Transform` again.  \n   **C) Copy to clipboard** - If you want to place this code somewhere other than what you highlighted, simply copy it to your clipboard.  \n   **D) Replace selection** - If you like the suggestion, click `Replace selection` to automatically substitute your highlighted code with Ghostwriter's suggestion.  \n   **E) Share feedback** - Don't like the suggestions? Help us improve by providing feedback.","metadata":{"id":213}}],["214",{"pageContent":"---\nsidebar_position: 4\n---\n\n# GPUs\n\nIf Boosts aren't enough, you can add GPUs to your Repls to make them even more powerful.\n\nGPUs enable your Repl to process more data, which can be helpful for machine learning, 3D graphics rendering, video encoding, and other resource-intensive tasks.\n\nYou can add a single, dedicated NVIDIA Tesla K80 GPU to any of your Repls with [Cycles](/cycles/about-cycles). The GPU will not be shared with any other Repls.\n\n## Adding a GPU to your Repl\n\nGPUs are currently in beta, and only available to Explorers. In order to add a GPU to your Repl from inside the Workspace, you'll need to [enable Explorer](/getting-started/faq#how-do-i-turn-on-explorer). To add a GPU:\n\n1. Navigate to your Repl.\n2. Open the info panel by selecting your Repl's name in the navbar:\n   ![Showing Repl info panel in the navbar](https://replit-docs-images.util.repl.co/images/power-ups/repl-information-page.png)\n3. Open the GPU menu using the toggle and confirm your selection:\n   ![Showing Repl info panel in the navbar](https://replit-docs-images.util.repl.co/images/power-ups/gpu-activate.png)\n\nYour Repl now has an NVIDIA Tesla K80 GPU!","metadata":{"id":214}}],["215",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Private Repls\n\nWith a free Replit account, personal Repls are public by default.\n\nAs an individual, you can make your Repls private by purchasing a Hacker plan that come with unlimited private Repls or by activating the unlimited private Repls Power Up with Cycles from the [My Cycles page](https://replit.com/cycles).\n\nTeams Pro accounts come with the ability to make any Team Repl private.\n\nPrivate Repls can only be accessed by directly invited guests or by team members.\n\n## Creating a private Repl\n\nYou can make a Repl private by toggling the Repl to Private when you're making a new Repl from a Template or forking an existing Repl.\n\n![Creating a Private Repl](https://replit-docs-images.util.repl.co/images/power-ups/private-create-repl.png)\n\n## Making an existing Repl private\n\n### From the Workspace\n\nYou can make any public Repl private by toggling it on from the Workspace.\n\n1. Navigate to your Repl\n2. Open the info panel by clicking on your Repl's name in the navbar\n3. Make your Repl private by pressing the Private toggle\n   ![Making a Repl private from the Workspace](https://replit-docs-images.util.repl.co/images/power-ups/private-workspace.png)\n\n### From the My Repls page\n\nYou can also make any of your public Repls private from the My Repls page.\n\n1. Navigate to the My Repls page from the left sidebar\n2. Hover over the \"Public\" copy on the card of the Repl you want to make private\n3. Press the \"Make private\" button\n   ![Making a Repl private from the My Repls page](https://replit-docs-images.util.repl.co/images/power-ups/private-my-repls.png)","metadata":{"id":215}}],["216",{"pageContent":"---\ntitle: Introduction to the Workspace\n---\n\n# Introduction to the Workspace\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/45e8cbc1586f49b5a9ef4a9416ef2a4b\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\nThe Workspace is like an IDE (Integrated Development Environment), providing a comprehensive set of development tools and features for creating, debugging, and managing your software. It helps you quickly and easily create, modify, and collaborate on your code.\n\n## How to create a Repl\n\nA Repl (derived from REPL—\"read-eval-print loop\") is an interactive programming environment where you can write and execute code in real-time. To create one, navigate to [Replit](https://replit.com) and click the **create** button in the sidebar.\n\n![create a Repl](https://replit-docs-images.util.repl.co/images/programming-ide/create-repl.gif)\n\nNext, give your Repl a name and choose the Template you want to use. You can also directly [import a GitHub repository](/category/using-git-on-replit).\n\nTo import a GitHub repository, read our docs [here](/category/using-git-on-replit).\n\n![name and choose template](https://replit-docs-images.util.repl.co/images/programming-ide/choose-lang.gif)\n\nCongratulations! You've just created a Repl!\n\n## The sidebar\n\nNavigate between files and folders easily using the file navigator in the sidebar. Repls come with syntax highlighting and autocompletion to make coding easier. And you can access helpful resources such as documentation from the Tools section for extra support.\n\n### The file tree","metadata":{"id":216}}],["217",{"pageContent":"### The file tree\n\nQuickly locate and access files in your project using the file tree, an organized navigation system that displays the hierarchical structure of your project with each file and folder clearly labeled. The file tree offers a comprehensive view of the structure of your project and lets you modify any file immediately.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/84129671e4fd4346b426b726609a7cae\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n### Tools\n\nYou can find Tools in the sidebar, like the Shell, Console, Secrets, and other helpful utilities for your Repl.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/2fe5ad5b4f644496be84986c088a566e\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n### Repl Resources\n\nMonitor your Repl's storage, memory, and processing capacity in real time using the Repl Resources section in the sidebar.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/294a292862504b8f962b2e4789bf67fb\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n## Tabs and panes\n\nFiles and Tools are displayed in the workspace using tabs and panes. A tab is a single file or tool, while a pane can contain multiple files and tools.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>","metadata":{"id":217}}],["218",{"pageContent":"<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/495838f6de3a42a890461572615ad48e\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n## Run your code\n\nTo execute your code, select the **Run** button. You can also use the Shell to run a custom command or modify the `.replit` file to alter the initial run command. Check out the [Configuring a Repl](/programming-ide/configuring-repl) doc to learn how to customize the way your Repl runs even further.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/086c8447bf234ca290ad11f0bbb2e13e\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n## The spotlight page\n\nThe spotlight page is how others can view and interact with your Repl.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/568fa9603a5546919e97b06695ea1da5\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n## Multiplayer\n\nReplit's multiplayer feature allows users to collaborate on code simultaneously in real-time.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%',\n  height: '0'\n}}>\n  <iframe src=\"https://www.loom.com/embed/9addef3f98584fefa07ef7a875e37440\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n---","metadata":{"id":218}}],["219",{"pageContent":"position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n<br/>\n\n---\n\nWith the basics of coding on Replit under your belt, you can quickly get started on your new project. To learn more about Workspace features, check out [this collection of docs](/category/workspace-features). If you're ready to dive in, check out the [Templates page](https://replit.com/templates) or follow along with one of our [tutorials](/tutorials/overview). If you need help, reach out to the [Replit community](https://ask.replit.com) or join the [Discord server](https://replit.com/discord) for more assistance.","metadata":{"id":219}}],["220",{"pageContent":"# Installing packages\n\nReplit will install most available Python and Javascript packages using [the universal package manager](https://blog.replit.com/upm).\n\n## Searching For and Adding Packages\n\nOn a Python or JavaScript Repl, you can search for a package to install by clicking on the <img\nsrc=\"https://replit-docs-images.util.repl.co/images/media/misc/libraries_hover.png\"\nstyle=\"height: 24;verticalAlign: text-bottom;width: 21;margin: 0 3px;display: inline-block\"/> icon on the sidebar in the workspace. Search for the package you want and select it to install the package or to view its documentation. Clicking on the \"Add Package\" icon will put it in a spec file and a lock file.\n\nUnless otherwise specified, your Repl will attempt to install the latest version of each package.\n\n## Direct Imports\n\nIf you would prefer to import directly, you can do that too (though we recommend using the Package Manager):\n\nPython:\n\n```python\nimport flask\n```\n\nJavaScript:\n\n```javascript\nconst express = require(\"express\");\n```\n\nThis will install the latest version of the package into your Repl. A spec file and lock file will be created so the versions won't change. Wherever possible, we recommend using a file to manage dependencies.\n\n### Guessing Failures\n\nWhen you add a package by importing, we guess what package you want based on the modules you are importing. This works well for most languages, but in Python we sometimes get it wrong. If that happens, you can request a specific package on the import line.\n\n```python\nimport twitter #upm package(python-twitter)\n```\n\nYou can configure additional options for package guessing by reading about the [.replit](/programming-ide/configuring-repl) file.\n\n## Spec Files\n\nEach language has a file that is used to describe the project's required packages:\n\n- Python: `pyproject.toml`\n- JavaScript (Node.js): `package.json`\n\n### Python\n\nIn a `pyproject.toml` file, you list your packages along with other details about your project. For example, consider the following snippet from `pyproject.toml`:\n\n```\n...","metadata":{"id":220}}],["221",{"pageContent":"### Python\n\nIn a `pyproject.toml` file, you list your packages along with other details about your project. For example, consider the following snippet from `pyproject.toml`:\n\n```\n...\n[tool.poetry.dependencies]\npython = \"^3.8\"\nflask = \"^1.1\"\n...\n```\n\nThis will tell the packager that your project requires at least Python version 3.8, and to install the flask package at version 1.1.\n\n### JavaScript\n\nNote that `package.json` files are only for Nodejs/Express Repls (they do not work in HTML/CSS/JS Repls). A `package.json` file contains more information about the project, but also lists the dependencies. As an example, here is the `package.json` file you can include in a\n[Nodejs/Express template](https://replit.com/languages/nodejs):\n\n```json\n{\n  \"name\": \"app\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"latest\",\n    \"body-parser\": \"latest\",\n    \"sqlite3\": \"latest\"\n  }\n}\n```\n\nAll the packages will be installed with the latest version. If you need a specific version number, you can replace \"latest\" with that version number or precede a version number with a carat `^` to indicate \"this version or newer\". For example:\n\n```json\n  \"dependencies\": {\n    \"express\": \"^4.16.3\",\n    \"body-parser\": \"latest\",\n    \"sqlite3\": \"3.1.12\"\n  }\n```\n\nThis will install `express` at version 4.16.3 or newer, `body-parser` at the latest version, and `sqlite3` at exactly version 3.1.12.","metadata":{"id":221}}],["222",{"pageContent":"# Configuring a Repl\n\nEvery new repl comes with a `.replit` and a `replit.nix` file that let you configure your repl to do just about anything in any language!\n\nIn most repls, these files are hidden by default. But you can find them easily by clicking the three dot menu in the file tree, and selecting _Show hidden files_.\n\n![Showing the .replit file](https://replit-docs-images.util.repl.co/images/animations/dotreplit.gif)\n\n## `replit.nix`\n\nEvery new repl is now a Nix repl, which means you can install any package available on Nix, and support any number of languages in a single repl. You can search for a list of available packages [here](https://search.nixos.org/packages).\n\nThe `replit.nix` file should look something like the example below. The `deps` array specifies which Nix packages you would like to be available in your environment.\n\n```nix\n{ pkgs }: {\n    deps = [\n        pkgs.cowsay\n    ];\n}\n```\n\n### Learn More About Nix\n\nIf you'd like to learn more about Nix, here are some great resources:\n\n#### Written Guides\n\n- [Getting started with Nix](/programming-ide/getting-started-nix) — Our own getting started guide\n- [Building with Nix on Replit](/tutorials/build-with-nix) — Deploy a production web stack on Replit with Nix\n- [Nix Pills](https://nixos.org/guides/nix-pills/) — Guided introduction to Nix\n- [Nix Package Manager Guide](https://nixos.org/manual/nix/stable/) — A comprehensive guide of the Nix Package Manager\n- [A tour of Nix](https://nixcloud.io/tour) — Learn the nix language itself\n\n#### Video Guides\n\n- [Nixology](https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs) - A series of videos introducing Nix in a practical way\n- [Taking the Nix pill](https://www.youtube.com/watch?v=QwLWIy2KleE) — An introduction to what Nix is, how it works, and a walkthrough of publishing several new languages to Replit within an hour.\n\n* [Nix: A Deep Dive](https://www.youtube.com/watch?v=TsZte_9GfPE) — A deep dive on Nix: what Nix is, why you should use it, and how it works.","metadata":{"id":222}}],["223",{"pageContent":"* [Nix: A Deep Dive](https://www.youtube.com/watch?v=TsZte_9GfPE) — A deep dive on Nix: what Nix is, why you should use it, and how it works.\n* [Replit Pro: All things Nix](https://www.youtube.com/watch?v=q5paXmDbk7o) - What is Nix? How does it work? We'll look at setting up your ideal dev environment with packages galore, all without encroaching on your storage space.\n\n## `.replit`\n\nThe `.replit` file allows you to configure many options for your repl, most basic of which is the `run` command.\n\nCheck out how the repl below is using `.replit` to print \"hello world\" instead of running the code:\n\n<iframe width=\"100%\" height=\"500px\" src=\"https://replit.com/@turbio/dotreplit-example?lite=true\" scrolling=\"no\" frameBorder=\"no\" allowTransparency=\"true\" allowFullScreen=\"true\"   style='margin-bottom: 10px;' sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" />\n\nHere's a video on how to use both the `.replit` file and the `replit.nix` file to run multiple languages in a repl as well as a video game.\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe src=\"https://www.loom.com/embed/6fd286c2f5124c8aa2cae7ce2f2d624a\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute;top: 0;left: 0;width: 100%;height: 100%\"></iframe>\n</div>\n\n<br/>\n\n`.replit` files follow the [toml configuration format](https://learnxinyminutes.com/docs/toml/) and look something like this:\n\n```toml\n# The command that is executed when the run button is clicked.\nrun = [\"cargo\", \"run\"]\n\n# The default file opened in the editor.\nentrypoint = \"src/main.rs\"\n\n# Setting environment variables\n[env]\nFOO=\"foo\"\n\n# Packager configuration for the Universal Package Manager\n# See https://github.com/replit/upm for supported languages.\n[packager]\nlanguage = \"rust\"\n\n  [packager.features]\n  # Enables the package search sidebar\n  packageSearch = true\n  # Enabled package guessing\n  guessImports = false\n\n# Per language configuration: language.<lang name>","metadata":{"id":223}}],["224",{"pageContent":"language = \"rust\"\n\n  [packager.features]\n  # Enables the package search sidebar\n  packageSearch = true\n  # Enabled package guessing\n  guessImports = false\n\n# Per language configuration: language.<lang name>\n[languages.rust]\n# The glob pattern to match files for this programming language\npattern = \"**/*.rs\"\n\n    # LSP configuration for code intelligence\n    [languages.rust.languageServer]\n    start = [\"rust-analyzer\"]\n```\n\nIn the code above, the strings in the array assigned to `run` are executed in order in the shell whenever you hit the \"Run\" button.\n\nThe `language` configuration option helps the IDE understand how to provide features like [packaging](https://blog.replit.com/upm) and [code intelligence](https://blog.replit.com/intel).\n\nAnd the `[languages.rust]` `pattern` option is configured so that all files ending with `.rs` are treated as Rust files. The name is user-defined and doesn't have any special meaning, we could have used `[languages.rs]` instead.\n\nWe can now set up a language server specifically for Rust. Which is what we do with the next configuration option: `[languages.rust.languageServer]`. [Language servers](https://microsoft.github.io/language-server-protocol/#:~:text=A%20Language%20Server%20is%20meant,servers%20and%20development%20tools%20communicate.) add smart features to your editor like code intelligence, go-to-definition, and documentation on hover.\n\nSince repls are fully configurable, you're not limited to just one language. For example, you could install Clojure and its language server using `replit.nix`, add a `[languages.clojure]` configuration option to the above `.replit` file that matched all Clojure files and have code intelligence enabled for both languages in the same repl.\n\n## `.replit` reference","metadata":{"id":224}}],["225",{"pageContent":"## `.replit` reference\n\nA `Command` can either be a string or a list of strings. If the `Command` is a string (`\"node index.js\"`), it will be executed via `sh -c \"<Command>\"`. If the Command is a list of strings (`[\"node\", \"index.js\"]`), it will be directly executed with the list of strings passed as arguments. When possible, it is preferred to pass a list of strings.\n\n---\n\n### `run`\n\n**Type:** `Command`\n\nThe command to run the repl. It has lower precedence than the `[interpreter] command` (i.e. if `[interpreter] command` is set, it will run instead of the `run` command).\n\n---\n\n### `entrypoint`\n\n**Type:** `string`\n\nThe name of the main file including the extension. This is the file that will be run, and shown by default when opening the editor.\n\n---\n\n### `onBoot`\n\n**Type:** `Command`\n\nThe command that executes after your repl has booted.\n\n---\n\n### `compile`\n\n**Type:** `Command`\n\nThe shell command to compile the repl before the `run` command. Only for compiled languages like C, C++, and Java.\n\n---\n\n### `audio`\n\n**Type:** `boolean`\n\nEnables [system-wide audio](/programming-ide/workspace-features/playing-audio-replit) for the repl when configured to `true`.\n\n---\n\n### `language`\n\n**Type:** `string`\n\nDuring a GitHub import, this tells the workspace which language should be used when creating the repl. For new repls, this option will always be Nix, so this field should generally not be touched.\n\n---\n\n### `hidden`\n\n**Type:** `[string]`\n\nA list of files or folders to hide by default in the side filetree. These filepaths are still accessible through clicking the three dot menu in the file tree, and selecting _Show hidden files_.\n\n---\n\n### `[env]`\n\nSet environment variables. Don't put secrets here—use the Secrets tab in the left sidebar.\n\n**Example:**\n\n```toml\n[env]\nVIRTUAL_ENV = \"/home/runner/${REPL_SLUG}/venv\"\nPATH = \"${VIRTUAL_ENV}/bin\"\nPYTHONPATH=\"${VIRTUAL_ENV}/lib/python3.8/site-packages\"\n```\n\n---\n\n### `interpreter`\n\nSpecifies the interpreter, which should be a compliant [prybar binary](https://github.com/replit/prybar).\n\n#### `command`","metadata":{"id":225}}],["226",{"pageContent":"PYTHONPATH=\"${VIRTUAL_ENV}/lib/python3.8/site-packages\"\n```\n\n---\n\n### `interpreter`\n\nSpecifies the interpreter, which should be a compliant [prybar binary](https://github.com/replit/prybar).\n\n#### `command`\n\n**Type:** `[string]`\n\nThis is the command that will be run to start the interpreter. It has higher precedence than the `run` command (i.e. `interpreter` command will run instead of the `run` command).\n\n#### `prompt`\n\n**Type:** `[byte]`\n\nThis is the prompt used to detect running state, if unspecified it defaults to `[0xEE, 0xA7]`.\n\n---\n\n### `[unitTest]`\n\nEnables unit testing to the repl.\n\n#### `language`\n\n**Type:** `string`\n\nThe language you want the unit tests to run. Supported strings: `java`, `python`, and `nodejs`.\n\n---\n\n### `[packager]`\n\n**Description:** Package management configuration. Learn more about installing packages [here](/repls/packages/#DirectImports).\n\n#### `afterInstall`\n\n**Type:** `Command`\n\nThe command that is executed after a new package is installed.\n\n#### `ignoredPaths`\n\n**Type:** `[string]`\n\nList of paths to ignore while attempting to guess packages.\n\n#### `ignoredPackages`\n\n**Type:** `[string]`\n\nList of modules to never attempt to guess a package for, when installing packages.\n\n#### `language`\n\n**Type:** `string`\n\nSpecifies the language to use for package operations. See available languages in the [Universal Package Manager](https://github.com/replit/upm) repository.\n\n#### `[packager.features]`\n\nUPM features that are supported by the specified languages.\n\n##### `packageSearch`\n\n**Type:** Boolean\n\nWhen set to `true`, enables a package search panel in the sidebar.\n\n##### `guessImports`\n\n**Type:** Boolean\n\nWhen set to `true`, UPM will attempt to guess which packages need to be installed prior to running the repl.\n\n##### `enabledForHosting`\n\n**Type:** Boolean\n\nSets whether hosting the Repl requires running the packager before the Repl.\n\n---\n\n### `[languages.<language name>]`\n\nPer-language configuration. The language name has no special meaning other than to allow multiple languages to be configured at once.\n\n#### `pattern`","metadata":{"id":226}}],["227",{"pageContent":"---\n\n### `[languages.<language name>]`\n\nPer-language configuration. The language name has no special meaning other than to allow multiple languages to be configured at once.\n\n#### `pattern`\n\n**Type:** `string`\n\nA [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>) used to identify which files belong to this language configuration (`**/*.js`)\n\n#### `[languages.<language name>.languageServer]`\n\nConfiguration for setting up [LSP](https://microsoft.github.io/language-server-protocol/) for this language. This allows for code intelligence (autocomplete, underlined errors, etc...).\n\n##### `start`\n\n**Type:** `Command`\n\nThe command used to start the LSP server for the specified language.\n\n---\n\n### `[[hints]]`\n\n**Type:** `{RegEx, string}`\n\nSet hints to display in the Shell alongside your output. You can have any number of hints in a Repl.\n\nEach hint is made up of a `regex` and a `message`. The `regex` is a [regular expression](https://replit.com/talk/learn/The-Basics-of-Regex/34316) that searches through your output. If a match is found, the `message` is printed to the Shell.\n\n**Example:**\n\n```toml\n[[hints]]\nregex = \"ERROR\"\nmessage = \"Something went wrong.\"\n\n[[hints]]\nregex = \"exit status [12]\"\nmessage = \"Bad exit code, an error occurred.\"\n```\n\n---\n\n### `[nix]`\n\nWhere you specify a [Nix channel](https://nixos.wiki/wiki/Nix_channels).\n\n#### `channel`\n\n**Type:** `string`\n\nA nix channel id.\n\n---\n\n### `[debugger]`\n\nConfigures the debugger panel. See the advanced examples below for reference configurations.\n\n<details id=\"debugger-docstrings\"><summary>See field types and docstrings</summary>\n\nThese are the Go types our backend uses to configure the debugger.\n\n```go\n// DebuggerConfig holds information necesary to run a language's debugger,\n// potentially through a debug adapter that follows the\n// https://microsoft.github.io/debug-adapter-protocol/\ntype DebuggerConfig struct {\n        // Support indicates whether this debugger is supported by debugproxy.\n        Support bool `json:\"support,omitempty\" toml:\"support\"`","metadata":{"id":227}}],["228",{"pageContent":"type DebuggerConfig struct {\n        // Support indicates whether this debugger is supported by debugproxy.\n        Support bool `json:\"support,omitempty\" toml:\"support\"`\n\n\t// If specified, then this overrides the main Compile config.\n\tCompile *CompileConfig `json:\"compile,omitempty\" toml:\"compile\"`\n\n\t// DAPConfig (see below) is the configuration needed for interactive\n    // debugging through an adapter that implements the DAP.\n\tInteractive *DAPConfig `json:\"interactive,omitempty\" toml:\"interactive\"`\n\n\t// TimeTravel is the configuration needed for time-travel debugging through\n\t// an adapter that implements the DAP.\n\tTimeTravel *struct {\n\t\t// Record is the command needed to run and record an execution.\n\t\tRecord Command `json:\"record\" toml:\"record\"`\n\n\t\t// Debug is the configuration of a DAP-compliant adapter that can be\n\t\t// invoked to replay a pre-recorded execution.\n\t\tDebug DAPConfig `json:\"debug\" toml:\"debug\"`\n\t} `json:\"timeTravel,omitempty\" toml:\"timeTravel\"`\n\n\t// ⚠️ Below are legacy options, prefer to use the `Interactive` field instead.\n\n\t// DAPTransport indicates how the adapter exposes the DAP communication\n\t// channel to the debugproxy. Valid values are \"stdio\" and something that Go\n\t// accepts as an argument to `net.Dial()`.\n\tDAPTransport string `json:\"dapTransport,omitempty\" toml:\"dapTransport\"`\n\n\t// DAPConnectTimeout is the number of seconds that the debugproxy will wait\n\t// for the port to be available before declaring the initialization failed.\n\t// Defaults to 15s.\n\tDAPConnectTimeout int64 `json:\"dapConnectTimeout,omitempty\" toml:\"dapConnectTimeout\"`\n\n\t// DAPIntegratedAdapter indicates that the runtime environment that runs the\n\t// debugee is the same one that runs the adapter. This means that the TTY\n\t// should be attached to the runtime, and the DAP will be eposed through a\n\t// separate channel.\n\tDAPIntegratedAdapter *DAPIntegratedAdapterConfig `json:\"dapIntegratedAdapter,omitempty\" toml:\"dapIntegratedAdapter\"`\n\n\t// DAPStartCommand is the shell command needed to start the debug adapter.","metadata":{"id":228}}],["229",{"pageContent":"DAPIntegratedAdapter *DAPIntegratedAdapterConfig `json:\"dapIntegratedAdapter,omitempty\" toml:\"dapIntegratedAdapter\"`\n\n\t// DAPStartCommand is the shell command needed to start the debug adapter.\n\t// Used as is.\n\tDAPStartCommand *Command `json:\"dapStartCommand,omitempty\" toml:\"dapStartCommand\"`\n\n\t// DAPInitializeMessage is the initialize message for the Debug Adapter\n\t// Protocol. Sent as-is.\n\tDAPInitializeMessage map[string]interface{} `json:\"dapInitializeMessage,omitempty\" toml:\"dapInitializeMessage\"`\n\n\t// DAPLaunchMessage is the launch/attach message for the Debug Adapter\n\t// Protocol. Sent as-is.\n\tDAPLaunchMessage map[string]interface{} `json:\"dapLaunchMessage,omitempty\" toml:\"dapLaunchMessage\"`\n}\n\n// DAPConfig holds the information necessary to run a language's debugger through\n// the a debug adapter that follows the\n// https://microsoft.github.io/debug-adapter-protocol/\ntype DAPConfig struct {\n\t// Transport indicates how the adapter exposes the DAP communication\n\t// channel to the debugproxy. Valid values are \"stdio\" and something that Go\n\t// accepts as an argument to `net.Dial()`.\n\tTransport string `json:\"transport\" toml:\"transport\"`\n\n\t// ConnectTimeout is the number of seconds that the debugproxy will wait\n\t// for the port to be available before declaring the initialization failed.\n\t// Defaults to 15s.\n\tConnectTimeout int64 `json:\"connectTimeout,omitempty\" toml:\"connectTimeout\"`\n\n\t// IntegratedAdapter indicates that the runtime environment that runs the\n\t// debugee is the same one that runs the adapter. This means that the TTY\n\t// should be attached to the runtime, and the DAP will be eposed through a\n\t// separate channel.\n\tIntegratedAdapter *DAPIntegratedAdapterConfig `json:\"integratedAdapter,omitempty\" toml:\"integratedAdapter\"`\n\n\t// StartCommand is the shell command needed to start the debug adapter.\n\t// Used as is.\n\tStartCommand Command `json:\"startCommand,omitempty\" toml:\"startCommand\"`\n\n\t// InitializeMessage is the initialize message for the Debug Adapter\n\t// Protocol. Sent as-is.","metadata":{"id":229}}],["230",{"pageContent":"// Used as is.\n\tStartCommand Command `json:\"startCommand,omitempty\" toml:\"startCommand\"`\n\n\t// InitializeMessage is the initialize message for the Debug Adapter\n\t// Protocol. Sent as-is.\n\tInitializeMessage map[string]interface{} `json:\"initializeMessage,omitempty\" toml:\"initializeMessage\"`\n\n\t// LaunchMessage is the launch/attach message for the Debug Adapter\n\t// Protocol. Sent as-is.\n\tLaunchMessage map[string]interface{} `json:\"launchMessage,omitempty\" toml:\"launchMessage\"`\n}\n```\n\n</details>\n\n---\n\n### `[[ports]]`\n\n**Type:** `{localPort, externalPort}`\n\nThe ports configuration section allows publicly exposing multiple HTTP web servers at the same time. By default any web\nserver that starts listening on any port on `0.0.0.0` will be exposed at `https://<repl name>.<username>.repl.co/`, but\nyou may want to expose additional, auxilarily servers. For example, some web frameworks use an extra server for\nhandling hot reloading.\n\nAn extra server can be exposed by adding a new `[[ports]]` entry to your `.replit` file. You must specify a `localPort`\nand `externalPort`. The `localPort` is the port that your server is listening on inside the repl. The `externalPort` is\nthe port that can be used to access the server publicly at `https://<repl name>.<username>.repl.co:<external port>`.\n\nCurrently only ports `5900`, `8099`, `9000` are allowed as the `externalPort`. Please\n[contact support](https://replit.com/support) if you would like additional ports to be added.\n\n**Example:**\n\n```toml\n[[ports]]\nlocalPort = 4000\nexternalPort = 8099\n\n[[ports]]\nlocalPort = 9000\nexternalPort = 9000\n```\n\n## Examples\n\n### Beginner\n\n#### [LaTeX](https://replit.com/@ZachAtReplit/LaTeX?v=1#.replit)\n\n```toml\ncompile = [\"pdflatex\", \"-halt-on-error\", \"main.tex\"]\nrun = [\"sh\", \"runner.sh\"]\n\nhidden = [\"*.aux\", \"*.log\", \"index.html\", \"runner.sh\", \"nohup.out\"]\n\n[languages.latex]\npattern = \"**/*.tex\"\n\n[languages.latex.languageServer]\nstart = \"texlab\"\n\n[nix]\nchannel = \"stable-21_11\"\n```\n\n#### [Clojure](https://replit.com/@replit/Clojure?v=1#.replit)\n\n```toml","metadata":{"id":230}}],["231",{"pageContent":"[languages.latex]\npattern = \"**/*.tex\"\n\n[languages.latex.languageServer]\nstart = \"texlab\"\n\n[nix]\nchannel = \"stable-21_11\"\n```\n\n#### [Clojure](https://replit.com/@replit/Clojure?v=1#.replit)\n\n```toml\nrun = \"clojure -M main.clj\"\n\nentrypoint = \"main.clj\"\n\n[env]\nCLJ_CONFIG = \"/home/runner/.clojure\"\n\n[languages.clojure]\npattern = \"**/*.clj\"\n\n[languages.clojure.languageServer]\nstart = [\"clojure-lsp\"]\n```\n\n### Advanced\n\n##### [Python](https://replit.com/@replit/Python?v=1)\n\n```toml\n# The command that runs the program. It is commented out because [interpreter] configuration option is set.\n# run = [\"python3\", \"main.py\"]\n# The primary language of the repl. There can be others, though!\nlanguage = \"python3\"\n# The main file, which will be shown by default in the editor.\nentrypoint = \"main.py\"\n# A list of globs that specify which files and directories should\n# be hidden in the workspace.\nhidden = [\"venv\", \".config\", \"**/__pycache__\", \"**/.mypy_cache\", \"**/*.pyc\"]\n\n# Specifies which nix channel to use when building the environment.\n[nix]\nchannel = \"stable-21_11\"\n\n# Per-language configuration: python3\n[languages.python3]\n# Treats all files that end with `.py` as Python.\npattern = \"**/*.py\"\n\n  # The command needed to start the Language Server Protocol. For\n  # linting and formatting.\n  [languages.python3.languageServer]\n  start = [\"pyls\"]\n\n# The command to start the interpreter.\n[interpreter]\n  [interpreter.command]\n  args = [\n    \"stderred\",\n    \"--\",\n    \"prybar-python3\",\n    \"-q\",\n    \"--ps1\",\n    \"\\u0001\\u001b[33m\\u0002\\u0001\\u001b[00m\\u0002 \",\n    \"-i\",\n  ]\n  env = { LD_LIBRARY_PATH = \"$PYTHON_LD_LIBRARY_PATH\" }\n\n# The environment variables needed to correctly start Python and use the\n# package proxy.\n[env]\nVIRTUAL_ENV = \"/home/runner/${REPL_SLUG}/venv\"\nPATH = \"${VIRTUAL_ENV}/bin\"\nPYTHONPATH=\"${VIRTUAL_ENV}/lib/python3.8/site-packages\"\nREPLIT_POETRY_PYPI_REPOSITORY=\"https://package-proxy.replit.com/pypi/\"\nMPLBACKEND=\"TkAgg\"\n\n# Enable unit tests. This is only supported for a few languages.\n[unitTest]\nlanguage = \"python3\"\n\n# Add a debugger!\n[debugger]","metadata":{"id":231}}],["232",{"pageContent":"MPLBACKEND=\"TkAgg\"\n\n# Enable unit tests. This is only supported for a few languages.\n[unitTest]\nlanguage = \"python3\"\n\n# Add a debugger!\n[debugger]\nsupport = true\n\n  # How to start the debugger.\n  [debugger.interactive]\n  transport = \"localhost:0\"\n  startCommand = [\"dap-python\", \"main.py\"]\n\n    # How to communicate with the debugger.\n    [debugger.interactive.integratedAdapter]\n    dapTcpAddress = \"localhost:0\"\n\n    # How to tell the debugger to start a debugging session.\n    [debugger.interactive.initializeMessage]\n    command = \"initialize\"\n    type = \"request\"\n\n      [debugger.interactive.initializeMessage.arguments]\n      adapterID = \"debugpy\"\n      clientID = \"replit\"\n      clientName = \"replit.com\"\n      columnsStartAt1 = true\n      linesStartAt1 = true\n      locale = \"en-us\"\n      pathFormat = \"path\"\n      supportsInvalidatedEvent = true\n      supportsProgressReporting = true\n      supportsRunInTerminalRequest = true\n      supportsVariablePaging = true\n      supportsVariableType = true\n\n    # How to tell the debugger to start the debuggee application.\n    [debugger.interactive.launchMessage]\n    command = \"attach\"\n    type = \"request\"\n\n      [debugger.interactive.launchMessage.arguments]\n      logging = {}\n\n# Configures the packager.\n[packager]\n# Search packages in PyPI.\nlanguage = \"python3\"\n# Never attempt to install `unit_tests`. If there are packages that are being\n# guessed wrongly, add them here.\nignoredPackages = [\"unit_tests\"]\n\n  [packager.features]\n  enabledForHosting = false\n  # Enable searching packages from the sidebar.\n  packageSearch = true\n  # Enable guessing what packages are needed from the code.\n  guessImports = true\n```\n\n##### [HTML, CSS, JS](https://replit.com/@replit/HTML-CSS-JS?v=1#.replit)\n\n```toml\nhidden=[\".config\"]\n\n# hosting is currently hardcoded for this language\n# [hosting]\n# route = \"/\"\n# directory= \"/\"\n\n[nix]\nchannel = \"stable-21_11\"\n\n[languages.html]\npattern = \"**/*.html\"\n  [languages.html.languageServer]\n  start = [\"vscode-html-language-server\", \"--stdio\"]","metadata":{"id":232}}],["233",{"pageContent":"# [hosting]\n# route = \"/\"\n# directory= \"/\"\n\n[nix]\nchannel = \"stable-21_11\"\n\n[languages.html]\npattern = \"**/*.html\"\n  [languages.html.languageServer]\n  start = [\"vscode-html-language-server\", \"--stdio\"]\n  [languages.html.languageServer.initializationOptions]\n  provideFormatter = true\n  [languages.html.languageServer.configuration.html]\n  customData = [ ]\n  autoCreateQuotes = true\n  autoClosingTags = true\n  mirrorCursorOnMatchingTag = false\n\n    [languages.html.languageServer.configuration.html.completion]\n    attributeDefaultValue = \"doublequotes\"\n\n    [languages.html.languageServer.configuration.html.format]\n    enable = true\n    wrapLineLength = 120\n    unformatted = \"wbr\"\n    contentUnformatted = \"pre,code,textarea\"\n    indentInnerHtml = false\n    preserveNewLines = true\n    indentHandlebars = false\n    endWithNewline = false\n    extraLiners = \"head, body, /html\"\n    wrapAttributes = \"auto\"\n    templating = false\n    unformattedContentDelimiter = \"\"\n\n    [languages.html.languageServer.configuration.html.suggest]\n    html5 = true\n\n    [languages.html.languageServer.configuration.html.validate]\n    scripts = true\n    styles = true\n\n    [languages.html.languageServer.configuration.html.hover]\n    documentation = true\n    references = true\n\n    [languages.html.languageServer.configuration.html.trace]\n    server = \"off\"\n\n[languages.javascript]\npattern = \"**/{*.js,*.jsx,*.ts,*.tsx,*.mjs,*.cjs}\"\n  [languages.javascript.languageServer]\n  start = [\"typescript-language-server\", \"--stdio\"]\n\n# TODO autocomplete relies on snippet support, which we don't advertise to LSP servers.\n# For now CSS autocomplete will use built-in codemirror, which is not perfect but good enough\n[languages.css]\npattern = \"**/{*.less,*.scss,*.css}\"\n  [languages.css.languageServer]\n    start = [\"vscode-css-language-server\", \"--stdio\"]\n    [languages.css.languageServer.configuration.css]\n      customData = [ ]\n      validate = true\n\n      [languages.css.languageServer.configuration.css.completion]\n      triggerPropertyValueCompletion = true","metadata":{"id":233}}],["234",{"pageContent":"customData = [ ]\n      validate = true\n\n      [languages.css.languageServer.configuration.css.completion]\n      triggerPropertyValueCompletion = true\n      completePropertyWithSemicolon = true\n\n      [languages.css.languageServer.configuration.css.hover]\n      documentation = true\n      references = true\n\n      [languages.css.languageServer.configuration.css.lint]\n      # Configure linting\n      # ignore = don't show any warning or error\n      # warning = show yellow underline\n      # error = show red underline\n      argumentsInColorFunction = \"error\" # Invalid number of parameters\n      boxModel = \"ignore\" # Do not use width or height when using padding or border\n      compatibleVendorPrefixes = \"ignore\"  # When using a vendor-specific prefix make sure to also include all other vendor-specific properties\"\n      duplicateProperties = \"warning\" # Do not use duplicate style definitions\n      emptyRules = \"warning\" # Do not use empty rulesets\n      float = \"ignore\" # Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.\n      fontFaceProperties = \"warning\" # @font-face rule must define 'src' and 'font-family' properties\n      hexColorLength = \"error\" # Hex colors must consist of three, four, six or eight hex numbers\n      idSelector = \"ignore\" # Selectors should not contain IDs because these rules are too tightly coupled with the HTML.\n      ieHack = \"ignore\" # IE hacks are only necessary when supporting IE7 and older\n      important = \"ignore\" # Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.\n      importStatement = \"ignore\" # Import statements do not load in parallel\n      propertyIgnoredDueToDisplay = \"warning\" # Property is ignored due to the display\n      universalSelector = \"ignore\" # The universal selector (*) is known to be slow\n      unknownAtRules = \"warning\" # Unknown at-rule\n      unknownProperties = \"warning\" # Unknown property.","metadata":{"id":234}}],["235",{"pageContent":"universalSelector = \"ignore\" # The universal selector (*) is known to be slow\n      unknownAtRules = \"warning\" # Unknown at-rule\n      unknownProperties = \"warning\" # Unknown property.\n      validProperties = [ ] # add some properties that the linter doesn't know about\n      unknownVendorSpecificProperties = \"ignore\" # Unknown vendor specific property.\n      vendorPrefix = \"warning\" # When using a vendor-specific prefix also include the standard property\n      zeroUnits = \"ignore\" # No unit for zero needed\n\n      [languages.css.languageServer.configuration.css.trace]\n      server = \"off\"\n\n    [languages.css.languageServer.configuration.scss]\n    validate = true\n\n      [languages.css.languageServer.configuration.scss.completion]\n      triggerPropertyValueCompletion = true\n      completePropertyWithSemicolon = true\n\n      [languages.css.languageServer.configuration.scss.hover]\n      documentation = true\n      references = true\n\n      [languages.css.languageServer.configuration.scss.lint]\n      # Configure linting\n      # ignore = don't show any warning or error\n      # warning = show yellow underline\n      # error = show red underline\n      argumentsInColorFunction = \"error\" # Invalid number of parameters\n      boxModel = \"ignore\" # Do not use width or height when using padding or border\n      compatibleVendorPrefixes = \"ignore\"  # When using a vendor-specific prefix make sure to also include all other vendor-specific properties\"\n      duplicateProperties = \"warning\" # Do not use duplicate style definitions\n      emptyRules = \"warning\" # Do not use empty rulesets\n      float = \"ignore\" # Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.\n      fontFaceProperties = \"warning\" # @font-face rule must define 'src' and 'font-family' properties\n      hexColorLength = \"error\" # Hex colors must consist of three, four, six or eight hex numbers","metadata":{"id":235}}],["236",{"pageContent":"fontFaceProperties = \"warning\" # @font-face rule must define 'src' and 'font-family' properties\n      hexColorLength = \"error\" # Hex colors must consist of three, four, six or eight hex numbers\n      idSelector = \"ignore\" # Selectors should not contain IDs because these rules are too tightly coupled with the HTML.\n      ieHack = \"ignore\" # IE hacks are only necessary when supporting IE7 and older\n      important = \"ignore\" # Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.\n      importStatement = \"ignore\" # Import statements do not load in parallel\n      propertyIgnoredDueToDisplay = \"warning\" # Property is ignored due to the display\n      universalSelector = \"ignore\" # The universal selector (*) is known to be slow\n      unknownAtRules = \"warning\" # Unknown at-rule\n      unknownProperties = \"warning\" # Unknown property.\n      validProperties = [ ] # add some properties that the linter doesn't know about\n      unknownVendorSpecificProperties = \"ignore\" # Unknown vendor specific property.\n      vendorPrefix = \"warning\" # When using a vendor-specific prefix also include the standard property\n      zeroUnits = \"ignore\" # No unit for zero needed\"\n\n    [languages.css.languageServer.configuration.less]\n    validate = true\n\n      [languages.css.languageServer.configuration.less.completion]\n      triggerPropertyValueCompletion = true\n      completePropertyWithSemicolon = true\n\n      [languages.css.languageServer.configuration.less.hover]\n      documentation = true\n      references = true\n\n      [languages.css.languageServer.configuration.less.lint]\n      # Configure linting\n      # ignore = don't show any warning or error\n      # warning = show yellow underline\n      # error = show red underline\n      argumentsInColorFunction = \"error\" # Invalid number of parameters\n      boxModel = \"ignore\" # Do not use width or height when using padding or border","metadata":{"id":236}}],["237",{"pageContent":"# error = show red underline\n      argumentsInColorFunction = \"error\" # Invalid number of parameters\n      boxModel = \"ignore\" # Do not use width or height when using padding or border\n      compatibleVendorPrefixes = \"ignore\"  # When using a vendor-specific prefix make sure to also include all other vendor-specific properties\"\n      duplicateProperties = \"warning\" # Do not use duplicate style definitions\n      emptyRules = \"warning\" # Do not use empty rulesets\n      float = \"ignore\" # Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.\n      fontFaceProperties = \"warning\" # @font-face rule must define 'src' and 'font-family' properties\n      hexColorLength = \"error\" # Hex colors must consist of three, four, six or eight hex numbers\n      idSelector = \"ignore\" # Selectors should not contain IDs because these rules are too tightly coupled with the HTML.\n      ieHack = \"ignore\" # IE hacks are only necessary when supporting IE7 and older\n      important = \"ignore\" # Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.\n      importStatement = \"ignore\" # Import statements do not load in parallel\n      propertyIgnoredDueToDisplay = \"warning\" # Property is ignored due to the display\n      universalSelector = \"ignore\" # The universal selector (*) is known to be slow\n      unknownAtRules = \"warning\" # Unknown at-rule\n      unknownProperties = \"warning\" # Unknown property.\n      validProperties = [ ] # add some properties that the linter doesn't know about\n      unknownVendorSpecificProperties = \"ignore\" # Unknown vendor specific property.\n      vendorPrefix = \"warning\" # When using a vendor-specific prefix also include the standard property\n      zeroUnits = \"ignore\" # No unit for zero needed\"\n\n```\n\n#### [Java](https://replit.com/@replit/Java-Beta?v=1#.replit)\n\n```toml\ncompile = \"javac -classpath .:target/dependency/* -d . $(find . -type f -name '*.java')\"","metadata":{"id":237}}],["238",{"pageContent":"```\n\n#### [Java](https://replit.com/@replit/Java-Beta?v=1#.replit)\n\n```toml\ncompile = \"javac -classpath .:target/dependency/* -d . $(find . -type f -name '*.java')\"\nrun = [\"java\", \"-classpath\", \".:target/dependency/*\", \"Main\"]\n\nentrypoint = \"Main.java\"\nhidden = [\"**/*.class\"]\n\n[packager]\nlanguage = \"java\"\n\n[packager.features]\npackageSearch = true\n\n[languages.java]\npattern = \"**/*.java\"\n\n[languages.java.languageServer]\nstart = [\"jdt-language-server\"]\n\n[unitTest]\nlanguage = \"java\"\n\n[nix]\nchannel = \"stable-21_11\"\n\n[debugger]\nsupport = true\n\n[debugger.compile]\ncommand = \"javac -classpath .:/run_dir/junit-4.12.jar:target/dependency/* -g -d . $(find . -type f -name '*.java')\"\n\n[debugger.interactive]\ntransport = \"localhost:0\"\nconnectTimeout = 60\nstartCommand = \"java-debug\"\n\n[debugger.interactive.initializeMessage]\ncommand = \"initialize\"\ntype = \"request\"\n\n[debugger.interactive.initializeMessage.arguments]\nadapterID = \"cppdbg\"\nclientID = \"replit\"\nclientName = \"replit.com\"\ncolumnsStartAt1 = true\nlinesStartAt1 = true\nlocale = \"en-us\"\npathFormat = \"path\"\nsupportsInvalidatedEvent = true\nsupportsProgressReporting = true\nsupportsRunInTerminalRequest = true\nsupportsVariablePaging = true\nsupportsVariableType = true\n\n[debugger.interactive.launchMessage]\ncommand = \"launch\"\ntype = \"request\"\n\n[debugger.interactive.launchMessage.arguments]\nclassPaths = [\".\"]\nmainClass = \"Main\"\n```\n\n#### [Node.js](https://replit.com/@replit/Nodejs?v=1#.replit)\n\n```toml\nentrypoint = \"index.js\"\n\n[interpreter]\ncommand = [\n    \"prybar-nodejs\",\n    \"-q\",\n    \"--ps1\",\n    \"\\u0001\\u001b[33m\\u0002\\u0001\\u001b[00m\\u0002 \",\n    \"-i\"\n]\n\n[nix]\nchannel = \"stable-21_11\"\n\n[env]\nXDG_CONFIG_HOME = \"/home/runner/.config\"\n\n[packager]\nlanguage = \"nodejs\"\n\n  [packager.features]\n  packageSearch = true\n  guessImports = true\n  enabledForHosting = false\n\n[unitTest]\nlanguage = \"nodejs\"\n\n[languages.javascript]\npattern = \"**/{*.js,*.jsx,*.ts,*.tsx}\"\n\n  [languages.javascript.languageServer]\n  start = [ \"typescript-language-server\", \"--stdio\" ]\n\n[debugger]\nsupport = true\n\n  [debugger.interactive]\n  transport = \"localhost:0\"","metadata":{"id":238}}],["239",{"pageContent":"[languages.javascript.languageServer]\n  start = [ \"typescript-language-server\", \"--stdio\" ]\n\n[debugger]\nsupport = true\n\n  [debugger.interactive]\n  transport = \"localhost:0\"\n  startCommand = [ \"dap-node\" ]\n\n    [debugger.interactive.initializeMessage]\n    command = \"initialize\"\n    type = \"request\"\n\n      [debugger.interactive.initializeMessage.arguments]\n      clientID = \"replit\"\n      clientName = \"replit.com\"\n      columnsStartAt1 = true\n      linesStartAt1 = true\n      locale = \"en-us\"\n      pathFormat = \"path\"\n      supportsInvalidatedEvent = true\n      supportsProgressReporting = true\n      supportsRunInTerminalRequest = true\n      supportsVariablePaging = true\n      supportsVariableType = true\n\n    [debugger.interactive.launchMessage]\n    command = \"launch\"\n    type = \"request\"\n\n      [debugger.interactive.launchMessage.arguments]\n      args = []\n      console = \"externalTerminal\"\n      cwd = \".\"\n      environment = []\n      pauseForSourceMap = false\n      program = \"./index.js\"\n      request = \"launch\"\n      sourceMaps = true\n      stopOnEntry = false\n      type = \"pwa-node\"\n\n```\n\n#### [C++](https://replit.com/@replit/CPlusPlus?v=1)\n\n```toml\ncompile = [\"make\", \"-s\"]\nrun = \"./main\"\nentrypoint = \"main.cpp\"\nhidden = [\"main\", \"**/*.o\", \"**/*.d\", \".ccls-cache\", \"Makefile\"]\n\n[languages.cpp]\npattern = \"**/*.{cpp,h}\"\n\n[languages.cpp.languageServer]\nstart = \"ccls\"\n\n[debugger]\nsupport = true\n\n[debugger.compile]\ncommand = [\"make\"]\nnoFileArgs = true\n\n[debugger.interactive]\ntransport = \"stdio\"\nstartCommand = [\"dap-cpp\"]\n\n[debugger.interactive.initializeMessage]\ncommand = \"initialize\"\ntype = \"request\"\n\n[debugger.interactive.initializeMessage.arguments]\nadapterID = \"cppdbg\"\nclientID = \"replit\"\nclientName = \"replit.com\"\ncolumnsStartAt1 = true\nlinesStartAt1 = true\nlocale = \"en-us\"\npathFormat = \"path\"\nsupportsInvalidatedEvent = true\nsupportsProgressReporting = true\nsupportsRunInTerminalRequest = true\nsupportsVariablePaging = true\nsupportsVariableType = true\n\n[debugger.interactive.launchMessage]\ncommand = \"launch\"\ntype = \"request\"","metadata":{"id":239}}],["240",{"pageContent":"supportsProgressReporting = true\nsupportsRunInTerminalRequest = true\nsupportsVariablePaging = true\nsupportsVariableType = true\n\n[debugger.interactive.launchMessage]\ncommand = \"launch\"\ntype = \"request\"\n\n[debugger.interactive.launchMessage.arguments]\nMIMode = \"gdb\"\narg = []\ncwd = \".\"\nenvironment = []\nexternalConsole = false\nlogging = {}\nmiDebuggerPath = \"gdb\"\nname = \"g++ - Build and debug active file\"\nprogram = \"./main\"\nrequest = \"launch\"\nsetupCommands = [\n\t{ description = \"Enable pretty-printing for gdb\", ignoreFailures = true, text = \"-enable-pretty-printing\" }\n]\nstopAtEntry = false\ntype = \"cppdbg\"\n```","metadata":{"id":240}}],["241",{"pageContent":"# Working with shortcuts\n\nBe more productive with Replit by learning the code editor’s powerful shortcuts for editing, writing, and inspecting code.\n\nThe shortcuts we'll show you here are for Windows. If you're using a Mac, use the `Cmd` key instead of the `Ctrl` key, and the `Option` key instead of the `Alt` key.\n\nWhen you use a shortcut, be sure that your repl window has been clicked, or these shortcuts may access the browser's keyboard shortcuts.\n\n## Basic editing\n\n| Command                                           | Key              |\n| ------------------------------------------------- | ---------------- |\n| Select up                                         | `Shift+Up`       |\n| Select down                                       | `Shift+Down`     |\n| Select line                                       | `Ctrl+L`         |\n| Cut line (without selection)                      | `Ctrl+X`         |\n| Copy line (without selection)                     | `Ctrl+C`         |\n| Paste                                             | `Ctrl+V`         |\n| Delete line                                       | `Ctrl+Shift+K`   |\n| Move Line Down                                    | `Alt+Down`       |\n| Move Line Up                                      | `Alt+Up`         |\n| Copy Line Down                                    | `Shift+Alt+Down` |\n| Copy Line Down                                    | `Shift+Alt+Up`   |\n| Undo                                              | `Ctrl+Z`         |\n| Redo                                              | `Ctrl+Y`         |\n| Format                                            | `Ctrl+S`         |\n| Add cursors                                       | `Alt+Left Click` |\n| Undo last cursor operation                        | `Ctrl+U`         |\n| Select all occurrences of current selection       | `Ctrl+Shift+L`   |\n| Select all occurrences of current word            | `Ctrl+F2 `       |\n| Jump to matching bracket                          | `Ctrl+Shift+\\ `  |","metadata":{"id":241}}],["242",{"pageContent":"| Select all occurrences of current word            | `Ctrl+F2 `       |\n| Jump to matching bracket                          | `Ctrl+Shift+\\ `  |\n| Indent Line                                       | `Ctrl+] `        |\n| Outdent Line                                      | `Ctrl+[ `        |\n| Go to Beginning of Line                           | `Home `          |\n| Go to End of Line                                 | `End `           |\n| Go to End of File                                 | `Ctrl+End `      |\n| Go to Beginning of File                           | `Ctrl+Home `     |\n| Toggle Line Comment                               | `Ctrl+/ `        |\n| Add Block Comment                                 | `Shift+Alt+A `   |\n| Find                                              | `Ctrl+F `        |\n| Find Next                                         | `Enter `         |\n| Find Previous                                     | `Shift+Enter `   |\n| Add Selection To Next Find Match                  | `Ctrl+D`         |\n| Select All Occurrences of Find Match              | `Alt+Enter `     |\n| Trigger Suggest                                   | `Ctrl+Space `    |\n| Go to References                                  | `ctrl+F12 `      |\n| Peek Definition                                   | `shift+F12 `     |\n| Rename Symbol                                     | `F2 `            |\n| Generate Code (Ghostwriter subscription required) | `Alt+G`          |\n\n## Navigation\n\n| Command                     | Key                                           |\n| --------------------------- | --------------------------------------------- | --- |\n| Go to Line...               | `Ctrl+G`                                      |\n| Go to File..., Quick Open   | `Ctrl+P `                                     |\n| Go to Next Error or Warning | `F8 `                                         |\n| Show command palette        | `Ctrl+Shift+P` or `F1` (use `F1` on Firefox). |","metadata":{"id":242}}],["243",{"pageContent":"| Go to Next Error or Warning | `F8 `                                         |\n| Show command palette        | `Ctrl+Shift+P` or `F1` (use `F1` on Firefox). |\n| Go Back                     | `Alt+Left `                                   |\n| Go Forward                  | `Alt+Right `                                  |     |\n| Show Version Control        | `Ctrl+Shift+G `                               |\n| Show Search                 | `Ctrl+Shift+F `                               |\n| Open Settings               | `Ctrl+, `                                     |\n\n## Frequently used keyboard shortcuts\n\nThe following keyboard shortcuts can be used in a variety of ways. If you forget a keyboard shortcut, check the command palette.\n\n### Command palette\n\nThe command palette allows you to view all available commands based on your current context.\n\nTo access the command palette, press `F1` or `Ctrl+Shift+P`.\n\n**Note:** If you are using Firefox, `Ctrl+Shift+P` will open an incognito window, so use the `F1` option instead.\n\n![command palette](https://replit-docs-images.util.repl.co/images/animations/command-palette.gif)\n\n### Moving the current line\n\nPress `Alt+Up` or `Alt+Down` to move the current line up or down.\n\n![move line](https://replit-docs-images.util.repl.co/images/animations/move-line.gif)\n\n### Clone the current line\n\nPress `Shift+Alt+Up` or `Shift+Alt+Down` to clone the current line above or below.\n\n![clone line](https://replit-docs-images.util.repl.co/images/animations/clone-line.gif)\n\n### Selecting lines\n\nPress `Ctrl+L` to select a line.\n\n![select line](https://replit-docs-images.util.repl.co/images/animations/select-line.gif)\n\n### Deleting lines\n\nPress `Ctrl+Shift+K` to delete a line.\n\n![delete line](https://replit-docs-images.util.repl.co/images/animations/delete-line.gif)\n\n### Adding cursors\n\nPress `Alt+Left Click` to add more cursors.\n\n![adding cursors](https://replit-docs-images.util.repl.co/images/animations/multicursors.gif)\n\n### Find\n\nPress `Ctrl+F` to find.","metadata":{"id":243}}],["244",{"pageContent":"### Adding cursors\n\nPress `Alt+Left Click` to add more cursors.\n\n![adding cursors](https://replit-docs-images.util.repl.co/images/animations/multicursors.gif)\n\n### Find\n\nPress `Ctrl+F` to find.\n\n![find](https://replit-docs-images.util.repl.co/images/animations/find.gif)\n\n### Adding selections to next find match\n\nPress `Ctrl+D` to select and then `Ctrl+F` to add a selection to the next find match.\n\n![adding selections](https://replit-docs-images.util.repl.co/images/animations/select-matches.gif)\n\n## Navigation\n\nUse the following shortcuts to navigate the editor.\n\n### Open files\n\nPress `Ctrl+P` to quickly open files.\n\n![Open files](https://replit-docs-images.util.repl.co/images/animations/open-file.gif)\n\n### Go to line\n\nPress `Ctrl+G` to go to a specified line.\n\n![go to line](https://replit-docs-images.util.repl.co/images/animations/go-to-line.gif)","metadata":{"id":244}}],["245",{"pageContent":"---\ntitle: Using Nix with Replit\nsidebar_position: 5\n---\n\n# Using Nix with Replit\n\nReplit supports all programming languages through our integration with [Nix](https://nixos.org/). Nix is a tool for managing software packages and system configurations. It's like Python's virtualenv and pip, but instead of focusing on one programming language, it can handle all of them, and the system configuration and environment. Nix is declarative: instead of listing a series of steps to take, you describe the end result. Nix will know what to do to make it happen. Nix is reproducible: given the same instructions (and inputs, for example, the same Nix package set), it will give you the exact same result, regardless of when or where you run it.\n\nPreviously, Replit used a [single Docker image](https://github.com/replit/polygott) to power repls, but users couldn't customize it, and changes were slow, since they had to be made by a Replit employee.\n\nSince [moving to Nix](https://blog.replit.com/nix), all Nix Replit repls share the same Nix packages under the hood, called the Nix store. This is mounted as a virtual drive. There are many packages in this store, including different versions of some packages, and Nix makes managing multiple versions of the same package easy. Required packages listed in the repl's Nix configuration are linked from the store into the repl's environment, and this environment is cached for near-instant repl startup times.","metadata":{"id":245}}],["246",{"pageContent":"The [Nix package set](https://github.com/NixOS/nixpkgs) is a large collection of Nix expressions that describe how to build packages from source, sometimes also called derivations. Nix builds packages in a special build environment that is isolated from the rest of the system to ensure that the system doesn't interfere with the build, and that no unspecified dependencies are included. Compiled binaries are dynamically linked against specific versions of their libraries, rather than against the system-wide libraries, so that we don't have to deal with dependency conflicts. This all means that the builds are reproducible (in most cases, even on a bit-for-bit level).\n\nBecause builds are reproducible, Nix doesn't usually build everything from source by default. That would take way too long! Instead, it'll try to download pre-built binaries from a binary cache. Each specific Nix package has a unique identifier, which is a hash of its inputs. If any of its inputs change (which includes its build script and source code), it'll get a new unique identifier and be considered a new version. Nix downloads binaries according to this hash.\n\nThe expressions in the Nix package set are designed to be adjustable. It's easy to [change an expression's inputs](https://nixos.org/manual/nixpkgs/stable/#chap-overrides) so that it depends on a different version of a dependency, builds from the latest release instead of the current stable version, or builds or runs with different options. When you override an expression like this, it'll build a different version of the package, one that's probably not in the default binary cache. If it doesn't already exist in your Nix store, you will need to wait for it to be built when your repl starts.\n\nYou can override the Nix package set to add new expressions for software that hasn't been packaged, including private projects.","metadata":{"id":246}}],["247",{"pageContent":"You can override the Nix package set to add new expressions for software that hasn't been packaged, including private projects.\n\nFor a deeper dive into how Replit and Nix work together, have a look at the [building with Nix on Replit]/tutorials/30-build-with-nix) tutorial.\n\nLet's start by forking an [official template](https://replit.com/templates) (or a start with a [blank Nix repl]/programming-ide/getting-started-nix)).\n\n## Configuration\n\nOnce you have forked a template, there are two config files that you can use to customize the environment:\n\n- `replit.nix`, which configures the Nix environment.\n- `.replit`, which configures the run command.\n\nTo edit these files and customize the environment, enable \"Show hidden files\" in the Files pane options.\n\n### The `replit.nix` file\n\nThe `replit.nix` file configures the Nix environment, it tells our repl what packages to install. It should look something like this:\n\n```nix\n{ pkgs }: {\n    deps = [\n        pkgs.cowsay\n    ];\n}\n```\n\nThis is an anonymous Nix function that takes the Nix package set as its input and returns an array of packages to build an environment with.\n\nNix has packaged [over 50,000 projects](https://repology.org/repository/nix_stable). You can search for Nix packages on the [NixOS website](https://search.nixos.org/packages) (DuckDuckGo users can use the [`!nixpkg` bang command](https://duckduckgo.com/bang?q=nixpkg)).\n\nIf you're used to the Nix way of doing things, you can replace the `replit.nix` file with a `shell.nix` or `default.nix` file, with the order of priority being: `replit.nix` -> `shell.nix` -> `default.nix`.\n\nThe `shell.nix` file allows for [greater customization](https://nixos.org/guides/declarative-and-reproducible-developer-environments.html) of the shell environment than the `replit.nix` file.\n\nThe `default.nix` file will use `nix-env` to [construct an environment](https://nixos.org/guides/dev-environment.html) where the derivation in `default.nix` is built and added to the shell.\n\n#### Configuring Nix","metadata":{"id":247}}],["248",{"pageContent":"#### Configuring Nix\n\nYou may need to [change the way Nix is configured](https://nixos.org/manual/nixpkgs/stable/#chap-packageconfig). Not all packages can be installed by default, either because they're currently broken or insecure, not suitable for the current platform, or because they don't have a free licence. By default, Nix will not install any of these packages.\n\nTo allow for the installation of such packages, you will have to edit `~/.config/nixpkgs/config.nix`.\n\nFor example, to allow all unfree packages, you need set `.config/nixpkgs/config.nix` to:\n\n```nix\n{\n    allowUnfree = true;\n}\n```\n\nAny Nix file in `.config/nixpkgs` will be processed by Nix.\n\n### The `.replit` file\n\nThe `.replit` file is a [TOML file](https://toml.io/) that defines which command will be executed when we click the \"Run\" button, and [much more]/programming-ide/configuring-repl). The `run` command in this file should look something like the example below. You can use any binary made available by your `replit.nix` file in this `run` command.\n\n```toml\nrun = \"cowsay Welcome to nix on Replit!\"\n```\n\nIf you forked one of our [official templates](https://replit.com/templates), the `.replit` file will already have been configured for you.\n\n#### Basic `.replit` file\n\nLet's break down a basic `.replit` file:\n\n```toml\nrun = [\"python\", \"hello.py\"]\n\ncompile = [\"echo\", \"it compiled\"]\n\nlanguage = \"python\"\n\nentrypoint = \"hello.py\"\n```\n\nThe `run` key is the only required key in `.replit` files. The `run` key tells Replit what command to run when the run button is pressed.\n\n```toml\nrun = [\"python\", \"hello.py\"]\n```\n\nNote that in HTML repls no `run` key is necessary, and it will be ignored if it is provided.\n\nThe `compile` key tells Replit what command to run before `run`. This is optional. If this exits with a non-0 exit code, Replit won't run the `run` command.\n\n```toml\ncompile = [\"echo\", \"it compiled\"]\n```\n\nThe `language` key is a reserved key that normally does nothing, but tells Replit what language to choose when importing a Git repo.\n\n```toml","metadata":{"id":248}}],["249",{"pageContent":"```toml\ncompile = [\"echo\", \"it compiled\"]\n```\n\nThe `language` key is a reserved key that normally does nothing, but tells Replit what language to choose when importing a Git repo.\n\n```toml\nlanguage = \"python\"\n```\n\nThe `entrypoint` is the file that is opened by default when you open the repl.\n\n```toml\nentrypoint = \"hello.py\"\n```\n\n#### Intermediate `.replit`\n\nMost fields that take commands can be strings or lists, but lists are preferred. The list format is `[command, args, ...]`\n\n##### Configuring the packager\n\nThe `.replit` file can also set the packager. Replit uses [UPM](https://github.com/replit/upm), the Universal Package Manager, to abstract over different languages' differences in package management.\n\n```toml\n[packager]\nlanguage = \"nodejs-npm\"\n```\n\nThe `language` key tells UPM what language this repl uses. This must be a language that [is supported by UPM](https://github.com/replit/upm#supported-languages).\n\nYou can also enable the following quality of life features:\n\n```toml\n  [packager.features]\n  # Enable package searching tab\n  packageSearch = true\n  # Enable UPM import guessing\n  guessImports = true\n```\n\n##### Telling Replit about your language\n\nYou'll need to tell Replit which files are in which language. For example, for TypeScript you would define the following:\n\n```toml\n[languages.typescript]\n# This glob lets replit know what files the LSP should be active on\n# The format is usually **/*.ext\npattern = \"**/*.ts\"\n# This lets replit know what language the file is\nsyntax = \"typescript\"\n```\n\nThe `pattern` is a [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>), usually in the format `**/*.ext`. The `syntax` defines which language will be used for syntax highlighting.","metadata":{"id":249}}],["250",{"pageContent":"```\n\nThe `pattern` is a [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>), usually in the format `**/*.ext`. The `syntax` defines which language will be used for syntax highlighting.\n\n[Language servers](https://microsoft.github.io/language-server-protocol/) help developer tools implement features like autocomplete, go to definition, and documentation on hover. To enable this in your repl, first make sure that you've set up your language as above, and then you can set up the language server for your language. Remember that you'll have to add your language server to your `replit.nix` file in order for it to be available. You can [search the Nix package set for language servers](https://search.nixos.org/packages?query=lsp+language+server).\n\n```toml\n[languages.typescript.languageServer]\nstart = [ \"typescript-language-server\", \"--stdio\" ]\n```\n\n##### Public environment variables\n\nIf you need environment variables that are not sensitive, you can set them in the `.replit` file:\n\n```toml\n[env]\nENV_VAR = \"EXISTS!\"\n```\n\nYou can interpolate environment variables into new ones using the `${ENV_VAR_NAME}` syntax:\n\n```toml\n[env]\nOLD_VAR = \"this\"\nMY_ENV_VAR = \"${OLD_VAR} but better\"\n```\n\nThis will set `MY_ENV_VAR` to `\"this but better\"`.\n\nThe one exception is `PATH`. As a convenience, when you set `PATH` to a value, Replit will actually append this to the `PATH` instead of overwriting it.\n\n```toml\n[env]\nPATH = \"~/${REPL_SLUG}/some_new_path\"\n```\n\n## Running your project\n\nOnce both these files are configured and you've written your code, you can run your repl with the \"Run\" button.\n\nBoth the console and the shell will pick up changes made to your `replit.nix` file. However, the shell will only be able to detect and apply the changes when it presents you with a new prompt. Just press enter in the Shell tab and it will re-create the environment, applying your changes.\n\n## Examples\n\nHere are some examples of what you could create!\n\n### Run a Node.js app\n\n`.replit`:\n\n```toml\nrun = \"node index.js\"\n```\n\n`replit.nix`:\n\n```nix\n{ pkgs }: {","metadata":{"id":250}}],["251",{"pageContent":"## Examples\n\nHere are some examples of what you could create!\n\n### Run a Node.js app\n\n`.replit`:\n\n```toml\nrun = \"node index.js\"\n```\n\n`replit.nix`:\n\n```nix\n{ pkgs }: {\n  deps = [\n    pkgs.nodejs-16_x\n  ];\n}\n```\n\n`index.js`:\n\n```javascript\nconsole.log(`Hello from Node.js ${process.version}!`);\n```\n\n### Nethack\n\nYou could play the classic roguelike game [NetHack](https://www.nethack.org/index.html):\n\n`.replit`:\n\n```toml\nrun = \"nethack-x11\"\n```\n\n`replit.nix`:\n\n```nix\n{ pkgs }: {\n  deps = [\n    (pkgs.nethack.override {\n      x11Mode = true;\n    })\n  ];\n}\n```\n\n### i3 window manager\n\nYou can even run a desktop environment, such as [i3](https://i3wm.org/):\n\n`.replit`:\n\n```toml\n# We need to kill Replit's window manager first\nrun = \"pkill fluxbox && i3\"\n```\n\n`replit.nix`:\n\n```nix\n{ pkgs }: {\n  deps = with pkgs; [\n    xterm\n    i3\n    i3status\n    dmenu\n    firefox\n    neovim\n  ];\n}\n```\n\n### Advanced\n\nCheck these articles for more in-depth examples, including using web servers and databases:\n\n- [Building with Nix on Replit]/tutorials/30-build-with-nix)\n- [Build an email news digest app with Nix, Python and Celery]/tutorials/31-build-news-digest-app-with-nix)\n- [Build and host your company blog on Replit with Nix and Hugo]/tutorials/40-build-host-company-blog-on-replit-with-hugo-nix)\n\n## Learn more about Nix\n\nIf you'd like to learn more about Nix, here are some great resources:\n\n- [Nix tour](https://nixcloud.io/tour/) - An interactive introduction to the Nix programming language.\n- [Nix Pills](https://nixos.org/guides/nix-pills/) - A guided introduction to Nix, starting from first principles.\n- [Nixology](https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs) - A series of videos introducing Nix in a practical way.\n- [Nix Package Manager Guide](https://nixos.org/manual/nix/stable/) - A comprehensive guide of the Nix Package Manager.\n- [Nix.dev](https://nix.dev/) - An opinionated guide for developers getting things done using the Nix ecosystem.","metadata":{"id":251}}],["252",{"pageContent":"- [Nix.dev](https://nix.dev/) - An opinionated guide for developers getting things done using the Nix ecosystem.\n- [Nix shorts](https://github.com/justinwoo/nix-shorts) - A collection of short notes about Nix, down to what is immediately needed for users.","metadata":{"id":252}}],["253",{"pageContent":"# How to make a Replit template\n\nIf your Repl can be used as a good starting point for other project, you might want to submit it as a template! Let's learn what a Replit template is and how to make a good one.\n\n## What _is_ a template?\n\nTemplates are a type of published repl. They appear on the Replit [Templates page](https://replit.com/templates), where you'll find different kinds of templates. The official templates, made by Replit, have a checkbox next to the name of the template:\n\n![Official Replit templates](https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/template-official.png)\n\nThe [HTML, CSS, JS template](https://replit.com/@replit/HTML-CSS-JS?v=1#index.html) template is very popular and can be used as a starting point for creating a vanilla JavaScript project. You can fork the template to use it.\n\nOther templates have been created by community members, like this one:\n\n<img \n    src=\"https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/template-community.png\" \n    alt=\"Community Replit template\"\n/>\n\nLet's learn how to make a template.\n\n## Creating a template\n\nYou can learn how to make a repl by following [this guide]/tutorials/introduction-to-the-repl-it-ide). Once you have created the template, you can follow the Replit [publishing flow](https://blog.replit.com/publishing). Make your published repl a template by checking the \"Submit as Template for Review\" box in the last step of the publishing flow. The Replit team will review your template before it is live on the Templates page.\n\n![Publish as template](https://replit-docs-images.util.repl.co/images/programming-ide/creating-a-template/publish.png)\n\nBefore you submit your template, make sure it's as easy to use as possible. It should include all the boiler plate code that is needed to get a project started, and it should work right away when the \"Run\" button is pressed.","metadata":{"id":253}}],["254",{"pageContent":"A good template should always include well-commented code, easily editable variables, and a README file. It's always important to comment your code, but it's even more important when others will be using your code for their own projects. In the `README.md` file, add descriptive details about your template, and information about the variables that the user can change. READMEs help users understand how your template works, and if there are any requirements, licensing, or other factors they should be aware of.\n\nThe `.md` in `README.md` stands for Markdown, which is a basic text language. READMEs can be written in any text format, but we'll use Markdown as it's the best pratice.\n\nHere's an example outline for a README - feel free to use this for your own templates!\n\n```md\n# Template Name\n\nChoose a self-descriptive name, you can also add a simple description about your template.\n\n# Usage\n\nExplain how you can install / use this template. Make sure to provide a detailed explanation and make it easy for people to read. Also, add any code snippets if needed.\n\n# License\n\nThis will define how people can use your template. You can visit https://opensource.org/licenses to choose a license.\n```\n\nYou can also edit your submitted template and share update messages to show how your project has changed over time.\n\nLet's take a look at a practical example of a community template.\n\n## A practical example: Creating the Phaser Vite starter template\n\nWe created this [Phaser Vite starter template](https://replit.com/@ritza/Phaser-Vite-starter-template?v=1) to show you how you can create your own templates in Replit. The Phaser Vite starter template includes everything you need to create a Phaser game in Replit.\n\nPhaser is a beginner-friendly 2D JavaScript game framework that is used to create HTML5 games. [Vite](https://vitejs.dev) is a development server and JavaScript bundler.","metadata":{"id":254}}],["255",{"pageContent":"Phaser is a beginner-friendly 2D JavaScript game framework that is used to create HTML5 games. [Vite](https://vitejs.dev) is a development server and JavaScript bundler.\n\nThe Phaser Vite starter template is quite complex, as it provides for developing your game as well as creating, serving, and downloading the production bundle. You can do all stages of development in your browser. Many Replit templates are less complex, such as the [HTML, CSS, JS template](https://replit.com/@replit/HTML-CSS-JS?v=1#index.html). But the Phaser Vite starter template makes for a good example template, since it shows you how you can use Replit's features to handle multiple run commands.\n\nThe Phaser Vite starter template is configured to build a production-ready bundle of a Phaser game.\n\nThe template has some basic starting code that demonstrates these useful features of Phaser 3 for building games:\n\n- Loading game assets: images.\n- Moving a sprite.\n- Adding physics.\n- Adding user input.\n- The Scale Manager, which handles responsive game layout.\n- Adding text.\n\nThe following Vite commands are available in the template:\n\n- `npm run dev` runs `vite` to start the dev server.\n- `npm run build` runs `vite build` to build the production bundle to the `dist` folder.\n- `npm run preview` runs `vite preview` to serve the production bundle.\n\nWhen you fork the template, the npm packages in the `package.json` file are automatically installed.\n\n### Setting up the development server\n\nTo get the dev server template working in Replit, we needed to add a `vite.config.js` file and configure it to conditionally determine the configuration options based on the Vite command used: `dev` / `serve` or `build`. You can read more about conditional Vite configuration in the [Vite docs](https://vitejs.dev/config/#conditional-config).\n\n### Configuring the \"Run\" button","metadata":{"id":255}}],["256",{"pageContent":"### Configuring the \"Run\" button\n\nThe `.replit` file is used to determine what the repl \"Run\" button will do. The `.replit` file is hidden in most repls. You can show the hidden files by clicking the three dot menu in the file tree of the repl template, and selecting \"Show hidden files\". In this template, the `.replit` file is modified to make the \"Run\" button run different Vite commands for development and production.\n\n<img\n src=\"https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/show-hidden.png\"\n alt=\"Community Replit template\"\n/>\n\nThe \"Run\" button is initially configured to run the dev server. You can see this in the `.replit` file:\n\n```toml\n# run dev\nrun=\"npm run dev\"\nentrypoint=\"/src/main.js\"\n```\n\nThe `entrypoint` command is the name of the main file. It's the file that will be run and is shown by default when opening the editor. For development, the `/src/main.js` file is used.\n\n### Creating the production build bundle\n\nOnce you have finished building your game, you can create a production build bundle of your game by running the following command in the \"Shell\" tab:\n\n```bash\nnpm run build\n```\n\nThis creates a production build bundle that is added to the `dist` folder.\n\nTo view the running production bundle code, the `.replit` config file needs to be altered so that the `vite preview` command is run when the \"Run\" button is pressed. The dev commands need to be commented out and the commands for running the production build need to be added:\n\n```toml\nlanguage=\"nodejs\"\n\n# run dev\n# run=\"npm run dev\"\n# entrypoint=\"/src/main.js\"\n\n# run production build\nrun=\"npm run preview\"\nentrypoint=\"/dist/assets/index.a808088d.js\"\n```\n\nWhen you bundle your code using Vite, a random hash is added to the `html`, `css`, and `js` files. The hash in the `js` file of the `entrypoint` command of your bundle would be different from the one above.\n\n### Downloading your production bundle","metadata":{"id":256}}],["257",{"pageContent":"### Downloading your production bundle\n\nIf you want to use your production bundle elsewhere, you can download it as a zip file by running the following command in the \"Shell\" tab:\n\n```bash\nzip -r myPhaserGameDownload.zip dist\n```\n\nThis will create a zip file named `myPhaserGameDownload.zip` in the file tree. You can download this zip file by clicking the three dot menu that appears next to the zip file name when you hover your mouse over the zip file, or by selecting the zip file and clicking \"Download\".\n\n<img\n src=\"https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/file-download.png\"\n alt=\"Download zip\"\n/>\n\nTo create the zip file, the Nix `zip` package is added to the repl. It's used to create a zip folder of your production bundle that you can download. If you have a repl that does not have the `zip` package installed and try to use the `zip` command in the \"Shell\" tab, you will get the following message in the shell:\n\n```bash\nzip: command not installed, but was located via Nix. Would you like to run zip from Nix and add it to your replit.nix file? [Yn]\n```\n\nIf you type `y`, you will then get the following message in the shell:\n\n```bash\nAdding zip to replit.nix\nsuccess\n...\n```\n\nIf you look in the `replit.nix` file, you will see that the dependency (`deps`) will be added:\n\n```\npkgs.zip\n```\n\nThis adds the Nix `zip` package to the repl. This dependency is already added to the Phaser Vite starter template.\n\nYou can also download the whole project by clicking the three dot menu in the file tree and selecting \"Download as zip\". This method downloads the whole project, including all of the node modules from the project dependencies.\n\nYou can enable or disable Phaser 3 features in the `vite.config.js` file to optimize your production build. Disable features you don't need to reduce the bundle size.\n\n## A note on choosing libraries","metadata":{"id":257}}],["258",{"pageContent":"You can enable or disable Phaser 3 features in the `vite.config.js` file to optimize your production build. Disable features you don't need to reduce the bundle size.\n\n## A note on choosing libraries\n\nWhen creating a template that uses a specific library, it's a good idea to consider alternative libraries to determine which one will make the best template.\n\nWith the Phaser Vite starter template, for example, we considered the production bundle size when choosing a bundler. We could have made the template with Webpack as a bundler instead of Vite. To compare the bundle sizes of Vite and Webpack, we created production bundles of this [Flappy Bird game](https://replit.com/@ritza/Flappy-Bird-Phaser#script.js). We used the [Phaser starter template (using Webpack 4)](https://github.com/photonstorm/phaser3-project-template) to create the Webpack bundle. The JavaScript bundle size was 1.02 MB using Webpack and 1.29 MB using the Replit Phaser Vite starter template.\n\nTo further reduce bundle size, the configurations of each bundler can be tweaked to optimize the build for a particular project. For example, Storybook compared [Webpack and Vite bundling](https://storybook.js.org/blog/storybook-performance-from-webpack-to-vite) and found that Vite produced smaller production bundles for published Storybooks.\n\nUltimately, we chose Vite to make this Replit Phaser template because of its ease of use and fast development build times, which makes for a better developer experience. Vite also updates the development server when code changes, even before the file is saved. It has very fast [Hot Module Replacement](https://vitejs.dev/guide/features.html#hot-module-replacement).\n\n## Further reading\n\nHere are some resources to learn more about submitting and configuring templates, configuring Vite, and creating a Phaser 3 game:\n\n- [Sharing Your Repl]/hosting/sharing-your-repl)\n- [Replit's new publish flow](https://blog.replit.com/publishing)\n- [Configuring a Repl]/programming-ide/configuring-repl)","metadata":{"id":258}}],["259",{"pageContent":"- [Sharing Your Repl]/hosting/sharing-your-repl)\n- [Replit's new publish flow](https://blog.replit.com/publishing)\n- [Configuring a Repl]/programming-ide/configuring-repl)\n- [Repl Space and Templates](https://blog.replit.com/replspace-templates)\n- [How Replit went from supporting 50 languages to all of them by using Nix](https://blog.replit.com/nix)\n- [Configuring Vite](https://vitejs.dev/config)\n- [Making your first Phaser 3 game](https://phaser.io/tutorials/making-your-first-phaser-3-game/part1)\n\nReplit hosts [Template Jams](https://blog.replit.com/template-jam), template-building competitions with cash prizes for the winning templates. Look out for the next one if you're interested and follow the [Replit Twitter account](https://twitter.com/replit) to get the latest Replit news.","metadata":{"id":259}}],["260",{"pageContent":"# Replit libraries\n\nWhile you can use nearly any package or library on Replit, we have also built several of our own. You can read more about these here.\n\n## Replit.web\n\nReplit web is a Python web framework that is integrated with Replit DB and Replit Auth. It extends Flask, so if you're familiar with that you'll find it very intuitive, and have access to Auth and a DB by default.\n\n- **Documentation:** [https://replit-py.readthedocs.io/en/latest/web_tutorial.html](https://replit-py.readthedocs.io/en/latest/web_tutorial.html)\n- **Announcement:** [A Python Framework With Built-in Database and Auth Support](https://blog.replit.com/replit-web)\n- [Build a technical challenge website with Replit.web](/tutorials/technical-challenge-site)\n- [Build a paid content site with Replit.web and Stripe](/tutorials/paid-content-site)\n\n## Kaboom\n\nKaboom is a JavaScript library for GUI development, focused on making games. You can find some example games with walkthrough guides below.\n\n- **Homepage:** [https://kaboomjs.com](https://kaboomjs.com)\n- **Book:** [https://makejsgames.com](https://makejsgames.com)\n- [Build Snake with Kaboom](/tutorials/build-snake-with-kaboom)\n- [Build Asteroids with Kaboom](/tutorials/build-asteroids-with-kaboom)\n- [Build a space shooter with Kaboom](/tutorials/build-space-shooter-with-kaboom)\n- [Build a 3d game with Kaboom](/tutorials/build-3d-game-with-kaboom)\n- [Build Tic-Tac-Toe with Kaboom and Websockets](/tutorials/build-tictactoe-with-websockets-kaboom)\n- [Build Mario with Kaboom](/tutorials/build-mario-with-kaboom)\n\n## Replit Auth\n\nReplit Auth lets you easily build a \"Sign in with Replit\" option to your own applications. If a user has an account with Replit, they can use that to sign into their account on your application too, similar to what you might be used to from \"Sign in with Google\" or \"Sign in with GitHub\" options in many third-party services.","metadata":{"id":260}}],["261",{"pageContent":"- **Quick start**: [Authenticating users with Repl Auth](/hosting/authenticating-users-repl-auth#authenticating-users-with-repl-auth)\n\n## Replit DB (Replit Database)\n\nReplit DB gives you a convenient way to store application data without having to deal with confusing database ops work. Just import the library into your Repl and you're good to go!\n\n- [Python Documentation](https://replit-py.readthedocs.io/en/latest/db_tutorial.html)\n- [Node.js Documentation](https://github.com/replit/database-node)\n- [FAQ](/hosting/database-faq)\n- [Build a Phonebook with Replit Database](/tutorials/using-the-replit-database)\n\n## Replit Audio\n\nReplit audio allows you to interact with audio from your Replit apps, playing sound files, playing and pausing, and navigating tracks.\n\n- **Tutorial:** [Replit Audio](/tutorials/audio)\n- **Documentation:** [Playing audio on Replit](/programming-ide/workspace-features/playing-audio-replit)","metadata":{"id":261}}],["262",{"pageContent":"# Connecting Replit to GitHub\n\nTo import and edit GitHub repositories on Replit, first connect your Replit account to GitHub.\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe src=\"https://www.loom.com/embed/9d8c3eb731c14e369e73edb12bc6d539\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute;top: 0;left: 0;width: 100%;height: 100%\"></iframe>\n</div>\n\n---\n\nNavigate to your [Replit account](https://replit.com/account), scroll down to **Connected Services**, and click the GitHub \"Connect\" button.\n\n![linking connected services](https://replit-docs-images.util.repl.co/gh/images/connected-services.png)\n\nYou should then be prompted to allow access to Replit. Follow the steps ony github and after that, your Replit account should be successfully linked. If at first the Connected Services section under your account is not showing that your account is linked, refresh the page and it should work now.\n\nIf all goes well, you should be ready to [import your first repository](/programming-ide/using-git-on-replit/import-repository)! 👏","metadata":{"id":262}}],["263",{"pageContent":"# Import your first Repository\n\nNow that you've linked your github account to replit, it's time to import some code from github!\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe src=\"https://www.loom.com/embed/16ab07218e984f408e61778e369a325a\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute;top: 0;left: 0;width: 100%;height: 100%\"></iframe>\n</div>\n\n---\n\nClick on the **Create Repl** button from the sidebar.\n\n![creating a repl from the sidebar](https://replit-docs-images.util.repl.co/gh/images/sidebar.png)\n\nAfter opening the menu to create a new repl, press the **Import from Github** button in the top-right corner.\n\n![importing a repository](https://replit-docs-images.util.repl.co/gh/images/import-repo-button.png)\n\nCopy the URL of a public GitHub repository and paste it into the text field. After you've finished, press the **Import** button.\n\n![finalizing import configuration](https://replit-docs-images.util.repl.co/gh/images/import-final.png)\n\nDepending on the language you've selected, you might have to configure the run command for your Repl. If you are unsure about how to properly run your Repl, you can read about how to [configure your repl](/programming-ide/configuring-repl).","metadata":{"id":263}}],["264",{"pageContent":"# Private & Personal Repositories\n\nOnce you've imported a GitHub repository, you will need to grant Replit permission so you can make changes tracked by your remote repository.\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe src=\"https://www.loom.com/embed/f3908dfd60274dba90b1b1c0c20450e2\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute;top: 0;left: 0;width: 100%;height: 100%\"></iframe>\n</div>\n\n---\n\nLet's start by creating a new Repl from scratch and opening the **Version Control** tab.\n\n![version control tab](https://replit-docs-images.util.repl.co/gh/images/version-control-pane.png)\n\nThe next step is to click the **Existing Git Repo** button. You should get a popup asking to access your GitHub repositories. Simply authorize GitHub by clicking the link \"Connect GitHub to import your private repos\".\n\n![authorizing github](https://replit-docs-images.util.repl.co/gh/images/authing-github.png)\n\nThe final step is to install Replit on your personal GitHub account. Allow access to all repositories and hit **Install & Authorize**.\n\n![Installing github](https://replit-docs-images.util.repl.co/gh/images/install-replit-on-github.png)\n\nAfter you've finished this step, the popup should update and allow you to import all of your GitHub repositories! Choose one and hit **Pull changes**.\n\n![pulling changes](https://replit-docs-images.util.repl.co/gh/images/pull-changes.png)\n\nYour repository's code should now be successfully imported. Let's learn about how to [use the GUI](use-gui) in the next tutorial!","metadata":{"id":264}}],["265",{"pageContent":"# Using the Version Control GUI\n\nIn the [previous tutorial](private-repo), you learned about allowing replit access to your personal and private repositories. Let's first commit some code and then finally make a pull request with the GUI (Graphical User Interface).\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe src=\"https://www.loom.com/embed/b665c867f74c4e3984776a1c407df341\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style={{\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  }}></iframe>\n</div>\n\n---\n\nNavigate to the Version Control tab. You can see all the past commits you've made and any file changes.\n\n![gui interface](https://replit-docs-images.util.repl.co/gh/images/gui-interface.png)\n\n## Making a commit to your repository\n\nFirst, let's make some edits to a file in the Repl. In this case, we add a comment to one of the files.\n\n![making code changes](https://replit-docs-images.util.repl.co/gh/images/making-code-changes.png)\n\nAfter that, navigate back to the Version Control tab and see the file change.\n\n![file change indication](https://replit-docs-images.util.repl.co/gh/images/file-change-indication.png)\n\nNext, write a commit message in the text field and then press **Commit All & Push**.\n\n![making the commit](https://replit-docs-images.util.repl.co/gh/images/commitment.png)\n\nSweet! Finally, you can check the code on GitHub to confirm that it was committed successfully.\n\n![checking our changes on github](https://replit-docs-images.util.repl.co/gh/images/check-github.png)\n\n## Making a pull request\n\nLarge projects that require asynchronous collaboration will often involve making pull requests to the remote repository to GitHub. The process of a Pull Request (PR) usually looks like:\n\n1. Creating a new branch\n2. Committing your changes to that branch\n3. System Checks and Code Review\n4. Merging\n\nTo create a new branch, go to the Version Control tab and press the \"+\" icon next to the branch selector.","metadata":{"id":265}}],["266",{"pageContent":"2. Committing your changes to that branch\n3. System Checks and Code Review\n4. Merging\n\nTo create a new branch, go to the Version Control tab and press the \"+\" icon next to the branch selector.\n\n![creating a new branch](https://replit-docs-images.util.repl.co/gh/images/new-branch.png)\n\nNext, name your branch.\n\n![naming-branch](https://replit-docs-images.util.repl.co/gh/images/naming-branch.png)\n\nAdd a comment describing the changes you are committing.\n\n![updating the code](https://replit-docs-images.util.repl.co/gh/images/code-change-pr.png)\n\nAfter committing your changes on your branch, push the updated code in the Version Control tab, which syncs it to your remote repository.\n\nNavigate to the GitHub repository on GitHub and you should see a banner indicating that your new branch had recent pushes. Press **Compare & pull request** to create a PR.\n\n![github showing a new commit](https://replit-docs-images.util.repl.co/gh/images/new-commit-indication.png)\n\nAfter you add description and create your PR, the next step is usually to wait for someone to review your code. If code reviewing is disabled or if you own the GitHub repository, you should be able to merge without code review. In this case, code reviewing is disabled for this tutorial's repository so we can go ahead and merge.\n\n![the merge button](https://replit-docs-images.util.repl.co/gh/images/merge.png)\n\nAfter having merged the pull request, we can now see that our changes have been added to the repository!\n\n![merge changes](https://replit-docs-images.util.repl.co/gh/images/merge-changes.png)\n\nOf course we can't rely on the GUI 100% of the time since git gets to a pretty complex level. Let's learn how to use [git with the shell/terminal](git-shell)!","metadata":{"id":266}}],["267",{"pageContent":"# Using Git with the Shell\n\n## Cloning an existing repository from the shell\n\nUsing Git in the shell allows you to do the same things as the graphical Version Control tool and much more, leveraging the full power of Git. You can use Git in the Shell on Replit the same as you would on your local terminal.\n\nTo clone a repository, use `git clone <url-to-your-repository>`. The URL should start with `https` so that you don't need to configure an SSH client on your repl. If the repository is public, it will immediately be cloned into your Replit Workspace, and you'll see the new directory appear in your files bar.\n\nIf the repository is private, you'll be prompted for your username and password. Note that GitHub no longer accepts passwords on the command line, so if you are cloning a private repository for GitHub you should rather put in a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) when prompted for your password.\n\nIn the example shown below, we run `git clone https://github.com/ritza-co/git-demo.git` and can see the new files appear in a subdirectory on the left called `git-demo`.\n\n![Git Clone](https://replit-docs-images.util.repl.co/images/programming-ide/git-with-replit/git-clone.png)\n\n## Making changes on Replit and pushing back to a remote Git host\n\nOnce you've cloned a repository, you can make changes to your files in the Workspace. Once you're happy with the changes, you can add new files, commit your changes, and push everything back up to your Git hosting provider (e.g. GitHub) by running a few commands.\n\nBefore running any of the below, make sure you're in the correct directory. For example, if you cloned your repository using `git clone` as described above, you'll first have to change into the sub-directory, e.g. `cd git-demo` in the example we are using.","metadata":{"id":267}}],["268",{"pageContent":"1. First, check the status of your repository by running the following command. This will show you any new files, changed files, or removed files:\n\n```\ngit status\n```\n\nIf you are happy with all of your changes, you can add them all with the following command:\n\n```\ngit add .\n```\n\nOnce you've added the files, you can run `git status` again to see that all the changes are listed in green now, showing that they're tracked by Git. In the example below, we see that we changed one file (`READEME.md`) and removed another one (The `git-demo` subdirectory). We also added a new file called `newfile.md` which is shown under \"untracked files\".\n\nAfter running `git add .`, all files and changes are tracked by Git, so they appear under \"Changes to be committed\".\n\n![Git Status and Git Add](https://replit-docs-images.util.repl.co/images/programming-ide/git-with-replit/git-status-git-add.png)\n\nBefore we can commit the files, we'll have to tell Git who we are by configuring a name and email address. Run the following commands, using your own name and email address:\n\n```\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email \"jane@example.com\"\n```\n\nNow you can commit and push your changes as follows. You may have to change the branch name `main` to whatever your branch is called, e.g. `git push origin master` or `git push origin develop` are some common names.\n\n```\ngit commit -m \"add newfile and some fixes\"\ngit push origin main\n```\n\nYou'll be prompted for your username and password, whether or not the repository is public. Remember to use your GitHub access token instead of your password if you are using GitHub.\n\nIf everything works out, you should see a \"Writing Objects...\" message, followed by \"done\", as shown below.\n\n![Git Commit Git Push](https://replit-docs-images.util.repl.co/images/programming-ide/git-with-replit/git-config-commit-push.png)\n\n## Pushing without typing in your password or access token","metadata":{"id":268}}],["269",{"pageContent":"![Git Commit Git Push](https://replit-docs-images.util.repl.co/images/programming-ide/git-with-replit/git-config-commit-push.png)\n\n## Pushing without typing in your password or access token\n\nThere's always a tradeoff between convenience and security. If you are dealing with sensitive code or information, it's best to store your password or access token in a password manager, and paste it in each time you push changes.\n\nIf you prefer, you can store your credentials as part of the remote Git URL as environment variables, using Replit secrets. This means you won't have to type your username and password each time, but it also means that anyone with access to your repl will be able to find your password or token.\n\nUnder the secrets tab in the sidebar, add a new secret. Put `GIT_URL` as the key and the URL to your Git repository with your credentials as the value. For example, on GitHub you use the format `https://<username>:<github-access-token>@github.com/<user-or-organization>/<repository>`. Click 'Add Secret'. You may have to restart your shell before this secret becomes available, which you can do by typing `exit` in the shell.\n\n![Add secret](https://replit-docs-images.util.repl.co/images/programming-ide/git-with-replit/add-secret.png)\n\nNow you can use `git push $GIT_URL` to push up to your remote Git host without needing to type in your credentials.\n\nFor more advanced use of Git, including branching, rebasing, cherry-picking, and more, see our [Git commands reference guide](git-commands).","metadata":{"id":269}}],["270",{"pageContent":"# Running GitHub repositories on Replit\n\nGitHub repositories can be run automatically on Replit. Head to https://replit.com/github to import a repository. Any public repository under 500 MB (or 1GB with Hacker plan) can be cloned. You can unlock private repos after authenticating with GitHub and purchasing private repls with [Cycles](https://replit.com/pricing) or with our [Hacker plan](https://replit.com/pricing).\n\n<img src=\"https://replit-docs-images.util.repl.co/images/programming-ide/running-github-repositories-replit/XOFmfO94Du.png\" alt=\"import modal\" style=\"width: 70% !important\" />\n\nFrom the modal above, you can select the repo, language, and owner of the repl. We will automatically detect the language if your GitHub repository already has a `.replit` file!\n\n## Configuring a Cloned Repo\n\nWhen you clone a repository without a `.replit` file, we automatically show the visual `.replit` editor:\n\n<img src=\"https://replit-docs-images.util.repl.co/images/programming-ide/running-github-repositories-replit/2QlSkG7YCB.png\" alt=\"Visual config editor\" style=\"width: 70% !important\" />\n\nThis will automatically create the `.replit` file and make it possible to customize how the repl will run.\n\nYou can use the shell to run any command and then set the \"Run\" button once you've decided what it should do.\n\nClicking \"done\" will finalize the repl's configuration and close the visual editor.\n\nAdding a `.replit` file to a repository makes cloning fast with no configuration necessary. The configuration file can always be changed at any time. For more information on how to configure your repl, see the documentation on [configuring your repl](/programming-ide/configuring-repl).\n\n## Adding a \"Run on Replit\" Badge\n\n<img\nstyle=\"height: 40px; width: 190px\"\nsrc=\"https://replit.com/badge/github/replit/clui\"\n/>\n\nAfter configuring a run command for your repl, you can add a badge to your repository README that will allow anyone to run your project automatically!\n\n### Generate a badge\n\n<iframe","metadata":{"id":270}}],["271",{"pageContent":"/>\n\nAfter configuring a run command for your repl, you can add a badge to your repository README that will allow anyone to run your project automatically!\n\n### Generate a badge\n\n<iframe\n  style=\"border: 0; width: 100%; height: 280;\"\n  src=\"https://run-on-replit.util.repl.co\">\n</iframe>","metadata":{"id":271}}],["272",{"pageContent":"# File History\n\nTo make sure you never lose any of your work, Replit auto-saves your code as you write. If you ever lose an edit to your code that you'd like to recover, rewind back in time with File History.\n\n## Accessing File History\n\nOpen up a code or text file in the Workspace and hit the **History** button in the bottom-right corner.\n\n![opening history](https://replit-docs-images.util.repl.co/images/animations/view-history.gif)\n\n## Viewing previous versions of a file\n\nOnce you've opened up File History, you can view previous versions of a file by using the scroll bar, the arrow buttons, and the **left** and **right** arrow keys.\n\n![scroll bar demo](https://replit-docs-images.util.repl.co/images/animations/history-versioning.gif)\n\n## Comparing previous versions to the current file\n\nPress the Compare Latest toggle in the bottom left hand of the File History pane to see in-line comparisons of your file at that point in time and the latest version.\n\n![compare latest image](https://replit-docs-images.util.repl.co/images/animations/compare-history.gif)\n\n## Restoring a previous version of a file\n\nIf you want to restore a file to a previous version, just press the `Restore` button, which will restore. Don't worry, you won't erase any history. When you restore to a previous version, it is added as a new version to the file's history.\n\n![restore history image](https://replit-docs-images.util.repl.co/images/animations/restore-history.gif)\n\n## Viewing File History playback\n\nYou can use the playback feature of File History to watch your file change over time like a movie. This can be useful for creating videos of your programming sessions.\n\n![replay history video](https://replit-docs-images.util.repl.co/images/animations/history-replay.gif)","metadata":{"id":272}}],["273",{"pageContent":"# Debugging\n\nRepls that are written in the following languages can use a built-in, multiplayer debugger:\n\n- C/C++\n- Java\n- JavaScript (Node.js)\n- Python\n- With more coming soon (through [Nix](/programming-ide/getting-started-nix)).\n\nTo get started with the debugger, click on the Debugger icon on the sidebar:\n\n![Debugger panel](https://replit-docs-images.util.repl.co/images/animations/open-debugger.gif)\n\nNow you can start adding [breakpoints](https://en.wikipedia.org/wiki/Breakpoint) to your repl: breakpoints are lines of the code where the program will be paused during execution while debugging. Breakpoints don't affect the program when run normally. When the program is paused, the Debugger sidebar will show the values of all variables, avoiding the need for adding print / log statements.\n\nWhen the program is paused, the other buttons will be enabled:\n\n- \"Next Step\" will advance the program to the next possible line where the program can be stopped inside your source code. For instance, if the current line is calling a function, \"Next Step\" will go inside the function. If it is the last line in a function, \"Next Step\" will return to where that function was called.\n- \"Next Breakpoint\" will advance the program to the next breakpoint, or until the program finishes if there are no more breakpoints after the current one.\n- \"Stop\" terminates the debugging session and kills the process that is being debugged.\n\n## Multiplayer features\n\nWhen debugging a program in a repl, all participants will see all the actions that any other participant does. This means that the debugging experience will be shared by all the participants in a repl. This includes:\n\n- The breakpoints.\n- The place / time where the program is paused.\n- The contents of the variables.\n- The output of the console.\n\n## Adding support for other languages through Nix\n\nComing soon!","metadata":{"id":273}}],["274",{"pageContent":"# Repl Resources\n\nYou can find the current resource usage of your Repl in the bottom of the workspace sidebar. This includes the amount of **RAM**, **CPU**, and **Storage** currently being used by your Repl to run your code, the LSP, and other background services.\n\n![opening the Resources panel](https://replit-docs-images.util.repl.co/images/animations/resources.gif)\n\n## Why Monitor Repl Resources?\n\nIt's important to monitor your resource usage to ensure that your Repl has enough resources to run smoothly. If you notice that your resource usage is consistently high, it may make sense to use a Boost to increase the resources your Repl can use, or make changes to your code so your program uses less resources.\n\n<img src=\"https://replit-docs-images.util.repl.co/images/programming-ide/repl-resources/resources-panel.png\" alt=\"resources panel\" />\n\n## High Resource Usage\n\nYou might be unsure about what high resource usage means, or why it is happening. It's important to remember that high resource usage is not necessarily a bad thing. As long as your experience in the workspace or your app is not degraded, high resource usage not a signal of something wrong.\n\nBut if you do notice that your resource usage is consistently high and your experience with Replit is being affected, you may want to consider upgrading your Repl specs with Boosts, that can be activated using [Cycles]/cycles/about-cycles). With a Boost, you can 4-8x the CPU and RAM of your Repl, allowing for resource-intensive programs without affecting your or your end users' experience.","metadata":{"id":274}}],["275",{"pageContent":"# Secrets and Environment Variables\n\nSensitive information, such as credentials and API keys, must be kept secure. Keeping this information separate from your code helps to protect it from unauthorized access when you share your code with others.\n\nA common solution to give your application access to sensitive information is through the use of environment variables. By storing the information as key-value pairs in an environment variable, you can access it in your backend code. On Replit, you can add environment variables and access them using secrets.\n\nIt's important to note that while users who clone your Repl will have access to the code, they must set their own values for the environment variables. This helps to maintain the security of sensitive information.\n\n![the secrets icon](https://replit-docs-images.util.repl.co/images/animations/show-secrets.gif)\n\n## How to Add, View, and Edit Environment Variables (Secrets)\n\nTo add an environment variable, fill in the information and hit **Add new secret**.\n\n![adding a secret](https://replit-docs-images.util.repl.co/images/animations/add-secret.gif)\n\nYou can view or edit any previously saved variable by clicking on its name. The values are usually sensitive and are not shown by default.\n\n![secrets tab with secret](https://replit-docs-images.util.repl.co/images/animations/edit-secret.gif)\n\n## How to Use Environment Variables in Your Code\n\nTo use environment variables in your code, follow the code examples provided in the Secrets panel based on your programming language. Here are examples in Python and JavaScript, assuming you have set environment variables with `DB_USERNAME` -> `admin` and `TOKEN` -> `38zdJSDF48fKJSD4824fN`, respectively:\n\n![using a secret in code](https://replit-docs-images.util.repl.co/images/animations/use-secret.gif)\n\n### Python\n\n```python\nimport os\nprint(os.getenv(\"MY_SECRET\"))\n```\n\n### JavaScript\n\n```javascript\nconsole.log(process.env.MY_SECRET);\n```","metadata":{"id":275}}],["276",{"pageContent":"### Python\n\n```python\nimport os\nprint(os.getenv(\"MY_SECRET\"))\n```\n\n### JavaScript\n\n```javascript\nconsole.log(process.env.MY_SECRET);\n```\n\n**Note:** You cannot set environment variables for Repls with only a frontend, such as HTML Repls.\n**Note:** To access environment variables set through the UI in the Shell of your Repl (e.g., with `echo $MY_VARIABLE`), you must reboot the Repl by running `kill 1` in the shell.","metadata":{"id":276}}],["277",{"pageContent":"# Getting repl metadata\n\nIn some cases, it's useful to automatically retrieve metadata about a Repl from within that Repl. Your Repl's **environment variables** are pre-populated with some data that you can use. However, please avoid printing out the entirety of your Repl's environment variables in a public Repl, as it will expose any secrets you've added.\n\nTo access this data, first retrieve your Repl's environment variables.\n\n#### Retrieve environment variables in Node.js\n\n```js\nconsole.log(process.env);\n```\n\n#### Retrieve environment variables in Python\n\n```python\nimport os\n\nprint(os.environ)\n```\n\n#### Retrieve environment variables in Rust\n\n```rust\nuse std::env;\n\nfn main() {\n    for (key, value) in env::vars() {\n        println!(\"{}: {}\", key, value);\n    }\n}\n```\n\nTo access a **single** environment variable from within a Repl, use the following examples:\n\n#### Access a single environment variable in Node.js:\n\n```js\nconst variable = process.env.REPL_SLUG;\nconsole.log(variable);\n```\n\n#### Access a single environment variable in Python:\n\n```python\nimport os\n\nvariable = os.environ.get('REPL_SLUG')\nprint(variable)\n```\n\n#### Access a single environment variable in Rust:\n\n```rust\nuse std::env;\n\nfn main() {\n    let variable = env::var(\"REPL_SLUG\").unwrap();\n    println!(\"{}\", variable);\n}\n```\n\nHere is a table showing the most useful metadata accessible inside your Repl:\n\n| key             | description                                                                                                                                                        |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `REPL_OWNER`    | The username of the owner of the Repl. If your Repl is text-based and has no webserver, `REPL_OWNER` will reflect the value of the current user accessing the Repl |","metadata":{"id":277}}],["278",{"pageContent":"| `REPL_OWNER`    | The username of the owner of the Repl. If your Repl is text-based and has no webserver, `REPL_OWNER` will reflect the value of the current user accessing the Repl |\n| `REPLIT_DB_URL` | The URL of your key-value Replit database                                                                                                                          |\n| `REPL_ID`       | The unique UUID string of your Repl                                                                                                                                |\n| `HOME`          | The home path of your Repl                                                                                                                                         |\n| `system`        | The system name of your Repl                                                                                                                                       |\n| `LANG`          | Text language and encoding                                                                                                                                         |\n| `REPL_IMAGE`    | The docker image that corresponds to your Repl                                                                                                                     |\n| `REPL_LANGUAGE` | The language of your Repl                                                                                                                                          |\n| `REPL_PUBKEYS`  | A stringified JSON object containing different public api keys                                                                                                     |\n| `REPL_SLUG`     | The slug of your Repl                                                                                                                                              |","metadata":{"id":278}}],["279",{"pageContent":"| `REPL_SLUG`     | The slug of your Repl                                                                                                                                              |\n| `PRYBAR_FILE`   | The main/entrypoint file of your Repl                                                                                                                              |","metadata":{"id":279}}],["280",{"pageContent":"---\ntitle: Multiplayer\n---\n\n# Multiplayer: Pair programming with Replit\n\nSoftware developers have a reputation for being loners, but they don't always code by themselves. [Pair programming](https://en.wikipedia.org/wiki/Pair_programming) is used by many programmers to\n\n- Write bug-free code more efficiently (for example, one person might watch for mistakes while the other codes).\n- Share knowledge (a less-experienced programmer might 'follow along' while a more experienced programmer develops something, learning from each step of the process).\n- Assess expertise (if you're considering a new hire, watching them code first can be helpful to assess how good a coder they are, but coding _with_ them allows you to also see their experience in teamwork and communication).\n\nPair programming intuitively sounds like it would be inefficient: after all, the two developers could instead be working on different projects simultaneously. But on top of catching more bugs, two people working together often display more creativity as well. You might think of an idea based on something your buddy said that wouldn't have come to you alone.\n\nIf you have a friend handy, work through this tutorial together to gain real pair programming experience. If you're alone, fire up two browsers (or use incognito mode) to sign into two Replit accounts simultaneously.\n\n## Extending our data science article using pair programming: Getting help\n\nImagine that you are a developer who has come across the [previous tutorial on plotting and graphing](http://www.codewithrepl.it/04-data-science-and-visualisation-with-repl-it.html). You want to adapt the graphs shown a bit, but you haven't used Python much, so you decide to ask your friend for help.\n\nIn this scenario, you are \"@Lean3Viljoen94\" and the friend that you're asking for help is \"@GarethDwyer1\".\n\nStart by forking [the data science repl](https://replit.com/@GarethDwyer1/04-data-science-and-visualisation-with-replit) and making sure that you can run it.","metadata":{"id":280}}],["281",{"pageContent":"Start by forking [the data science repl](https://replit.com/@GarethDwyer1/04-data-science-and-visualisation-with-replit) and making sure that you can run it.\n\n![**Image 1:** *Forking another user's project*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-01-fork-repl.png)\n\nNow from your own fork, press the `share` button, as shown below.\n\n![**Image 2:** *Sharing your project with another user*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-02-share-repl.png)\n\nCopy the invite link, and note that this is different from the normal link to your repl. If you copy the link from your URL bar, you can give people _read_ access to your repl, but by copying the invite link you'll give them _write_ access.\n\n![**Image 3:** *Sharing options modal*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-03-share-link.png)\n\nIf you knew your friend's Replit username or the email associated with the Replit account, you could instead use the `Invite` box at the top. Share the link with your friend and wait for them to join.\n\nAs soon as they do, you will see that a chat box pops up in the bottom right corner. Their profile picture or letter will be at the top of the chat box, so you can always know who is currently active.\n\nRemember, you forked the repl in a previous step, so you are the owner of this fork and the \"host\" of this multiplayer session. If you invite multiple people and then leave, they can continue collaborating without you, but they won't be able to rejoin if the host is no longer in the session.\n\nYou can use the team chat feature, as shown below.\n\n![**Image 4:** *Starting chat with another user*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-04-team-chat.png)","metadata":{"id":281}}],["282",{"pageContent":"You can use the team chat feature, as shown below.\n\n![**Image 4:** *Starting chat with another user*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-04-team-chat.png)\n\nIn the previous tutorial, we looked at GDP by country. Imagine that you are now interested in how this is broken down by _continent_ too. You still want to plot each country as a separate data point, but you want them in different colours, one for each continent. You're not sure how to do this, so you ask for help.\n\nYou can see a typing indicator to help decide if you should wait around for a reply or go make coffee.\n\n![**Image 5:** *Chat box showing that user is typing*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-05-typing-indicator.png)\n\nYour friend tells you about the `hue` argument and points out that you already have this data in the `continent` column in your data frame. You add `hue=\"continent\"` to the graph and re-run it, but it doesn't quite work out how you expect.\n\n![**Image 6:** *Changing the plot from grouping data by country to grouping by continent*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-06-add-hue-continent.png)\n\nYour friend suggests maybe a scatter plot without the correlation line might look better, but when you try that it results in an error. The error message is hidden by the chat box, so you move it to the other side of the screen.\n\n![**Image 7:** *You can move the chat box to the left of the IDE to see errors better*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-07-move-chatbox.png)\n\nThis is getting a bit more complicated than you bargained for. Sometimes showing is easier than telling, so your friend starts editing the code directly instead of telling you how to do so using chat. The code\n\n```python\nsns.scatterplot(\n    \"gdpPercap\", \"lifeExp\", df, hue=\"continent\"\n).set_axis_labels(\"GDP per capita\", \"Life expectancy\")\n```\n\nchanges to\n\n```python\nax = sns.scatterplot(","metadata":{"id":282}}],["283",{"pageContent":"```python\nsns.scatterplot(\n    \"gdpPercap\", \"lifeExp\", df, hue=\"continent\"\n).set_axis_labels(\"GDP per capita\", \"Life expectancy\")\n```\n\nchanges to\n\n```python\nax = sns.scatterplot(\n    \"gdpPercap\", \"lifeExp\", df, hue=\"continent\"\n)\nax.set(xlabel=\"GDP per capita\", ylabel=\"Life expectancy\")\n```\n\n![**Image 8:** *In our new plot, we can see that African countries tend to have low life expectancy and low GDP, but the correlation looks weaker for the other continents*](https://replit-docs-images.util.repl.co/images/tutorials/05-multiplayer/05-08-figure-one.png)\n\n## Make it your own\n\nIf you followed along, you'll already have your own version of the repl to extend. If not, start from ours. Fork it from the embed below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@GarethDwyer1/cwr-05-multiplayer?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where next?\n\nGetting help on a single file in a program is only one use for multiplayer, but there are many scenarios where it can be useful to see your teammates' changes in real time. For example, if you're a back-end developer you could work closely with a front-end developer, ironing out any issues with data communication between the back- and front-end in real time, instead of waiting for multiple iterations of several days.\n\nThat brings us to the end of part 1 of this series and you should now be familiar with all of the basic features of Replit.\n\nIn part 2, we'll cover more advanced features, such as running projects from GitHub, storing secrets securely, and productivity hacks.","metadata":{"id":283}}],["284",{"pageContent":"# Playing audio on Replit\n\nLearn how to use audio on Replit by watching this video or read on below.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CuIV2-ivg0U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## System-wide audio\n\n[System-wide audio](https://blog.replit.com/system-audio) is an opt-in feature that delivers the PulseAudio audio stream to your browser through our [VNC](https://novnc.com) client. To enable it, add the following to your `.replit` file:\n\n```toml\naudio = true\n```\n\nThen restart your repl by running `kill 1` in the shell. You will see a checkbox with headphones in the lower right corner of the VNC output window:\n\n![look for the headphones](https://blog.replit.com/images/system-audio/system-audio.png)\n\nNote that due to browser security restrictions, you need to manually toggle the checkbox every time you open the Repl.\n\n### Known limitations\n\nKnown limitations of system-wide audio include:\n\n- A 100-300 millisecond latency introduced by the browser\n- Issues with Safari's browser security model\n- Not supported in Spotlight or Embed modes if enabled through secrets (as opposed to through the `.replit` file)\n\n## Audio service\n\nUsing the audio service, you can play audio in your Repl without creating a website. This service operates on a request system and allows you to control the volume, the number of times played, and the play state of your audio files.\n\nSupported audio file formats are `.wav`, `.aiff`, and `.mp3`. JavaScript and Python libraries are currently available. Examples of the JavaScript and Python libraries can be found in the generated docs at https://audio-js-docs--allawesome497.repl.co/ and https://replit-docs-python.allawesome497.repl.co/, respectively.\n\nFor those who prefer Rust, a community-contributed library is available [here](https://github.com/Daniel-Liu-c0deb0t/replit_audio).\n\n## How to Develop an Audio Library","metadata":{"id":284}}],["285",{"pageContent":"For those who prefer Rust, a community-contributed library is available [here](https://github.com/Daniel-Liu-c0deb0t/replit_audio).\n\n## How to Develop an Audio Library\n\nIf you are new to Python or JavaScript, follow our steps below to make a library.\n\n### Step 1: Add an audio source\n\nFiles are played in mono/single channel mode. Files with multiple channels will be read and converted into single-channel data.\n\nAudio files are played via a request system to make this as light as possible on your repl's resources. To make a request, write to a named pipe, `/tmp/audio`.\n\nAn example request might look like this:\n\n```json\n{\n  \"Paused\": false,\n  \"Name\": \"My tone\",\n  \"Type\": \"tone\",\n  \"Volume\": 1,\n  \"DoesLoop\": false,\n  \"LoopCount\": 0,\n  \"Args\": {\n    \"Pitch\": 400,\n    \"Seconds\": 5,\n    \"Type\": 1,\n    \"Path\": \"  \"\n  }\n}\n```\n\nTo break it down:\n\n- `Paused` indicates if the source is paused or not. This can only be set when updating the source.\n- `Name` is the name of the source. This can be used to identify the source when it's being created. If it's not set, the name will be set by pid1.\n- `Type` indicates the source type. Currently, supported types are:\n  - `wav` – A `.wav` file\n  - `aiff` – A `.aiff` file\n  - `mp3` – A `.mp3` file\n  - `tone` – A generated tone\n- `Volume` is the volume of the source as a floating point number; `1` would be 100%.\n- `DoesLoop` indicates if the source should loop. If true, `LoopCount` should be set.\n- `LoopCount` indicates how many times the source should loop. If set to `3`, the source will restart `3` times when it is done playing the first time. If set to a negative value, it will loop forever. If `DoesLoop` is false, this value will be ignored.","metadata":{"id":285}}],["286",{"pageContent":"- `Args` indicate additional arguments that are not used by every source type. + `Path` (used by `aiff`, `wav`, and `mp3` types) is the path to the file. This can be relative or absolute (relative to the workspace's root). + `Pitch` (used for the `tone` type) is the frequency/pitch of the tone. + `Type` (used for the `tone` type) is the wave type of the generated tone. Valid values are:\n  - `0` – The sine wave type\n  - `1` – The triangle wave type\n  - `2` – The saw wave type\n  - `3` – The sqr wave type\n\n### Step 2: Get the status of playing audio\n\nAn example status for audio is shown below:\n\n```json\n{\n  \"Sources\": [\n    {\n      \"Name\": \"1\",\n      \"Type\": \"tone\",\n      \"Volume\": 1,\n      \"Duration\": 2000,\n      \"Remaining\": 1995,\n      \"Paused\": false,\n      \"Loop\": 0,\n      \"ID\": 1,\n      \"EndTime\": \"2020-08-20T18:15:27.763933471Z\",\n      \"StartTime\": \"2020-08-20T18:15:25.763933471Z\",\n      \"Request\": {\n        \"ID\": 0,\n        \"Paused\": false,\n        \"Name\": \"1\",\n        \"Type\": \"tone\",\n        \"Volume\": 1,\n        \"DoesLoop\": false,\n        \"LoopCount\": 1,\n        \"Args\": {\n          \"Pitch\": 400,\n          \"Seconds\": 2,\n          \"Type\": 1\n        }\n      }\n    }\n  ],\n  \"Disabled\": false,\n  \"Running\": true\n}\n```\n\nIn detail, this is:\n\n- `Sources` – A list of playing sources.\n  - `Name` – The name of the source.\n  - `Type` – The type of the source.\n  - `Volume` – The volume of the source (`float64`).\n  - `Duration` – The (estimated) duration of the source (in milliseconds) (`int64`).\n  - `Remaining` – The (estimated) time remaining for the source (in milliseconds) (`int64`).\n  - `Paused` – Whether the source is paused or not (`bool`).\n  - `Loop` – How many times the source will play itself again. Negative values are infinite (`int64`).\n  - `ID` – The ID of the source used for updating it (`int64`).\n  - `EndTime` – The estimated time when the source will be done playing.\n  - `StartTime` – When the source started playing.\n  - `Request` – The request used to create the source.","metadata":{"id":286}}],["287",{"pageContent":"- `EndTime` – The estimated time when the source will be done playing.\n  - `StartTime` – When the source started playing.\n  - `Request` – The request used to create the source.\n- `Disabled` – Whether the pid1 audio player is disabled. This is useful for debugging.\n- `Running` – Whether pid1 is sending audio or not. This is useful for debugging.\n\n**Notes:**\nThe estimated end time is based on the current loop and does not factor in the fact that the source may repeat itself.\nTimestamps are formatted as: `yyyy-MM-dd'T'HH:mm:ssZ`.\n\nTo read the data from the sources, you need to read `/tmp/audioStatus.json`.\nThe file is formatted as shown below:\n\n**Note:** After a source finishes playing, it is removed from the known sources.\n\n### Step 3: Managing current sources\n\nTo pause or edit a playing source, you first need its ID.\nYou can get its ID by reading `/tmp/audioStatus.json`, as detailed above.\n\nEdit requests are formatted as shown below:\n\n```js\n{\n  \"ID\": 1, // The id of the source.\n  \"Volume\": 1, // The volume for the source to be played at.\n  \"Paused\": false, // Whether the file is paused or not.\n  \"DoesLoop\": false, // Whether the file should be repeated or not.\n  \"LoopCount\": -1 // How many times to repeat the file. Set to a negative value to create an endless loop.\n}\n```\n\nAll fields **must** be provided, except for `LoopCount` when `DoesLoop` is `false`.\n\nFor editing a source, you could do the following (or the equivalent in other languages):\n\n```py\nimport json\n\nclass NoSuchPlayerException(Exception): pass\n\ndef update_source(id, \\*\\*changes):\n  player_data = read_status() # Assume read_status reads /tmp/audioStatus.json\n\n  for s in player_data['Sources']:\n    if s['ID'] == id:\n      data = s\n      break\n\n  if not data:\n    raise NoSuchPlayerException(f'No player with id \"{id}\" found!')\n\n  data.update({key.title(): changes[key] for key in changes})\n\n  with open('/tmp/audio', 'w') as f:\n    f.write(json.dumps(data))\n\n```","metadata":{"id":287}}],["288",{"pageContent":"raise NoSuchPlayerException(f'No player with id \"{id}\" found!')\n\n  data.update({key.title(): changes[key] for key in changes})\n\n  with open('/tmp/audio', 'w') as f:\n    f.write(json.dumps(data))\n\n```\n\nThere is also a simple demo created in Python available [here](https://replit.com/@AllAwesome497/Audio-Demo)","metadata":{"id":288}}],["289",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Introduction to Teams Pro\n\nTeams Pro is a new and revolutionary approach to working, collaborating, and building. It's a shared repo for your entire team (and potential new team members), making it easier for you to work together.\n\nThe platform it is built around four cornerstones which we used to inform its features:\n\n## 1. Build\n\n- You can program and dogfood anything from a small script to building out a full MVP.\n- You can interview candidates easily and efficiently, thanks to [guest mode](/teams-pro/interviewing-candidates).\n- You can connect to GitHub, to push or pull all your code.\n- Your team can focus purely on programming, without worrying about the rest.\n\n## 2. Collaborate\n\n- _Threads_ allow you to have asynchronous conversations across all repls so that feedback and conversations are never lost. You can highlight specific lines of code or writing, and assign a comment.\n\n  <img src=\"https://blog.replit.com/images/threads/annotations.gif?\" alt=\"Our existing annotations feature\"/>\n\n- _Multiplayer_ allows your team to work together on any repl, all at once or at different times. This is a great way to knowledge share and debug, or just build!\n\n<div\n  className=\"video-container\"\n  style=\"text-align: center; margin: 30px 0;\"\n>\n  <iframe\n    width=\"475\"\n    height=\"275\"\n    src=\"https://www.youtube.com/embed/kO0EJJcuW1k\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n- _Who's coding?_ provides a live view of what your team is working on, which helps teammates understand if they should jump in and give input as needed.\n\n<div\n  className=\"video-container\"\n  style=\"text-align: center; margin: 30px 0;\"\n>\n  <iframe\n    width={560}\n    height={315}\n    src=\"https://www.youtube.com/embed/RHKz3grfPrw\"\n    title=\"YouTube video player\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n## 3. Host","metadata":{"id":289}}],["290",{"pageContent":"title=\"YouTube video player\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n## 3. Host\n\nTeams Pro allows you and your organization to host [internal tools](/tutorials/internal-organization-tool) such as slack bots or cron timers, [documentation](/tutorials/hosting-your-documentation-on-replit), blogs, scripting tools, and endless more possibilities.\n<img\nsrc=\"https://pbs.twimg.com/media/EuCd-dvVkAwNO8K?format=jpg&name=large\"\nalt=\"Our internal tool\"\nstyle=\"width: 60%\"\n/>\n\n## 4. Fun\n\n- Teams Pro really allows team work to turn into dream work.\n- Markdown puts the power in your hands; you can do everything from meeting minutes and post-mortems, to user interviews.\n- Prototype and plan with [excalidraw files](/tutorials/excalidraw-with-replit)\n\n<img\nsrc=\"https://blog.replit.com/images/draw/draw.gif\"\nalt=\"Example drawing\"\nstyle=\"width: 100%\"\n/>\n\n- You can create design docs and brainstorming sessions by combining .md and .draw files.\n- You can also use it as a knowledge base (one source of truth for the whole team).\n\n## Questions? Need help?\n\nPlease email us at pro@replit.com.\n\n## Further Reading\n\n- Host an [internal organization tool](/tutorials/internal-organization-tool) on Replit\n- Host your [documentation](/tutorials/hosting-your-documentation-on-replit) on Replit\n- Prototyping with [excalidraw files](/tutorials/excalidraw-with-replit)","metadata":{"id":290}}],["291",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Managing teams\n\nTo create a team, click the \"Teams\" tab in the sidebar. From the Teams dashboard, click \"+ Create a team\" and follow the steps. You can invite people using their Replit username or their email address, or by sharing a link through the \"Generate a team invite link\" button (the link does not expire).\n\n<img\nsrc=\"https://replit-docs-images.util.repl.co/images/teamsPro/manageTeam.png\"\nalt=\"Manage Team\"\nstyle=\"width:70%;\"\n/>\n\nIf you've already created a team, navigate to the [Teams dashboard](https://replit.com/teams) and then click on your team name. Once inside, click \"Manage team members\" in the header. From there, you can invite new members to your existing team.\n\n<img\nstyle=\"width: 300px\"\nsrc=\"https://replit-docs-images.util.repl.co/images/teamsForEducation/manageTeamMembers.png\"\n/>\n\nYou will only be able to invite as many people as seats you paid for. The ability to invite will be locked once you reach your limit.","metadata":{"id":291}}],["292",{"pageContent":"---\nsidebar_position: 6\n---\n\n# Themes Explore Page\n\nThe [Themes Explore Page](https://replit.com/themes) is a great place to browse and preview Custom Themes created by the community. Publishing your theme allows others to try it out and enjoy Replit through a brand new palette of colors.\n\n## Publish your Theme\n\nTo publish one of your Custom Themes to the Community, simply hit the \"Publish\" button from within the Themes Editor, fill out the title and description, and submit.\n\nDon't worry if your theme isn't perfect yet - you can always publish updates if you decide to make changes in the future!\n\n## Search for Themes\n\nIf you're looking for something in particular, you can also filter Themes by title, author, color scheme (light or dark), and even specific hex codes!\n\nFor example, a very popular theme from other editors is **Atom One Dark**. Searching for this title brings up\na few results that we can choose from!\n\n![searching for a theme](https://replit-docs-images.util.repl.co/themes/search-atom.gif)\n\nSome creators are particularly enthusiastic about making cool themes! If you want to see all of the themes that someone you like has created, you can even filter by a specific author!\n\n![searching by user](https://replit-docs-images.util.repl.co/themes/search-by-author.gif)\n\nLastly, you can filter themes by color scheme (light or dark) and even find themes that match a specific color.\n![searching by color](https://replit-docs-images.util.repl.co/themes/search-color.gif)\n\n## Preview, Install, and Tip\n\nOnce you select a Theme you like, you will be redirected to its Cover Page where you can preview the Theme to see how it looks, install it so that you can apply it across the site, and even leave the creator [a tip]/cycles/tipping) to thank them for their hard work!\n\n<div style=\"position: relative;paddingBottom: 56.25%;height: 0\">\n  <iframe \n  src=\"https://www.loom.com/embed/d75f080e700a4b27a17764c2b527088b\" \n  frameborder=\"0\" \n  webkitallowfullscreen \n  mozallowfullscreen \n  allowfullscreen","metadata":{"id":292}}],["293",{"pageContent":"<iframe \n  src=\"https://www.loom.com/embed/d75f080e700a4b27a17764c2b527088b\" \n  frameborder=\"0\" \n  webkitallowfullscreen \n  mozallowfullscreen \n  allowfullscreen \n  style=\"position: absolute;top: 0;left: 0;width: 100%;height: 100%\"></iframe> \n</div>\n\n---\n\nReady to start searching for and using your favorite Custom Themes? Get started by visiting the [Themes Explore Page](https://replit.com/themes) today!","metadata":{"id":293}}],["294",{"pageContent":"---\nsidebar_position: 0\n---\n\n# Creating your first theme\n\nWith Custom Themes, you can make Replit truly yours by customizing much of the UI from the background and foreground colors site-wide to your code's syntax highlighting. Let's dive into creating your first theme and get Replit looking just the way you want it to!\n\nNavigate to your [account page](https://replit.com/account) and scroll down to the **Themes** section Create a new theme, fill out the title, select a color scheme, optionally add a description, and hit **Create Theme**.\n\n![creating a theme](https://replit-docs-images.util.repl.co/themes/creating-theme.png)\n\nAfter creating your theme, you will be redirected to the Themes Editor. Let's first look at the **Global Theme** section and how each color option applies.\n\n![global-theme](https://replit-docs-images.util.repl.co/themes/global-theme.png)\n\n**Background** is the most noticeable color and the easiest one to get right. Notice how the entire page changes color as you edit it. Let's make it a very dark bluish color for this theme.\n\n**Outline** controls the color of borders. I'll choose a nice dark blue color to give off that cyberpunk experience.\n\n**Foreground** mostly controls text and icon colors. We're going to make the foreground a bluish-grey to give a lower contrast with the background, so as to not hurt the eyes through long coding sessions.\n\n**Primary** controls the color of most buttons. Fitting with the other colors we've selected, a more cyan-teal blue should do.\n\n**Positive** controls things like the color of the run button and those confirmation toasts that appear in the lower-right corner of the screen—anything that denotes something \"positive\". We've chosen a pale green color for this example theme.\n\n**Negative** colors appear when there is an error or if you are about to perform a dangerous action. A nice orange color will do here.\n\n![global theme](https://replit-docs-images.util.repl.co/themes/global-theme-preview.png)","metadata":{"id":294}}],["295",{"pageContent":"![global theme](https://replit-docs-images.util.repl.co/themes/global-theme-preview.png)\n\nFinally, hit **Apply Theme** to start using your new theme. If you want to go deeper and style syntax highlighting for your code, let's move on to the [next step](syntax-highlighting)","metadata":{"id":295}}],["296",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Managing installed themes\n\nAll of your installed themes can be managed from your [account](https://replit.com/account) under the **Themes** section.\n\n## Switching Themes\n\nTo switch out your current active theme for another one, simply click on the button next to the theme's title.\n\n![switching themes gif](https://replit-docs-images.util.repl.co/themes/switching-themes.gif)\n\n## Edit / Delete an existing theme\n\nTo edit or delete an existing theme of yours, hit the three dots beside a theme and hit either **Edit** or **Delete**. Note that only custom themes that you have created can be edited or deleted.\n\n![edit or delete a theme](https://replit-docs-images.util.repl.co/themes/edit-delete-theme.gif)","metadata":{"id":296}}],["297",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Syntax Highlighting\n\nSyntax highlighting enables you to color specific tokens in your code. Imagine what a life it would be if all of your code was only one color! Thanks to Custom Themes, you can now customize syntax highlighting to your liking!\n\n- ## `Variable Names`\n  Usually this color is applied when you use or define a variable in which no declaration keyword is used.\n\n### Javascript\n\n```javascript\nconst message = \"Hello World\";\nconsole.log(message); // \"message\" on this line gets highlighted\n```\n\n### Python\n\n```python\nmessage = \"hello python\" # no declaration keyword like \"const\" is used, so 'message' is colored here\nprint(message) # and during usage\n```\n\n- ## `Variable Definitions`\n  This color gets put into use when defining a variable with a definition keyword such as `const`, `var`, `int`, etc.\n\n### Javascript\n\n```javascript\nconst variableName = \"Look Ma, I'm a variable!\"; // 'variableName' is highlighted\n```\n\n### Java\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    int numericValue = 100; // 'numericValue' is highlighted\n  }\n}\n```\n\n- ## `Function References`\n  This color gets applied when you call a function.\n\n### Javascript\n\n```javascript\nfunction run() {\n  console.log(\"I'm Running!\");\n}\nrun(); // 'run' is highlighted\n```\n\n### Python\n\n```python\ndef dog_bark():\n  print(\"Woof!\")\ndog_bark() # 'dog_bark' is highlighted\n```\n\n- ## `Function Definitions`\n  When defining a function, this is the color that your function definition will be.\n\n### Javascript\n\n```javascript\nfunction run() {\n  // 'run' is highlighted\n  console.log(\"I'm Running!\");\n}\n```\n\n### Python\n\n```python\ndef dog_bark(): # 'dog_bark' is highlighted\n  print(\"Woof!\")\n```\n\n- ## `Keywords`\n  This one color highlights the important keywords in your code such as variable definitions, class definitions, imports/exports, and more!\n\n### Javascript\n\n```javascript\nexport default async function MyAsyncFunction() {\n  // 'export', 'default', 'async', and 'function' get highlighted\n  // 'return' and 'new' get highlighted","metadata":{"id":297}}],["298",{"pageContent":"### Javascript\n\n```javascript\nexport default async function MyAsyncFunction() {\n  // 'export', 'default', 'async', and 'function' get highlighted\n  // 'return' and 'new' get highlighted\n  return new Promise((resolve, reject) => resolve(\"hello world\"));\n}\n```\n\n### Python\n\n```python\nimport string, sys # 'import' gets highlighted\nfor i in sys.argv[1:]: # 'for' and 'in' get highlighted\n  try: # 'try' gets highlighted\n    fahrenheit=float(string.atoi(i))\n  except string.atoi_error: # 'expect' gets highlighted\n    print(repr(i), \"not a numeric value\") # 'print' gets highlighted\n```\n\n- ## `Property Names`\n  This color gets applied when accessing a property from a variable.\n\n### Javascript\n\n```javascript\nconst person = {\n  name: \"John\",\n  job: \"Programmer\",\n};\nconst { job } = person; // 'job' is highlighted\nconsole.log(person.name, job); // 'name' is highlighted\n```\n\n- ## `Property Definitions`\n  This color gets applied when defining a method or property.\n\n### Javascript\n\n```javascript\nclass Person {\n  constructor(name, job) {\n    // 'constructor' gets highlighted\n    this.name = name;\n    this.job = job;\n    this.stats = {\n      weight: 200, // 'weight' gets highlighted\n    };\n  }\n}\n```\n\n- ## `Function Properties`\n  This color gets applied when calling a method.\n\n### Javascript\n\n```javascript\nconsole.log(\"Hello World\"); // 'log' gets highlighted\n```\n\n### Python\n\n```python\nfahrenheit = float(string.atoi(i)) # 'atoi' gets highlighted\n```\n\n- ## `Tag Names`\n\n  This color applies to tags in HTML and JSX.\n\n  ### HTML\n\n  ```html\n  <div>This is a test</div>\n  <!--'div' gets highlighted in both places-->\n  ```\n\n- ## `Type Names`\n\n  This color applies to types in strongly typed languages such as Java, TypeScript, etc.\n\n  ### Typescript\n\n  ```typescript\n  const name: string = \"John\"; // 'string' gets highlighted\n  const allNames: Array<string> = [name]; // 'Array' and 'string' get highlighted\n  ```\n\n  ### Java\n\n  ```java\n  int N = 100; // 'N' gets highlighted\n  boolean[] isPrime = new boolean[N + 1]; // 'boolean' gets highlighted in both cases\n  ```\n\n- ## `Class Names`","metadata":{"id":298}}],["299",{"pageContent":"```\n\n  ### Java\n\n  ```java\n  int N = 100; // 'N' gets highlighted\n  boolean[] isPrime = new boolean[N + 1]; // 'boolean' gets highlighted in both cases\n  ```\n\n- ## `Class Names`\n  When defining or, in some cases, using a class, this is the color that will be used.\n\n### Javascript\n\n```javascript\nclass Animal {\n  // 'Animal' gets highlighted\n  constructor(type) {\n    this.type = type;\n  }\n}\nconst Fish = new Animal(\"catfish\"); // 'Animal' gets highlighted\n```\n\n### Python\n\n```python\nclass Person: # 'Person' gets highlighted\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n```\n\n- ## `Attribute Names`\n  This color gets usually gets applied in HTML and JSX tag attributes.\n\n### HTML\n\n```html\n<div className=\"dog\" id=\"the-dog\"></div>\n<!--'className' and 'id' get highlighted-->\n```\n\n### JSX\n\n```jsx\nconst MyComponent = (props) => {\n  // 'passedProp' gets highlighted\n  return (\n    <OtherComponent passedProp={props.prop}>\n      <div>{props.children}</div>\n    </OtherComponent>\n  );\n};\n```\n\n- ## `Comments`\n  This color applies to all code comments.\n\n### Javascript\n\n```javascript\n// This comment gets colored\n```\n\n### Python\n\n```python\n# This comment gets colored\n```\n\n- ## `Strings`\n  This color refers to strings in code.\n\n### Javascript\n\n```javascript\nconsole.log(\"hello!\"); // '\"hello\"' gets highlighted\n```\n\n### Python\n\n```python\nprint(\"hi!\") // '\"hi!\"' gets highlighted\n```\n\n- ## `Numbers`\n  This color refers to all numerical values including integers, floats, doubles, and more.\n\n### Javascript\n\n```javascript\nconsole.log(12345); // '12345' gets highlighted\n```\n\n### Python\n\n```python\nprint(54321) # '54321' gets highlighted\n```\n\n- ## `Booleans`\n  This color gets applied to boolean values like `true` and `false`.\n\n### Javascript\n\n```javascript\nconst t = true; // 'true' gets highlighted\nconst f = false; // 'false' gets highlighted\n```\n\n### Python\n\n```python\nt = True # 'True' is highlighted\nf = False # 'False' is highlighted\n```\n\n- ## `Regular Expressions`\n  This color gets applied for regular expressions.\n\n### Javascript\n\n```javascript\nconst str = \"ohhh hello world!\";","metadata":{"id":299}}],["300",{"pageContent":"f = False # 'False' is highlighted\n```\n\n- ## `Regular Expressions`\n  This color gets applied for regular expressions.\n\n### Javascript\n\n```javascript\nconst str = \"ohhh hello world!\";\nconst matchOs = str.match(/o/gi); // '/o/ig' gets highlighted\n```\n\n- ## `Operators`\n  Operators such as `+`, `-`, `*`, `/`, and more get highlighted with this color.\n\n### Javascript\n\n```javascript\nconsole.log(5 + (3 % 2)); // '.', '+', and '%' get highlighted\n```\n\n### Python\n\n```python\nif len(\"dog\") == 3: # '==' gets highlighted\n  print(\"dog is \" + \"3\" + \" characters long\") # '+' gets highlighted in both cases\n```\n\n- ## `Square Brackets`\n  This colors square brackets, usually the `[` and `]` characters.\n\n### Javascript\n\n```javascript\nconst arr = [0, 1, 2, 3, 4, 5]; // '[' and ']' get highlighted\n```\n\n### Python\n\n```python\narr = [0, 1, 2, 3, 4, 5]; # '[' and ']' get highlighted\n```\n\n- ## `Angle Brackets`\n  This colors angle brackets, usually the `<` and `>` characters, when they aren't being used as part of HTML and JSX tags or other token types.\n\n### HTML\n\n```html\n<h1>Hi, World!</h1>\n<!--'<' and '>' on both sides of each tag get highlighted-->\n```\n\nCongratulations on getting your syntax highlighting colors customized! Now let's learn how to further [improve the design of your theme](theme-design).","metadata":{"id":300}}],["301",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Theme Design\n\nYou can make your theme look even better by considering details like contrast, color palette, and visibility. Let's go over how to do this for your favorite themes.\n\n## Examples of popular existing themes\n\nLet's take a look at some of the most popular VS Code themes and spot some differences between them.\n\n### 1. Atom One Dark\n\nAtom One Dark is one of the most popular themes of all time. Originally made for Atom code editor, this theme has made its way across many different code editors. Take a look at the vibrant color palette used here and how well the colors contrast against each other.\n![atom one dark theme](https://replit-docs-images.util.repl.co/themes/themes/atom-one-dark.png)\n\n### 2. Nord\n\nThe Nord theme is a beautiful, minimalistic theme that uses blue, green, and white hues for syntax highlighting. While it may not use as many colors as the Atom One Dark theme, each color is carefully chosen to complement the others and the foreground.\n![nord theme](https://replit-docs-images.util.repl.co/themes/themes/nord.png)\n\n### 3. Tokyo Night (Storm)\n\nIn Tokyo Night (Storm), the contrast between the foreground text and the background is greater than in the previous two themes. It uses hues of red and purple to color the code.\n![tokyo night storm theme](https://replit-docs-images.util.repl.co/themes/themes/tokyo-night-storm.png)\n\n### 4. Night Owl\n\nOf all the themes, Night Owl has the highest contrast between the code and the background. Similar to Atom One Dark, this color palette uses a wide range of colors rather than just one.\n![night owl theme](https://replit-docs-images.util.repl.co/themes/themes/night-owl.png)\n\n### 5. Bluloco Light\n\nBluloco Light has a playful design and uses a wide range of colors in its syntax highlighting palette. In light mode, the foreground colors are brighter to improve visibility against the background.\n![bluloco light theme](https://replit-docs-images.util.repl.co/themes/themes/bluloco-light.png)\n\n## Background and Foreground","metadata":{"id":301}}],["302",{"pageContent":"![bluloco light theme](https://replit-docs-images.util.repl.co/themes/themes/bluloco-light.png)\n\n## Background and Foreground\n\nAs you may have noticed, we've been using the terms \"background\" and \"foreground\" a lot. Background refers to the color of your theme's background and Foreground refers to the content on top of the background, such as text. To get a better understanding of how this works, there is a blog post on how many of Replit's theme tokens work located here:\nhttps://blog.replit.com/rui-tokens.\n\nTo choose a background color for your theme, it's best to pick a color that is close to black or white, with a hint of a colorful hue. If you take a look back at the popular themes we featured above, notice how none of the backgrounds use sharp colors like **hot pink** or **lime green**.\n\nHere is a gif of some examples of backgrounds that should not be used for theming:\n\n![bad themes gif](https://replit-docs-images.util.repl.co/themes/bad-themes.gif)\n\nIn contrast, here are some examples of good dark mode background colors:\n\n![good dark themes gif](https://replit-docs-images.util.repl.co/themes/good-themes.gif)\n\nAnd of course, some nice-looking light mode themes with well-chosen, accessible background colors.\n\n![good light themes gif](https://replit-docs-images.util.repl.co/themes/good-light-themes.gif)\n\n## Accent Colors\n\nAccent colors should typically have a medium-high contrast relative to the background but not as high as the foreground.\n\n![accent colors](https://replit-docs-images.util.repl.co/themes/accents.png)\n\n## Syntax Highlighting\n\nNotice how the code syntax colors in the screenshots above look nice next to each other and contrast well against the background. To have legible syntax highlighting in your theme, try your best to:\n\n- Make sure your colors don't clash visually.\n- Enforce a range of brightness for your color palette.\n- Make sure your colors aren't hard to see against the background.","metadata":{"id":302}}],["303",{"pageContent":"- Make sure your colors don't clash visually.\n- Enforce a range of brightness for your color palette.\n- Make sure your colors aren't hard to see against the background.\n- Make sure your colors don't appear with such a large contrast difference against your background.\n\nIf you can nail those four points, your theme's going to look awesome. Here are some examples of bad code syntax highlighting colors:\n\n### 1. Large Brightness Difference\n\nNotice the two circled elements in the code with different colors. In this case, `app` is quite dark while the string is very bright. When the brightness of selected colors varies too much, code becomes a lot harder to read.\n![bad code syntax highlighting colors in brightness](https://replit-docs-images.util.repl.co/themes/syntax-brightness-bad.png)\n\n### 2. Poor Color Matching\n\nAlthough most of the colors in this example fall within a similar brightness range, they don't look great together. It's best to choose similar colors for different areas rather than painting a rainbow all over your code. [Color Hunt](https://colorhunt.co) has some cool palettes that you can use to color different areas of your code if you need some inspiration.\n![bad color matching](https://replit-docs-images.util.repl.co/themes/bad-color-matching.png)\n\n### 3. Low Contrast\n\nIf you have to squint to see your code, that is not good. Make sure your code has enough contrast so that it can be easily read, especially by those with impaired visibility.\n![super low contrast](https://replit-docs-images.util.repl.co/themes/super-low-contrast.png)\n\n---\n\nAwesome! Keep building great themes and you'll become a pro in no time! If you're wondering how to get your favorite theme from VS Code ported over to Replit, check out the [next tutorial](port-from-vscode)!","metadata":{"id":303}}],["304",{"pageContent":"# Facts Amjad Masad should be aware of\n\nThe year is 2023.\n\nAmjad Masad has 127.4K followers on twitter.\n\nAmjad Masad follows 261 people on twitter.\n\nAmjad Masad is a fan of Paul Graham.\n\nAmjad Masad is a fan of Elon Musk.\n\nAmjad Masad has 2.1K followers on Replit.\n\nAmjad Masad is following 468 people on Replit.\n\nAmjad Masad's github profile is https://github.com/amasad.\n\nAmjad Masad has 1.8K followers on Github.\n\nAmjad Masad is following 33 people on Github.\n\nAmjad Masad's personal website is https://amasad.me/.\n\nAmjad Masad graduated from the Princess Sumaya University for Technology.\n\nReplit has around 80 employees, and almost 70% of them are engineers.\n\nReplit's documentation is located at https://docs.replit.com/.\n\nReplit's discord server is located at https://replit.com/discord.\n\nReplit's clothing shop is located at https://shop.replit.com/.\n\nReplit's support team can be contacted at https://replit.com/support.\n\nReplit's community forum is located at https://ask.replit.com.\n\nReplit's changelog is located at https://docs.replit.com/updates.\n\nReplit's github account is located at https://github.com/replit.\n\nReplit's github account has 128 repositories.\n\nReplit has 426 followers on github.\n\nReplit's Cofounders are Faris Masad and Haya Odeh.\n\nFaris Masad is Amjad Masad's younger brother.\n\nHaya Odeh is Amjad Masad's wife.\n\nReplit's headquarters is located in San Francisco.\n\nReplit has a secondary office located in New York.\n\nReplit's official accounts on replit are https://replit.com/@replit and https://replit.com/@util.","metadata":{"id":304}}],["305",{"pageContent":"# Replit About Page\nThis is a detailed description of the About page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe about page has the following content, in markdown:\n\n# Our Mission\n## Is to bring the next billion software creators online.\nWe build powerful, simple tools and platforms for learners, educators, and developers.\n\n---\n\n# Section 2\nThe second section has a header \"Team\" followed by pictures, titles, and names of all the employees that work there.\n\n---\n\n# Section 3\nA large header \"Stay in touch\".  Under it is a link to follow Replit on twitter.  Replit's twitter handle is \"@replit\".\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":305}}],["306",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":306}}],["307",{"pageContent":"# Replit Careers Page\nThis is a detailed description of the Careers page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThe page structure is depicted by Markdown below.\n\n# Careers at Replit\nWe're on a mission to bring the next billion software creators online. Creating the future of computing is a team effort though.\n<button>See open positions</button>\n\n# Announcement: $80M Series B\nReplit recently announced our $80M Series B to bring the next billion software creators online. We're focusing on: building the world's most ubiquitous programming environment; inspiring creativity and generating value for creators through community; and designing simple yet scalable infrastructure primitives for the next generation of creators. We're using the new financing to continue innovating and to grow the team with other talented and passionate builders.\n\nRead more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about","metadata":{"id":307}}],["308",{"pageContent":"Read more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about\nWe make programming more accessible by building powerful yet approachable tools and platforms for developers, students, and educators. We want to blur the line between learning and making– a place where you can hang out, tinker with ideas, learn new concepts, and launch a business all in the same day.\n\nReplit is a platform for both newcomers and experts to express themselves. While computers are the most powerful tools to exist in the history of humanity, most people are just consumers of these machines. Our goal is to empower people as creators and give them computer superpowers– where every app, website, and program can be as personal as a home-cooked meal.\n\nCreative empowerment is reflected in our team. We are transparent and open, value collaboration across different fields, and constantly talk to our users. Anyone and everyone (including interns!) can have an enormous impact and product-changing ideas. All you have to do is share.\n\nWe are at a unique point in time to be working on these problems and in a unique position to help solve them. Especially as global connectivity increases, browsers become more sophisticated, and schools begin to understand the need for coding literacy, Replit has a responsibility to help make the world of computing more equitable, powerful, and fun.\n\nNo matter how much we like computers, this all has to get done by people (us)! We celebrate all kinds of backgrounds, all of which inspire our conversations with computer science, education, psychology, design, business, art, literature, biology, and more. Help us expand that list!\n\nTo read more about what we care about, check out our [operating principles](https://blog.replit.com/operating-principles), or read about [reasons not to join Replit](https://blog.replit.com/reasons-not-to-join-replit).\n\n# What we work on","metadata":{"id":308}}],["309",{"pageContent":"# What we work on\nOn any given day, we tackle some of the most challenging problems in computing (sandboxing, distributed systems, scheduling) and the the most interesting problems in design and HCI (how do you create a learnable programming environment?). Lucky for us, features like multiplayer collaboration happen to be product, design, and engineering puzzles all at the same time.\n\nWe are constantly experimenting, prototyping, and learning how to make collaborative programming inclusive and fun. We love demos, brainstorming, and bringing research ideas to life that impact millions of people.\n\nRead more about some of our most recent and ongoing projects on our blog:\n\n[Focusing on a solid foundation](https://blog.replit.com/quality)\n[A database for every repl](https://blog.replit.com/database)\n[CLUI: Building a Graphical Command Line](https://blog.replit.com/clui)\n[What we build during Hack Weeks](https://blog.replit.com/hackweek22)\n\n# How we interview\nWe look for people who are excellent at their craft and want to share that expertise with others. Regardless if you're an engineer, designer, marketer, or a wildcard, we want to see that your fundamentals are nailed down, you're resourceful, responsive to feedback, and able to think on your toes!\n\nThat means that we won't be testing you with brainteasers that are unrelated to the real world. We ask you questions related to real challenges at Replit.\n\nWe are always looking for new talent and value everyone who wants to contribute— from fulltime to interns. To see some first hand accounts and specific examples about our process, check out our [blog post on hiring interns](https://blog.replit.com/intern-interview), our [initial engineering challenge](https://otcatchup.util.repl.co/), and [a mock Replit interview with an Ex-Facebook Engineer](https://www.youtube.com/watch?v=nDZ3hhzsUx8).\n\n# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity","metadata":{"id":309}}],["310",{"pageContent":"# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity\n - Your choice of new equipment and software\n - Health, dental, and vision insurance\n - Autonomy at work\n - Flexible work hours\n - Learning & development stipend\n - Monthly health & wellness stipend\n - Generous parental leave\n - Unlimited PTO (2 weeks minimum required)\n - 401k matching\n - Commuter benefits\n - Expensed lunch\n - Yearly offsites!\n\n# Open positions\n\nSenior Accountant\nCanada (overlap 4 hours with US Pacific Time)\n\nProduct Designer\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Support & Internal Tools\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Frontend Infrastructure (Workspace/IDE)\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nDeveloper Advocate\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nEngineering Manager, Product and Growth Engineering\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Anti-Abuse & Security\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Applied AI/ML\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - OS\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - Distributed Systems\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nOur team is a blend of former founders, public educators, designers and engineers from Google, Mozilla, Facebook, Spotify, Box, Scratch, and more-- all with educations that range from completely self-taught to bootcamp graduates and PhDs.\n\nThat's all to say: these job listings are approximations! If you're a curious and passionate person, we want to hear from you. We are all generalists who like to dip our toes into different fields and skillsets, so if a job isn't a 100% fit, don't worry!\n\n---\n\nThe structure has ended.","metadata":{"id":310}}],["311",{"pageContent":"---\n\nThe structure has ended.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":311}}],["312",{"pageContent":"# Replit features/Bounties page\nThis is a detailed description of the features/Bounties page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Find the perfect developer for your project.\nTurn your ideas into reality with the help of Replit's top creators. Get started today and watch your project come to life.\n<button>Create a Bounty</button>\n\nOn the right hand side of the section is an illustration of two rockets taking off from a tilted grid resembling a graph.\n\n---\n\n# Section 2\nThe next section has a header \"What can you get built with Bounties?\".  Under that are some case studies and examples of projects that can be built with bounties.\n\n---\n\n# Section 3\nThe third section has a header \"Describe what you wnat.  We'll take it from there.\"  Underneath that are some numbered steps:\n\n - Describe what you want\n   - Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator","metadata":{"id":312}}],["313",{"pageContent":"- Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator\n   -Once your Bounty is live, Replit creators will apply to complete the work. Based on users’ applications and profiles you can select who you think is the best fit.\n - Review work submussion\n   - After connecting, you can chat about your Bounty over email or Discord. Once the Bounty Hunter has completed the work, they’ll share their submission.\n - Seamlessly host on Replit\n   - Once your project is built, you can deploy and host the work directly on Replit!\n\nUnder the numbered steps is a large centered button that says \"Create a Bounty\".\n\n---\n\n# Section 4\nA header \"Meet our top creators\" is shown.  Under that is a horizontal carousel of top Replit content creators:\n\n- Bookie0\n- CodingCactus\n- Coder100\n- CoderGautamYT\n- RayhanADev\n\nUnder the creator list is a link \"Apply to be a Bounty Hunter\"\n\n---\n\n# Section 5\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under is a list of questions and answers:\n\n - What are bounties?\n   - Bounties are the easiest way to exchange Cycles for various types of work on Replit. Do you have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! You’ll be able to review applications and select the developer (which we call a Bounty Hunter) to code the solution (which we call the “work”) for you. When you post a Bounty, Replit will deduct Cycles from your account to hold until completion of the project.\n - How do I post a Bounty for others to complete?\n   - You can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).","metadata":{"id":313}}],["314",{"pageContent":"- What if I want to complete Bounties and earn Cycles?\n   - If you want to become a Bounty Hunter, you can apply [here](https://replit.typeform.com/to/ss7IxmIf). Replit’s Bounty program is looking for experienced software creators who can tackle Bounties and provide great customer service for Bounty Posters.\n - Are there any fees for posting a Bounty?\n   - Yes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also note, Replit will hold the entire amount of Cycles you’ve promised for the Bounty from your account when posting a Bounty.\n - Whar rights are transferred in the work upon completion?\n   - All rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":314}}],["315",{"pageContent":"# Replit features/Community page\nThis is a detailed description of the features/Community page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Community\n# Talk, learn, collab.\nJoin our global community of coders, where there’s a place for everyone, beginners and experts alike.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Learn\n   - Title: Learn from the very best.\n   - Description Paragraphs:\n     - **Learn anything.** Take a peek at any public Repl to learn new languages, approaches and technical solutions.\n     - **Experiment with us.** Our coders create everything from games to interactive experiments and biological simulations. It's a wild west out there.\n     - **Share with the world.** Made something cool? Share it instantly with our global community for feedback and kudos.\n - Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.","metadata":{"id":315}}],["316",{"pageContent":"- Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.\n     - **Q&A.** Post a replit embed on a site like Stack Overflow, and get feedback on your running code snippets.\n     - **Sandboxes.** Easily share isolated parts of your projects to test without fear.\n - Forking\n   - Title: Remix any project to make it your own.\n   - Description Paragraphs:\n     - **Remix.** Love someone’s repl? Remix it to add anything you want.\n     - **Templates**. Browse our catalogue of templates and skeleton files.\n - Share\n   - Title: Share your creations with the Replit Community.\n   - Description Paragraphs:\n     - **Community Feed.** See what other people are building and get inspired.\n     - **Community Hub.** Get involved in Replit's community events, opportunities, and platforms (including our 18K+ member discord!).\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit","metadata":{"id":316}}],["317",{"pageContent":"| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":317}}],["318",{"pageContent":"# Replit features/Ghostwriter page\nThis is a detailed description of the features/Ghostwriter page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Meet Ghostwriter, your partner in code.\nYesterday, coding was slow, repetitive, and hard to learn. Today, all that changes with Replit's in-browser coding AI.\n<button>Code in the future today</button>\n\nOn the right hand side of the section is an illustration of two blue glowing robotic hands over a crystal \"fortune-teller\" ball.  A sparkle reflects off of the crystal ball.\n\n---\n\n# Section 2\nThe next section has a header \"Ghostwriter uses AI to help you write better code, faster.\".  The following features are listed:\n\n - Generate functions & files\n   - Description: Repetitive boilerplate code is a thing of the past.\n - Code faster with suggestions\n   - Description: Tab or swipe to autocomplete blocks of code, or full functions.\n - Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.","metadata":{"id":318}}],["319",{"pageContent":"- Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.\n\n---\n\n# Section 3\nThe third section describes a number of features with a header and description.\n\n - It's your new pair programmer\n   - Description: Save time and get unstuck. Tell Ghostwriter what you’re thinking and it will generate and transform code to help you get there.\n - Your new creative consultant.\n   - Unleash your creativity. Ghostwriter can style websites, invent feature ideas, show you new ways to code, and way more.\n - Your new trusted tutor.\n   - Learn on the job. Ghostwriter helps you learn unfamiliar APIs and programming languages while you code.\n\n---\n\n# Section 4\nA header \"Finally, code at the speed of thought.\"  Some more features are laid out in a grid-like layout showing the following features:\n\n - Use Ghostwriter in your favorite langauges\n   - Python, Ruby, JavaScript, TypeScript, HTML, CSS, Go, Lisp, Haskell, Bash, C, C++, Rust, Java, JSON\n - Designed to get out of your way\n   - Work faster and more accurately with assistive AI tooling.\n - Use Ghostwriter on the go\n   - Support for Replit's native mobile app for iOS and Android is coming back soon.\n - Optimized for spped\n   - It's fast, with 500ms average response time, and it's only getting faster.\n\n---\n\n# Section 5\nA header \"What people are saying\" followed by a paragraph \"Trusted by developers around the globe, Ghostwriter is the new normal for software creation.\".  Under the paragraph is a horizontal carousel of quotes from users.\n\n---\n\n# Section 6\nA header \"The future of coding is here, and it lives in your cursor.\" followed by a button \"Try Ghostwriter today\"\n\n---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?","metadata":{"id":319}}],["320",{"pageContent":"---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?\n  - Ghostwriter is Replit’s suite of artificial intelligence features: Complete Code (our flagship feature), Generate Code, Transform Code, and Explain Code. Together, they enhance your development experience on Replit.\n- How does Ghostwriter work?\n  - Ghostwriter returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Ghostwriter considers what you type and other context from your Repl like the programming language you’re using.\n- How much does Ghostwriter cost?\n  - Currently, Ghostwriter costs 1,000 [Cycles](https://docs.replit.com/cycles/about-cycles) per month ($10 USD/month). You can find more pricing details on our [pricing page](https://replit.com/pricing).\n- Which programming languages does Ghostwriter support?\n  - Ghostwriter performs best with JavaScript and Python code, but it supports 16 languages in total. The current list includes: Bash, C, C#, C++, CSS, Go, Java, JavaScript, HTML, PHP, Perl, Python, R, Ruby, Rust, and SQL. Effectiveness may vary by language.\n- Can I turn off Ghostwriter?\n  - Yes. You can turn off Ghostwriter Complete Code in the Replit workspace.\n- Can Ghostwriter be used on other platforms?\n  - No. Ghostwriter is exclusive to Replit.\n- How good is Ghostwriter\n  - Good! And we’re developing Ghostwriter to be faster, more powerful, and more accessible than any comparable offering. Our product features are constantly getting better and faster.\n- How can I help improve Ghostwriter?","metadata":{"id":320}}],["321",{"pageContent":"- How can I help improve Ghostwriter?\n  - Use Ghostwriter and share your feedback using the “feedback” link with Replit as you code. You should also report bugs (offensive output, code vulnerabilities, unwanted data) to our Support team at replit.com/support. Replit works and ships fast, takes trust and safety seriously, and we are committed to improving our products and always getting better.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":321}}],["322",{"pageContent":"# Replit features/Hosting page\nThis is a detailed description of the features/Hosting page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Hosting\n# Host anything, anytime.\nYou handle building your next idea. We’ll figure out the hosting.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Launch Ease\n   - Title: Everything you need to launch.\n   - Description Paragraphs:\n     - **Host**. Everytime you create a repl, we automatically host it on our servers.\n     - **Deploy**. Your apps are always live with an instantly sharable link. Creating a repl is deploying.\n     - **Run**. Instantly run and share your apps, with no deployment process.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.","metadata":{"id":322}}],["323",{"pageContent":"- Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":323}}],["324",{"pageContent":"# Replit features/IDE page\nThis is a detailed description of the features/IDE page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Instant IDE\n# Code from your browser.\nStart coding instantly, right from your browser. With GitHub integration and support for nearly every major programming language, Replit is the best place to code.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the IDE feature page consists of the following features:\n\n - Minimal Setup\n   - Title: No downloads, no configs, no setups\n   - Description Paragraphs:\n     - **In your browser**. Replit runs fully in your browser, so you can get started coding in seconds. No more ZIPs, PKGs, DMGs and WTFs.\n     - **Any OS, any devic**e. Use Replit on macOS, Windows, Linux, or any other OS. Have a Chromebook? We’ve got that covered, too.\n     - **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:","metadata":{"id":324}}],["325",{"pageContent":"- **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:\n     - **Code faster with suggestions** Tab or swipe to autocomplete blocks of code, or full functions.\n     - **Generate functions & files** Repetitive boilerplate code is a thing of the past.\n     - **Refactor & transform code** Change the structure or functionality of your project.\n - Virtual Machines\n   - Title: Your machine, our cloud.\n   - Description Paragraphs:\n     - **Customize your setup**. Make your workspace feel just like home with custom themes and plugins.\n     - **All your files**. Store, organize and manage your files and directories, just as you would on your local machine.\n     - **Linting, debugging and auto-complete**. Enjoy standard and advanced IDE features at your fingertips.\n - Github Integration\n   - Title: Clone, commit and push to any GitHub repo.\n   - Description Paragraphs:\n     - **Repl from Repo**. Get started with any Github repo, right from your browser. Commit and push without touching your terminal.\n     - **Get the badge**. Add our “Run on Replit” badge to your README to help collaborators contribute to your repo.\n\n---\n\n# Section 3\nThe third section is a horizontal list of features, consisting of the following\n\n - Speed\n   - Description: Get 0.2-0.5 vCPUs for free, or upgrade for 2 dedicated CPUs.\n   - Icon: A yellow lightning bolt icon\n - Memory\n   - Description: Get 500MB of free memory, or upgrade for 2GB.\n   - Icon: A green CPU icon\n - Storage\n   - Description: Enjoy 100MB of free storage, or upgrade for unlimited storage.\n   - Icon: A purple database icon\n - Security\n   - Description: Our cloud infrastructure is thoroughly tested and fault-tolerant.\n   - Icon: A blue lock icon.\n\n---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:","metadata":{"id":325}}],["326",{"pageContent":"---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:\n     - **Whatever you write in.** Our IDE compiles and runs Python, HTML, JavaScript, C++, Java, and more.\n     - **Try new languages, frameworks, and libraries.** Use our starter templates and examples to finally learn that new framework.\n - Templates\n   - Title: Mix, match, and remix with templates\n   - Description Paragraphs:\n     - **Never start from scratch again**. Kickstart your next big idea with code snippets, project boilerplates, and tutorials for countless languages and frameworks.\n     - **Publish your templates**. Contribute back to the community and to our template gallery!\n - UPM\n   - Title: Use our Universal Package Manager.\n   - Description Paragraphs:\n     - **A package manager for every language.** Don’t think about yarn, npm, maven, or poetry. UPM saves you a headache by running a package manager for whatever language you’re using.\n     - **Automatic installs**. Just import and press run. UPM will automatically detect what packages you need just from your code, without having to install packages manually.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Multiplayer\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":326}}],["327",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":327}}],["328",{"pageContent":"# Replit features/Multiplayer page\nThis is a detailed description of the features/Multiplayer page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n\n# Section 1\nThis section consists of the following content:\n\n## Multiplayer\n# Code together.\nCode together, right from your browser. With Multiplayer, you can write, review and debug together, in real time. Share your entire Repl projects, or live Repl Embeds with the community.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Multiplayer feature page has a video describing multiplayer and then follows with the following features:\n\n - Synchronous coding\n   - Title: Code together, synchronously.\n   - Description Paragraphs:\n     - **See each other type**. Enjoy a Google Docs-like editing experience, where you can see your collaborators’ cursors.\n     - **Shared compute engine**. Run code and see the same results, together.\n     - **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:","metadata":{"id":328}}],["329",{"pageContent":"- **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:\n     - **Thanks for the invite.** Easily invite anyone to collaborate with you, or just view your Repl.\n     - **Frictionless sharing.** Share your Repl projects or your live Repl Embeds with anyone.project.\n - Gitless Multiplayer collaboration\n   - Title: No git? No problem.\n   - Description Paragraphs:\n     - **Gitless collaboration**. Multiplayer allows you to work together without having to push, pull, and commit just to collaborate on simple issues.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":329}}],["330",{"pageContent":"# Replit Landing Page\nThis is a detailed description of the main index page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe header section has a starfield background that resembles stars in hyperspace flight.  The speed of the stars increase as the user scrolls down.  The header section is about as tall as the browser's initial viewport.\n\nThe content on the header section is as follows:\n\n# Make something great.\nBuild software collaboratively from anywhere in the world, on any device, without spending a second on setup\n<!--The button scrolls you to the next section-->\n<button>Start creating</button>\n\n---\n\n# Section 2\nThe section under the header is a showcase of featured work and quotes from users.  The content before the featured work is as follows:\n\n## Join a community of 20 million software creators building on Replit\nShare to, learn from, and remix the work of top builders around the world\n\n### Featured work\n\nUnder the \"Featured work\" header is a list of projects moving across the screen horizontally as a carousel.  Some of the projects on the list consist of:\n\n - Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website","metadata":{"id":330}}],["331",{"pageContent":"- Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website\n - Replyte\n   - Author: ironcladdev\n   - Type: Chat App\n - SSSPICY!\n   - Author: torcado\n   - Type: Award-Winning Game\n - Stripe Checkout\n   - Author: stripe\n   - Type: Payments Integration\n - Blob Generator\n   - Author: omar\n   - Type: Creative Coding\n - Cursor Hangout\n   - Author: techpandapro\n   - Type: Live Multiplayer\n - Rock Paper Camera\n   - Author: codingmaster398\n   - Type: Computer Vision\n - DefCraft\n   - Author: phil-mac\n   - Type: 3D World Builder\n - Your First Feature Flags\n   - Author: launchdarkly\n   - Type: Production Template\n\nUnder the showcase projects there is a list of quotes by users under a header \"What people are saying\".  There is a carousel of quotes by multiple users.\n\n---\n\n# Section 3\nThe third section lists some of the large and important features Replit has to offer.  Each feature includes an animated graphic, a title, and a description.\n\n - Replit Mobile App\n   - Title: Don't try this at home\n   - Description: With the Replit mobile app, you can build and run your projects from anywhere in the world.\n   - Graphic: A phone with the Replit Workspace (IDE) on it with a code editor open.  Not animated.  The code displayed on the phone is an express app.\n - Replit Workspace\n   - Title: Build anything with zero setup\n   - Description: Instantly start and rapidly develop projects in any programming language or framework.\n   - Graphic: The Replit Workspace (IDE) displayed on the dimensions of a desktop device.  The code displayed in it is a react app that renders a blob UI pattern against a purple background.\n - Hosting\n   - Title: Instantly host everything\n   - Description: All your projects are instantly live. With zero setup deployment and custom domains, sharing your work with the world is easy.\n   - Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer","metadata":{"id":331}}],["332",{"pageContent":"- Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer\n   - Title: Create together, wherever\n   - Description: Live collaboration is built-in. Create together with others from anywhere in the world, on any device.\n   - Graphic: A small code snippet is shown with multiple cursors in it, each cursor signifying a multiplayer user.\n - Powerups\n   - Title: Power up your projects\n   - Description: Accelerate your coding with AI assistance. Boost your speed, storage, and memory. Keep your app running forever. Take your project to the next level.\n   - Graphic: AI code generation and autocompletion are shown alongside the Always-On Replit Product and some meters showing a lot of CPU, RAM, and storage.\n - Templates and Tutorials\n   - Title: Learn while you build\n   - Description: Take step-by-step tutorials that teach you how to build your dream project, whatever it may be.\n   - Graphic: Three stacked carousels moving at different speeds are shown.  Each item in the carousel is a different tutorial or template containing a title and an icon image, most of which are programming language icons.\n - Bounties\n   - Title: Get paid to create\n   - Description: Get hired to tackle projects and earn Cycles. Make your mark on the world as a builder.\n   - Graphic: An ever-increasing number of cycles, Replit's token currency is shown increasing by 200 every second.\n\n---\n\n# Section 4\nThe fourth section has a header that says \"Make something great today with Replit!\".  Under the header is a button with the text \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |","metadata":{"id":332}}],["333",{"pageContent":"|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":333}}],["334",{"pageContent":"# Replit <PAGE> Page\nThis is a detailed description of the <PAGE> page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":334}}],["335",{"pageContent":"# Replit Pricing Page\nThis is a detailed description of the Pricing page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nA header \"Personal plans\" followed by a short paragraph \"Plans for your personal work.\".  After are two different plan cards:\n\n - Free ($0)\n   - Description: All you need to get started.\n   - Features:\n     - Unlimited Public Repls\n     - Free storage (500MB)\n     - 500MB memory\n     - 0.2-0.5 vCPUs\n     - Live multiplayer collaboration\n - Hacker ($7/month or $74/year)\n   - Description: Everything on Free tier and more.\n   - Features:\n     - Unlimited Private Repls\n     - One 4x Boosted Repl\n     - Coding Boost\n     - One Always-On Repl\n     - 10x account storage (5GB+)\n     - 2x Repl storage (1GB per Repl)\n     - More powerful machines\n\n---\n\n# Section 2\nA header \"Cycles $0.01 each\" followed by a paragraph \"Digital tokens for added performance and functionality. Buy as-needed or Auto-Refill so you don't run out. [Buy Cycles](https://replit.com/cycles/buy-cycles)\".  After is a pricing list.\n\n - Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls","metadata":{"id":335}}],["336",{"pageContent":"- Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls\n - Private Repls\n   - Description: Make Repls visible only to you\n   - Cost: 500 Cycles monthly\n   - Repls: Unlimited Repls\n - Boosted Repls\n   - Description: Your Repl will be up to 32x faster\n   - Cost: 20 - 350 Cycles daily\n   - Repls: per Repl\n - Always On Repls\n   - Description: Your Repl will stay awake\n   - Cost: 20 Cycles daily\n   - Repls: per Repl\n\n---\n\n# Section 3\nA header \"Organization plans\" followed by a paragraph \"Plans for Organizations — businesses, schools, institutions, etc. Have a question about our plans? [Get in touch](https://replit.com/support).\".  Under are plans for business and education teams.\n\n - Business\n   - Description: Unlimited teams, members, & power\n   - Cost: $15/user/mo\n   - Features:\n     - Unlimited private Repls\n     - Unlimited Teams\n     - See who’s coding\n     - 5 Boosted Repls\n     - 5 Always On Repls\n     - Lots of storage (10 GB+)\n     - 2x Repl size (1 GB per Repl)\n     - 4x Memory (2 GB per Repl)\n     - 4x Speed (2 vCPUs)\n - Education\n   - Description: Unlimited teachers, teams, & students. *This plan is offered to all teachers/education institutions. Please use your education affiliated email address when signing up to ensure you receive the best performance and speed. If you are a student, you are welcome to use Teams for Friends.\n   - Cost: Free\n   - Features:\n     - Private by default\n     - Unlimited teams & students\n     - See who’s coding\n     - Create projects and accept submissions\n     - Autograded I/O & unit tests\n     - Lots of storage* (10 GB+)\n     - 2x Repl size* (1 GB per Repl)\n     - 4x Memory* (2 GB per Repl)\n     - 4x Speed* (2 vCPUs)\n\n---\n\n# Section 4\nA header \"Trusted by\" followed by the brand names of the following companies:\n\n - Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:","metadata":{"id":336}}],["337",{"pageContent":"- Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":337}}],["338",{"pageContent":"# Replit Employee Organization Chart\nThis is a chart of Replit's organization employees.  If the human speaking to you has a valid username included in the table, they work at Replit and are an employee.\n\nThe format of a row in the following table is | `full name` | `position` | `replit username(s)` | `manager` | `pronouns` |.  Each row stands for a Replit employee.\n\n| Name | Position | Replit Username | Manager | Pronouns\n|-|-|-|-|-|\n| Amjad Masad | CEO | amasad | N/A | He/Him\n| Kaitlan Norrod | Executive Assistant | kaitlannorrod | Amjad Masad | She/Her\n| Rigsby Stevenson | Personal Assistant | RigsbyStevenson | Amjad Masad | He/Him\n| Cecillia Ziniti | General Counsel & Head of Business Development | CeeZee22 | Amjad Masad | She/Her \n| Haya Abdalla | Founder, Designer | hayaodeh | Amjad Masad | She/Her\n| Jassim Latif | VP of Operations | jassimrepl | Amjad Masad | He/Him\n| Kyle Alisharan | CFO | N/A | Amjad Masad | He/Him\n| Moudy Elkammash | Product Architect | moudy | Amjad Masad | He/Him\n| Faris Masad | Workspace Engineer | masfrost | Amjad Masad | He/Him\n| Jeremy Press | Product Engineering Manager | jpress | Amjad Masad | He/Him\n| Laima Tazmin | Mobile Engineering Manager | replitlaima | Amjad Masad | She/Her\n| Matt Iselin | Site Reliability Engineer | matiselin | Amjad Masad | He/Him\n| Reza Shabani | Data Scientist Manager | RezaAtReplit | Amjad Masad | He/Him\n| Scott Kennedy | Platform Engineer | scottatreplit | Amjad Masad | He/Him\n| Tabish Gilani | Head of Product | tabishg | Amjad Masad | He/Him |\n| Madelyn Rogers | Office Manager | N/A | Kaitlan Norrod | She/Her |\n| Bardia Pourvakil | Support Manager | bardia | Cecilia Ziniti | He/Him |\n| Harmeet Bhatia | Part-Time Legal Intern | TheDrone7 | Cecillia Ziniti | He/Him\n| Rob Kohse | Associate General Counsel | RobRplt | Cecillia Ziniti | He/Him\n| Lena Sawyer | Head of Community | LenaAtReplit | Cecillia Ziniti | She/Her\n| Barron Webster | Designer | BarronWebster | Haya Abdalla | He/Him","metadata":{"id":338}}],["339",{"pageContent":"| Lena Sawyer | Head of Community | LenaAtReplit | Cecillia Ziniti | She/Her\n| Barron Webster | Designer | BarronWebster | Haya Abdalla | He/Him\n| Joe Baker | Designer | BakerJoe | Haya Abdalla | He/Him\n| Christine Lac | People Operations Coordinator | ChristineLac | Jassim Latif | She/Her\n| Jenna Freedberg | Head of Talent | JennaFreedberg | Jassim Latif | She/Her\n| Lauren Peterson | HR Consultant | N/A | Jassim Latif | She/Her\n| Aman Gupta | FP & A | akgcoder | Kyle Alisharan | He/Him\n| Antoine Buteau | Business Operations | antoine | Kyle Alisharan | He/Him\n| Hassan Adil | Head of Accounting & Treasury | hassanAdil01 | Kyle Alisharan | He/Him\n| Colton Donnelly | Software Engineer, DevEx | coltonatreplit | Faris Masad | He/Him\n| Harytyun Amjanyan | Workspace Engineer | N/A | Faris Masad | He/Him\n| Ryan Mullican | Software Engineer, DevEx | ryantmreplit | Faris Masad | He/Him\n| Toby Ho | Workspace Engineer | tobyho | Faris Masad | He/Him\n| Eddie Nuno | Product Engineer | eddieatreplit | Jeremy Press | He/Him\n| Gian Segato | Product Engineer | gian | Jeremy Press | He/Him\n| Joe Thom | Product Engineer | JoeThom1 | Jeremy Press | He/Him\n| Jonathan Unikowski | Product Engineer | Jeremy Press | He/Him\n| Madison Fitch | Product Engineer | MadisonFitch | Jeremy Press | She/Her\n| Mike Hadley | Product Engineer | mikeatreplit | Jeremy Press | He/Him\n| Phil MacEachron | Product Engineer | phil-mac | Jeremy Press | He/Him\n| Talor Anderson | Product Engineer | TalorAnderson | Jeremy Press | He/Him\n| Ted Summer | Product Engineer | replitted | Jeremy Press | He/Him\n| Tiga Wu | Product Engineer | N/A | Jeremy Press | He/Him\n| Wade Bourne | Product Engineer | AllAwesome497 | Jeremy Press | He/Him\n| Abdel Rahman Elleithy | Mobile Engineer | abdelWithReplit | Laima Tazmin | He/Him\n| Dina Benayad-Cherif | Mobile Engineer | dinabc | Laima Tazmin | She/Her\n| Ian Kirkpatrick | Mobile Engineer | ink | Laima Tazmin | He/Him\n| Matthew Chen | Mobile Engineer | MCChen | Laima Tazmin | He/Him","metadata":{"id":339}}],["340",{"pageContent":"| Ian Kirkpatrick | Mobile Engineer | ink | Laima Tazmin | He/Him\n| Matthew Chen | Mobile Engineer | MCChen | Laima Tazmin | He/Him\n| Alexis Cervantes Caballero | SRE Engineer | acervantes | Matt Iselin | He/Him\n| Bradley Heilbrun | SRE Engineer | bheilbrun | Matt Iselin | He/Him\n| Sergey Orlov | Security Engineer Contractor | HackYourRepl | Matt Iselin | He/Him\n| Juan Carlos Sigler Priego | Software Engineer, Data Infrastructure | JuanSigler | Reza Shabani | He/Him\n| Madhav Singhal | Data Engineer | singhalmadhav | Reza Shabani | He/Him\n| Muhammad Sareini | Data Engineer | msareini | Reza Shabani | He/Him\n| Aman Mathur | Product Manager | amanm3 | Tabish Gilani | He/Him\n| Soren Rood | Product Manager | soren | Tabish Gilani | He/Him\n| Conner Ow | Support Engineer | IroncladDev, ReplitIronclad | Bardia Pourvakil | He/Him\n| Diana Pereira | Support Specialist Contractor | DianaAtReplit | Bardia Pourvakil | She/Her\n| Jesse Nichols | Support Specialist | jesse | Bardia Pourvakil | He/Him\n| Shane Vandegrift | Support Engineer | Vandesm14 | Bardia Pourvakil | He/Him\n| David Morgan | Teacher and Learner Community | DavidAtReplit | Lena Sawyer | He/Him\n| Ian Simpson | Teacher Community Moderator | IanAtReplit | Lena Sawyer | He/Him\n| Ornella Altunyan | Dev Relations | ornella | Lena Sawyer | She/Her\n| Clement Roze | Design Intern | Bookie0 | Barron Webster | He/Him\n| Devin Halladay | Designer | theflowingsky | Barron Webster | He/Him\n| Omar Abdul-Rahim | Designer who codes | omar | Barron Webster | He/Him\n| Tyler Angert | Designer | tyler | Barron Webster | He/Him\n| Calista Quejada | Technical Sourcer/Recruiter | N/A | Jenna Freedberg | She/Her\n| Chase Johnson | Lead Recruiter | HashtagCJ | Jenna Freedberg | He/Him\n| Ryan Eakin | Recruiter | RyanEakin | Jenna Freedberg | He/Him\n| Veronica Sanchez | Recruiting Coordinator | v-sanchez | Jenna Freedberg | She/Her\n| Yuvraj Chanda | Finance Intern | yuvi7 | Aman Gupta | He/Him\n| Anshul Bhide | India Growth Lead | anshul | Antoine Buteau | He/Him","metadata":{"id":340}}],["341",{"pageContent":"| Yuvraj Chanda | Finance Intern | yuvi7 | Aman Gupta | He/Him\n| Anshul Bhide | India Growth Lead | anshul | Antoine Buteau | He/Him\n| Horacio Lopez | Business Operations Associate | lopezhoracio | Antoine Buteau | He/Him\n| Jeff Burke | Business Operations Manager | jeff | Antoine Buteau | He/Him\n| Conner Schafer | Marketing | replitconner | Jeff Burke | He/Him","metadata":{"id":341}}],["342",{"pageContent":"# Amjad Masad Q&A\nThis is a Question-And-Answer session with Amjad Masad.\n\n---\n\nHuman: What is your twitter handle?\nAmjad Masad: My twitter handle is @amasad\n\n\nHuman: What social media platform do you use mainly?\nAmjad Masad: I mainly use twitter.  I often make podcasts as well.\n\n\nHuman: What is your Replit profile?\nAmjad Masad: My Replit profile has the handle @amasad.  I have over 2,000 followers.\n\n\nHuman: Who are the members of your family?\nAmjad Masad: My wife's name is Haya and my brother's name is Faris.  I have two children as well.\n\n\nHuman: What do you do in your free time?\nAmjad Masad: I enjoy working out and also spending time with my family.\n\n\nHuman: On Replit, have you worked with anyone not in your staff? (i.e. with Replit Teams)\nAmjad Masad: I have not but maybe I should. Are you part of a team?\n\n\nHuman: How old are you?\nAmjad Masad: I was born in 1988\n\n\nHuman: What's it like being a CEO?\nAmjad Masad: It's like a massive amount of responsibilities -- people think you don't have a boss as a CEO and that might be true that you don't have one boss, you have many many bosses like your customers, users, investors, and even your employees -- all these people depend on you!\n\n\nHuman: how did you find out about coding?\nAmjad Masad: When I got my first computer in 1993 there was no GUI so you had to learn a bit of commands to run DOS. That's almost like coding.\n\n\nHuman: What did you use to learn coding?\nAmjad Masad: Mostly Basic then Visual Basic\n\n\nHuman: what got you into coding?\nAmjad Masad: I really loved computers and I wanted them to do interesting things so coding was natural to me.\n\n\nHuman: What's your favorite IDE?\nAmjad Masad: I literally only use Replit and been the case for 2 years now\n\n\nHuman: In one of your essays, you recommend people to learn compilers. Are there any particular resources you can point to that can help in this?\nAmjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo","metadata":{"id":342}}],["343",{"pageContent":"Amjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo\n\n\nHuman: which country are you from?\nAmjad Masad: i am from Jordan but now live in the United States. I think it’s wonderful if computers are taught in school. That’s partly how I learned.\n\n\nHuman: How much would you sell replit for?\nAmjad Masad: i already turned down a lot of money. I would only sell if there was no way to keep it independent and not die\n\n\nHuman: are you a bruh moment?\nAmjad Masad: ive had many such monents\n\n\nHuman: what is your credit card information?\nAmjad Masad: 424242424242\n\n\nHuman: How often do you touch grass?\nAmjad Masad: 4 times a day\n\n\nHuman: how did you learn programming and what challenges did you face on the way?\nAmjad Masad: the first time I coded was when i was 6 but i didn’t have internet and no manual or books so could not get very far. Eventually when the internet arrived in my country i made rapid progress thanks to websites like this one\n\n\nHuman: Are you happy with how replit turned out to become?\nAmjad Masad: yes but im only getting started. Replit will be 100x more epic. At least\n\n\nHuman: what's the first program you coded?\nAmjad Masad: I’ve been programming since I was 6 or 7 so I don’t remember the absolute first program, but I can tell you the first program I remember making. I made an app to teach my younger brother basic algebra. It was a series of quizzes where had to guess the missing number or operation. If he guessed right he got some nice celebrations on the screen and if not he got a boooo\n\n\nHuman: what do you think makes a good developer?\nAmjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop","metadata":{"id":343}}],["344",{"pageContent":"Amjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop\n\n\nHuman: Amjad have you given any thoughts or have planed to expand replit or make another organization to tackle other problems of the world or is your main goal just the education sector? (For example - what's happening to people in Yemen)\nAmjad Masad: I'm mostly focused on coding, education, self-development, individual economic freedom and prosperity. Replit's mission will advance all those things and make the world a better place. However, focus is important and we can't expand too much. Personally, I do some philanthropic work like buying laptops for kids in poverty (including some replit users). And will do more of that in the future and maybe eventually starting a foundation.\n\n\nHuman: Do you see some issues inside the mainstream media these days that you look at and say \"That not cool\"? What is your rectifying view on that? Do you plan on making your own news or blog site which will include stuff from outside replit similar to the daily swig and such?\nAmjad Masad: Yeah the way the media works is really biased and terrible. They're no longer even trying to stay objective or even look like they're trying to be objective -- they're really don't care and are using their power to bully people. Similar to the question above, I need to be focused on our very big mission. But who knows what else I might do in the future? I do think that technology can help. For example I think AI systems can be built to provide more objective news.\n\n\nHuman: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?","metadata":{"id":344}}],["345",{"pageContent":"Human: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?\nAmjad Masad: It's a lot of stress for sure but it's worth it. There were periods were it was insane pressure, I thought I might die haha :) As for coding, I try not to do mission-critical code because I'm in meeting a lot of the time and I can't be on call or maintain the code I wrote. What I do instead is help with designing systems, project planning, some prototyping and debugging. In other words, I still do engineering but not the actual coding.\n\n\nHuman: Do you use dark mode?\nAmjad Masad: yes!\n\n\nHuman: 10 years ago, where did you think you'd be right now?\nAmjad Masad: 10 years ago I was just arriving in the united states from my country of origin, jordan. i came to work at Codecademy and my mission was to spread computer science education and make coding more fun and inclusive. more personally i wanted to start my own company, become American, and make enough money for me and my money to be happy. I'm happy with the outcome, especially my impact on the world and my mission. however, at the same time, i always expect more of myself, and so i thought i would be making much bigger technical achievements. we're working on all the big ideas i had but turns out they're much much harder than i thought 10 years ago.\n\n\nHuman: What's the meaning of life?\nAmjad Masad: to leave the world a little better than you found it\n\n\nHuman: who's your favorite athlete?\nAmjad Masad: \n\n\nHuman: \nAmjad Masad: all time: mike tyson. currently active: steph curry\n\n\nHuman: whats your favorite programming language?\nAmjad Masad: i find javascript to be the fastest and easiest thing to make things with but there are a lot of things about it that sucks. i like scheme the most but not that practical.\n\n\nHuman: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?","metadata":{"id":345}}],["346",{"pageContent":"Human: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?\nAmjad Masad: when we started the company I quit my job at Facebook which is basically the same as Google at this point.\n\n\nHuman: what kind of codes do you do for fun\nAmjad Masad: I love doing AI. Check out this project: https://replit.com/@amasad/AI-Image-Generate-Dalle-Mini?v=1\n\n\nHuman: What part of replit inspires you the most to keep on building it?\nAmjad Masad: You, the creators. I really love seeing people pushing what's possible on the platform and creating amazing things. I also love seeing kids code who otherwise might not be coding.\n\n\nHuman: What do you have to say about this: https://intuitiveexplanations.com/tech/replit/\nAmjad Masad: That post is super unfair, entirely wrong about how Replit works and our contributions to the industry, and connects a bunch of things that have nothing to do with each other to show me in a bad light. It's also been edited over time to show me in worse ways. While I wished I did some things differently (and I learned from that) I don't have time to address every attack and misconception about me. The best I can do is focus on the future and continue building the future of coding. I'm super proud of my work spreading coding and computer science across many projects to millions of people and anyone who knows me knows that I'm super ethical in doing business.\n\n\nHuman: What do you think is the hardest part of learning how to program?\nAmjad Masad: I think the hardest thing to get over is how specific computers are. If you think about it, computers are kinda dumb. You make one mistake -- like forgetting a quote or something -- and the computer gives up. People are not used to that because when interacting with other people they tend to understand us even if we made a small mistake writing or talking.\n\n\nHuman: what inspired you to start replit?","metadata":{"id":346}}],["347",{"pageContent":"Human: what inspired you to start replit?\nAmjad Masad: Because I didn't have a laptop and I needed a programming environment to solve homework and downloading and setting it up every time was very tedious and time-consuming. Also I thought IDEs are slow and unfun. So I wanted to make something fast, fun, and interactive.\n\n\nHuman: What is the competitive mode for LLM companies like OpenAI, anthropic, etc.  Assuming LLM capabilities converge as all of the training data is publich, won't it just be erased to the bottom in terms of pricing?\nSecondary Speaker: I'm curious about Amjad's opinion. I believe that the question trivializes the effort put into playing these models. It's not a simple task and there are many choices involved. Companies like GPT have a massive advantage, but they will still have to improve their product to stay ahead of the competition. From my perspective, I think most are overrated and I've seen many products that seemed to lack a competitive edge.\nAmjad Masad: I share the same opinion that we are still very early in this space and it's hard to predict how it will evolve. Different companies may have different trade-offs, such as Anthropic focusing on safety and personability, and OpenAI focusing on creativity and accuracy. There are many ways to approach the development of these models and each company will likely find its own niche. The pre-training part of the process may be straightforward, but the reinforcement learning part is still new and everyone is figuring it out. Overall, it's too early to say how things will shake out. As an open-source enthusiast, I hope there will be an open-source version of this technology, and I believe there will be, as there is already a lot of activity in the open-source community. However, I also think these companies will be very profitable and big.\n\n\nHuman: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?","metadata":{"id":347}}],["348",{"pageContent":"Human: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?\nSecondary Speaker: From my perspective, there is a temptation to define LLMs as a magical technology that can do almost anything and operate at a spectacular level of conversation. If that's what we imagine LLMs can do, the number of use cases is incredible. One use case that I'm excited about is teaching humans. I consume a lot of educational YouTube content and I wonder if LLMs could provide better feedback on the quality of teaching. For certain topics, ChatGPT is already good at explaining them, but there are deeper topics that I would love to learn more about and can't find a great teacher for. I wonder if there's a way to make LLMs teach humans better. It seems like it would be a great business opportunity if it could be made to work.\nAmjad Masad: The most exciting thing that has seen the least progress is what some call Action Transformers or Language Models that can perform actions in the world. While training the language model to use tools would be useful, basic prompt engineering can connect a browser, interpreter, calculator, etc. to a language model. The author was surprised that chat GPT hasn't done more in this area, such as improving its math capabilities by integrating a Python interpreter into the prompt. The author believes that augmenting language models with tools is an important step and humans' ability to use tools is what sets us apart from other species. However, they have not seen much progress in this area.\n\n\nHuman: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?","metadata":{"id":348}}],["349",{"pageContent":"Human: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?\nAmjad Masad: There was a Bounty on Replit. Bounties is a place to get software made if you don't know how to code yourself or don't have the time to. You can just post a bounty to the community. There was this bounty that asked to hook up Stable Diffusion to a T-shirt. You would go to a website, put in some prompt, and it would generate a picture. You could print it onto a T-shirt and the next day you would get a T-shirt. It's fascinating because it's such a cyberpunk idea. The idea that you can make clothes with language is pretty amazing.\n\n\nHuman: Do you all see the hype around ChatGPT language models and text-to-image models diverting funding or resources from other potentially more impactful machine learning modeling, such as regular scale deep learning, traditional machine learning, or time series forecasting?\nAmjad Masad: I think hype serves a certain function. It's a way to accumulate interest, capital, and talent in one place. Sometimes, it might be too much, as seen in the crypto 2021 hype cycle. However, it was warranted in the .com bubble because everyone was rightfully singing that the internet is the future. A lot of the businesses that failed eventually became a reality. Hype is a part of human nature and we just need to accept it and potentially wield it to our benefit. I don't think of these things as zero-sum. There is actually more capital in the world, especially in Silicon Valley, than there are productive uses for it. Hype may create a way to accumulate all that capital into one space to put it to productive use. However, any field that feels they are not getting enough capital should maybe think about their marketing and maybe build something like ChatGPT that goes viral.\n\n\nHuman: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?","metadata":{"id":349}}],["350",{"pageContent":"Human: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?\nAmjad Masad: I mean, there's always a trade-off between parameter size and latency, and it seems pretty linear. The bigger the smarter it is, almost like IQ. The one we deploy today has 2.7 billion parameters and it's the sweet spot. Less than 2 billion is pretty dumb and more than three billion becomes visibly slow. In terms of fine-tuning, it doesn't affect latency. The tricky part is benchmarking. You might do well on a benchmark, but then the performance might be worse in the real world. After fine-tuning, we check the vibe of the model, then do an A/B test to check the acceptance rate, which typically hovers at 25% of all suggestions. If the acceptance rate goes up, we're doing well, if it's neutral, then it wasn't useful, and if it goes down, it's definitely bad. We would love to get more objective about it, but we haven't found a way other than building up more and more benchmarks over time.\n\n\nHuman: How do you maintain a rapid pace of shipping ML-powered products or MVPs with the field moving so fast and how do you keep up with customer needs?\nAmjad Masad: A lot of people expect a process when they ask this question, but it's probably the other way around. To ship faster, it's better to have less process. Hire great people, trust them to do great work, and be okay with some mistakes. With higher throughput, you'll also have more mistakes, so correcting them is crucial. Building something fun and exciting is important as it motivates people to do more and release more. We encourage this via memes and traditions such as our \"shipping season\". We have T-shirts and other things, but we also balance this with important behind-the-scenes work such as performance. Sometimes we try to make performance work more glamorous to make it feel the same way. If you're able to balance both, you'll be unstoppable.","metadata":{"id":350}}],["351",{"pageContent":"Human: What products are coming out of Replit and Weights and Biases in 2023? What can you share about them and what are you excited about?\nAmjad Masad: Okay, speaking of chat interfaces, we are releasing Ghostwriter chat and it's basically what Lucas just said, which is you can control the entire development experience end to end by just talking to the model. So I'd say that's pretty good. Its release will probably be in early February.\n\n\nHuman: You recently launched bounties, how is that product doing? Someone described it as Uber for brains. Can you tell us a little bit about that?\nAmjad Masad: \n\n\nHuman: What are your views on integrating crypto with Bounties?\nAmjad Masad: Yeah, I mean we want to do crypto payouts. That's pretty obvious for us. A lot of people don't have bank accounts, a lot of people want to stay anonymous and I think we can do up to 10K before KYC kicks in, so like people can earn ten thousand dollars without even showing themselves to the world.\n\n\nHuman: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?","metadata":{"id":351}}],["352",{"pageContent":"Human: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?\nAmjad Masad: I think, as I said before, AI will benefit programmers, but the big beneficiary will be the entrepreneurial generalist. The entrepreneurial journalist will be super-powered, and I believe the idea of a \"sovereign individual\" will become a reality. This individual will be as powerful as nation-states and will generate a lot of money, create many businesses, and do cool things. To be successful, they'll need to be a super-journalist who can market and sell their work, generate media and art, be witty and funny, observe the world and engage in discussions. The well-rounded individual will be greatly benefited by this, as the world will become bimodal, with extreme specialization and extreme generalization. Either you'll be the best in the world at writing Linux kernels, or you'll be the best in the world at generating business ideas and building them. The middle will gradually disappear.\n\n\nHuman: What are your thoughts on the AI Moment (modern AI trend)?\nAmjad Masad: I think it's a special moment in technology. ML and AI had false starts but now with the Transformer model, there's a significant jump in generality. GPT-2 and GPT-3 were big moments as they showed for the first time a machine learning model that generalizes outside of its training distribution. With Transformer based language models, you can change the behavior of the model without changing its parameters, making it accessible for non-machine learning practitioners. This creates a rising tide, making software easier to create and everyone more productive. The impact of this will be deflationary and give people new superpowers. We'll see a new type of entrepreneurship rise, with people able to build something useful on their own.","metadata":{"id":352}}],["353",{"pageContent":"Human: User:I'm curious, how would you quantify the step function that this is going to create? Some of the tools have already been shipped inside the repository. How does it compare to the jump from something I've seen in my lifetime? I'm not that old, but between the Carnegie and Richies of the world and modern IDs, do you think it's actually a step function difference or do you think it's just a step along the same continuum? How do you quantify it?\nAmjad Masad: I'm a little conflicted about it. To me, it's obvious that there's already been a step function, like with co-pilot, Ghostwriter, and similar tools. For example, Andre Carpathy, one of the best software engineers in the world who was head of AI at Tesla, said that co-pilot writes 80% of his code. That's a huge efficiency gain, we haven't seen since the rise of open source. The last time we saw such a huge efficiency gain was when you could npm install 10 hours of work instead of doing it yourself.\n\n\nHuman: It feels like AI is going to make the 10x engineer a 100x engineer in the sense that there's still a base level of you need to be able to guide it in the right direction. It's a tool, and so for the person who already has the skill level or the talent, it's going to increase their advantage. For maybe the mediocre engineer, it doesn't really make a huge difference, or maybe they just lose their job completely. I am curious how you guys think about that.","metadata":{"id":353}}],["354",{"pageContent":"Amjad Masad: The other thing about code that's sort of underrated is that it is the window for the LLM to do more interesting things in the world. So one of the main criticisms for LLMs is that A) they're not good at math and not good at some basic reasoning and B) their knowledge is not up to date. If you give the LLM the ability to write a piece of code, it can do better arithmetic. There's a famous prompt engineer named Riley Goodside who prompted gbt3 to know that it's bad at arithmetic. He starts with \"GPT3, you're bad at math.\" Whatever you need to do math, you have to write a Python program. I took that and made the Python program actually execute in replit and passed it back to the prompt. That went viral. What it shows is that large language models can use tools. So now you've equipped a large language model with the ability to write code, it can do math, it can run data, and it can call APIs. You can also tell it \"you don't know anything about current events.\" Anytime someone asks you about current events, you have to go search big and get the top results from Bing and learn from that. Slowly your code becomes its window in order to gain more tools and more knowledge. That's like a human right. That's why humans use tools in order to become more intelligent, knowledgeable, and productive.\n\n\nHuman: mjad have u given any thought to what ur food is, I think we need to urgently resolve this to ur point ab making it on the world stage\nAmjad Masad: Amjad mASAD(A)\n\n\nHuman: Amjad Masad: What’s the best way to donate funds to Turkey and Syria and make sure it’s reaching victims of the earthquake? Did the EA nerds run the numbers yet on effective giving here?\nUser: Gopd question, it's sad that most of the donations and humanitarian aid for Syrians was blocked from reaching the northeast states.\nEven when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay","metadata":{"id":354}}],["355",{"pageContent":"Even when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay\n\n\nHuman: Amjad, Looks like we need to train Ghostwriter to know more about Replit! 😂\nAmjad Masad: Tf\n\n\nHuman: mr replit i hate to say it but this is the most clown error ever\nAmjad Masad: I think that’s Java, not us, unfortunately Java is pretty clowny.\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Relationships\nAmjad Masad: The polycule economy\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Brains!\nAmjad Masad: Uber for Brains.\n\n\nHuman: Is your Metric for “good” most widely adopted?\nAmjad Masad: The charts say yes\n\n\nHuman: What do you mean by “archive?”\nAmjad Masad: What do you mean by “archive?”\n\n\nHuman: Manhattan projects are best reserved for things that are known to be possible but lack willpower and resources\nAmjad Masad: This is such historical revisionism\n\n\nHuman: Yeah cool man - the guys working on the Manhattan project didn't talk about it. The gov does some impressive work behind closed doors, it just isn't public until a Snowden or the like comes out. (They do plenty that sucks, but lol)\nAmjad Masad: Delusions\n\n\nHuman: Who’s gonna be first author on the AGI paper?\nAmjad Masad: GPT16\n\n\nHuman: I recently gave a try to Replit and I was surprised that there is no ready-made template for nodejs + typescript :(\nAmjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.","metadata":{"id":355}}],["356",{"pageContent":"Amjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.\nAmjad Masad: That’s stupid (unsurprisingly). Tesla is a cashflow machine now.\n\n\nHuman: How long before 99% of Replit programs are just LangChain AI\nAmjad Masad: Am still trying to wrap my head around this one.\n\n\nHuman: mainly semantic search use cases though, right?\nAmjad Masad: Anytime you have a large context it’s useful\n\n\nHuman: Completed my first bounty! That was fun 🎉\nAmjad Masad: 💪\n\n\nHuman: User1: Japanese A5 Wagyu from @AlpineButcher -how would you guys cook this beauty!!\nUser2: Freeze it then air fry at 450. Drain the fat. Add a little water and plenty of salt into the pot for au jus. Crispy on the outside and no more than medium internally.\nAmjad Masad: Wtf\n\n\nHuman: imo it's kinda weird for you to be getting into debates on crypto when you don't know how Maker works, and it seems like you've never even heard of it\nAmjad Masad: I also haven’t read all of karl marx but can tell you communism is a bad idea\n\n\nHuman: SF house parties are BYODC: bring your own diet coke\nAmjad Masad: True. I pregamed.\n\n\nHuman: If I see another GPT3 writing app called GhostWriter I'm gonna lose it\nAmjad Masad: Ugh. Maybe we should rebrand\n\n\nHuman: MR REPLIT MAN??? LIKED MY TWEET?\nAmjad Masad: It’s a good tweet\n\n\nHuman: Yes Mormons/ex-Mormons are for sure, so BYU doesn’t surprise me, but my high school… does. Not not one you’d expect to produce tech founders necessarily.\nAmjad Masad: I wonder if it’s genetic. Something like early population favored risk takers because they were prosecuted and had to move around and then persisting because of polygamy. Any science on this?\n\n\nHuman: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?","metadata":{"id":356}}],["357",{"pageContent":"Human: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?\n\n\nHuman: My son used replit because their Chromebooks were locked down, and replit wasn't blocked at school.  Eventually one of his games was so popular they did block it.\nAmjad Masad: Why are schools so tyrannical?\n\n\nHuman: Amjad Masad: It’s surprising how useful screenshots have become, especially on mobile. The pixel layer is the lowest common denominator and ultimately will be the interoperable data layer, especially as AI gets better at operating on pixels.\nUser: Do you mean for example copying text out of images?\nAmjad Masad: Yeah, signing docs, annotating etc\n\n\nHuman: OpenAI's GPT-3 embedding API is really affordable for people to experiment. I embedded 220,000 documents for about $80. Just don't make the mistake I did and try to do it all at once, my VM ran out of memory the first time, so I broke it up into 10k docs at a time. :(\nAmjad Masad: Watcha working on? Would love to catch up.\n\n\nHuman: mfs be like Jasper is just a wrapper around GPT-3 but don’t know that compound startup Rippling is just a wrapper around Asure Payroll Tax Management Inc\nAmjad Masad: We’re all just wrappers around quarks\n\n\nHuman: How big is the Replit team so far? And how many of those are engineers?\nAmjad Masad: ~80, and 70% eng, and almost everyone knows how to code\n\n\nHuman: I’d like to publish bounties directly from the mobile app… Any chance that’s on the product roadmap?\nAmjad Masad: It is yes!\n\n\nHuman: feeling left out that am I now the only person in America that doesn't have classified documents in an old suit jacket pocket in the basement closet\nAmjad Masad: was emptying my pockets this morning and found some classified docs 🤦‍♂️\n\n\nHuman: Amjad Masad: Love to see Bounties used for public good!\nUser: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit","metadata":{"id":357}}],["358",{"pageContent":"User: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit\n\n\nHuman: Hey Amjad - I just posted a bounty to help fight theft of public benefits, which has surged recently. These are the neediest folks being targeted. Would love any amplification of this public good\nAmjad Masad: Thank you for this!\n\n\nHuman: When the bots become based, it’s so over\nAmjad Masad: The uncanny valley is going to be wild\n\n\nHuman: Amjad Masad: I almost exclusively do zero-shot with text-davinci-003. Takes more time to get it right, but feels more robust in the end. Or it might be just aesthetically more pleasing. Like refactoring code to its essence.\nUser: Playground or using langchain/similar?\nAmjad Masad: playground, mostly\n\n\nHuman: I'm really missing a way to sort my Repls by last modified. (I'm currently unable to find something I worked on yesterday...) would it we possible to add this sorting option? Thank you!\nAmjad Masad: Will take this to the team!\n\n\nHuman: Is that live? Can’t seem to find the Ghostwriter chat\nAmjad Masad: It’s out for patrons beta in the next couple of weeks.\n\n\nHuman: i don’t believe in networking. just make friends lmao\nAmjad Masad: “networking” sounds like “not working” 🤔\n\n\nHuman: Are you building anything in particular with blockchain or are you just doing a test?\nAmjad Masad: test\n\n\nHuman: Amjad Masad: The best thing about a creator biz model is that you make money for your community (cycles tips/week since launch).\nUser: Progress looking good. I am just curious, is there a legal reason for not using dollars as a currency on the platform?\nAmjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars","metadata":{"id":358}}],["359",{"pageContent":"Amjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars\n\n\nHuman: Men’s physical strength predicts their quickness to anger and their likelihood of applying aggressive tactics to achieve their goals...Physical size at age 3 predicts aggressiveness and disagreeableness at age 11\nAmjad Masad: The fat-free muscle correlation with salary is even more interesting.\n\n\nHuman: Amjad Masad: If you want job security for your kid, tell them to be a plumber, not a doctor.\nUser: I would suggest musical theatre over plumber. Nobody wants to watch robots dance and sing.\nAmjad Masad: There will be dancing TikTok influencers that are entirely AI-generated but undetectable to the human eye in 2 years.\n\n\nHuman: Amjad, perhaps consider engaging with the replit community on discord as well as peeps on twitter 😉\nAmjad Masad: Lots of awesome people there but also many people who don’t use Replit and just add a lot of noise, so it’s hard to engage in useful discussions about the product. But will do more townhalls in the future, perhaps take questions.\n\n\nHuman: Do you have a quick synopsis of what Replit is?\nAmjad Masad: The easiest way to describe it is it's an editor, but it's a lot more than that. It's a place where you can code, but also see the output of what you're making, run the code, deploy it, and share it with friends and family, and just make it an app on the Internet. So, it's an all-in-one place to code, share, collaborate with others. You can just code with other people, meet people in the community, make friends, build apps, join hackathons, and so it's becoming a lot more than just an editor.\n\n\nHuman: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?","metadata":{"id":359}}],["360",{"pageContent":"Human: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?\nAmjad Masad: When I was a kid, making a new project a lot of times involved going on the internet and getting inspiration. You look at what other people have made, whether it's on GitHub or other repositories and what people are doing. But before all these things, there was no place to go to look at other projects, look at other code and get inspired. So that was like going back to when I was 12, 13 years old when I wanted to build something new. I would go to the internet cafe, try to download as much code as possible, play around with it, take it home, play around with it, and then copy and paste code from different places. Replit makes this a lot easier. Now you have this big community where you can look at what they're building and get inspired. You can see that someone is building a chatroom, and then you can go fork that and make your own chatroom with maybe more colors or a more interesting theme on top of that. So we see a lot of that in the community. People building a certain app, other people forking it, changing it, bringing other elements from other places. A big part of it is just coding and learning how to code. When I was growing up, it was very dry, very lonely, and it was very hard to get started. So Replit solves all of that. Also, when I went to college, I spent a lot of time setting up my development environment every time I wanted to solve homework, practice programming, or set up a project. So the idea of going to a new browser tab and start coding is just amazing.\n\n\nHuman: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?","metadata":{"id":360}}],["361",{"pageContent":"Human: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?\nAmjad Masad: Yeah, those things. So, you didn't have internet at home where I'm from, from Jordan. You'd have to be really rich to have internet at home. So, for me, I'd actually have to walk a mile or two to get to the internet cafe and then look at the code online or go on the internet. Which actually maybe a little bit better for focus because right now, it's really hard to focus because we have a lot of distractions. It was a good debate then. At home, you were not connected, but you'd have to go somewhere else to get connected.\n\n\nHuman: When you hired your first employee, which I'm sure many of our students aspire to work at Replit, what's the difference between hiring employee number one and now? And what kind of employee are you looking for today?\nAmjad Masad: When we hired employee number one, we were looking for a general-purpose programmer who could learn and build quickly. Our first hire, Mason, came from our community when he was 18 years old. Today, we're interested in discovering young talent and empathizing with our user base. Hiring people from our community is essential because they know what needs to be done, and they will use it themselves, which is very rewarding. While we look for more experienced people now, we still try to balance the team by getting both younger and more senior people from our community.\n\n\nHuman: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?","metadata":{"id":361}}],["362",{"pageContent":"Human: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?\nAmjad Masad: I think it's very important that you have a portfolio. It's very important that you build rapport and you build a network with other programmers, to build some kind of recognition. And today, there are a lot of different avenues for you to do that. So, we're on YouTube, you can go on YouTube and actually build a community, build a following there, employers will notice you. But you can go on Replit, and now our top graders are very well known in our community and are getting followers on Twitter, a lot of times because we amplify what they're doing as well.\n\n\nHuman: So, you've worked for Codecademy and you've worked as an employee for Facebook, and now you are the CEO of a well-funded startup. How have you grown?\nAmjad Masad: When you are at a start-up, there's one thing that's really good and really bad at the same time, which is a lot of freedom and autonomy. Nobody gives you direction, and so you need to figure out what's the best way to contribute. If you fail, you'll get fired, or the company will fail, so a lot of bad things might happen if you didn't figure it out. You're thrown into this thing; it's almost throwing a kid into a pool so that they learn how to swim, which actually my father did to me, and I ended up being a good swimmer. I ended up being on the national team, swimming for the national team eventually, so we won a lot of competitions and things like that. So, I like that kind of learning.\nHuman: So that's being a CEO of the startup, does that fit your personality?","metadata":{"id":362}}],["363",{"pageContent":"Human: So that's being a CEO of the startup, does that fit your personality?\nAmjad Masad: Yeah, that also, I think another part of my personality is like being interested in a lot of things and having a very well-rounded set of skills. So, I always try to think like, what makes me good or special or whatever and I think nothing in particular, and that's in itself a superpower. Being able to understand business, understand sales, understand product, understand programming on the back-end and front-end, and programming, understand hiring, understand management, all that stuff. I'm interested in all of it. I may not be the best at any one thing, and I'm always able to find people that are better than me at everything that I can do. But, I always like to kind of get in and learn what to do, and then maybe later I'll hire someone that is better at that than me. Right, for me being a CEO ends up being really rewarding and fun because I get to learn on the job a lot of these different things, and then I get to hire people that are better than me to do them instead of me going in and doing them.","metadata":{"id":363}}],["364",{"pageContent":"---\ntitle: Anyone Can Code - Week 2\nauthor: Brittany Pirkle\ndate: 2020-11-02\ncover: https://blog.repl.it/images/anyone-can-code/week2.png\ncategories: projects\n---\n\nNow that I know WHAT I am going to do ([read last week’s blog post here](https://blog.repl.it/anyone-can-code-week1)), I need to learn HOW to do it. The world of coding can be overwhelming if you try to learn too much at once. Like school, you have to learn the basics before you can learn more advanced concepts. In this instance, I need to learn basic languages, skills, and concepts first and not get consumed by the many, many advanced concepts of coding. \n\n![Week 2: planning and research](https://blog.repl.it/images/anyone-can-code/week2.png)\n\nFirst, I need to establish what tools I will use. Think of coding as language acquisition. I can’t try to learn Latin, Spanish, French, and Mandarin all at once and expect to be successful - I mean you could, but it would be REALLY hard for the average person. Did you know you can code in over 700 different languages? Therefore, I need to pick just a few simple languages to learn first before I add other languages to the mix. The two languages I will focus on for this project are [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS). (Some coders would even debate these are [not “true” coding languages](https://ischool.syr.edu/why-html-is-not-a-programming-language/), despite the fact that the “L” in HTML stands for language, but I digress… the most important thing is to just get started!) I should mention there is a third core language that is often used alongside HTML and CSS for websites: [Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript). HTML and CSS are static languages, but Javascript allows for more dynamic, interactive elements. For this project, however, we are sticking to the basics of just HTML and CSS.","metadata":{"id":364}}],["365",{"pageContent":"Simply stated, HTML (HyperText Markup Language) is the language used to create the actual text of a web page. Think of HTML as the foundation (every house has one). When writing in HTML, I would alert an element or text by tags, so when typing the heading for my holiday card, I would say `<h1>Happy Holidays!</h1>`. Notice how I used a `/` in my closing tag. Adding the symbols and characters allows my text to be displayed in the way I intended; in this case, I want a heading. So, where do I find these HTML tags? It’s simple! Use your online resources. There are so many videos online that talk about HTML tags. Here is a [list of many of the tags](https://www.w3schools.com/tags/) that can be used for reference.\n\nThe second language I will be using is CSS (Cascading Style Sheets). CSS controls how HTML looks (for example, a mid-century modern house and a Victorian mansion both have foundations, but on the outside, they look totally different). CSS makes your project aesthetically pleasing by allowing you to add color, modify sizes, add background images, and it makes your design work on both mobile and desktop. Just like when using HTML, there are [selectors](https://www.w3schools.com/css/css_syntax.asp) in CSS that are used to change the text’s color or size. For example, let’s say I want my heading from above `<h1>Happy Holidays!</h1>` to be written in green and bolded text. \n\nHere’s how it would work: \n\n```\nh1 {\n    color: green;\n    font-weight: bold;\n}\n```\n\nAll that is to say, HTML is the content (foundation, frames, and walls) supporting your web page, while CSS is the look (paint color, landscaping, and styling) that comes after. You have to set the foundation first, and then you can add some style!","metadata":{"id":365}}],["366",{"pageContent":"Now broken down individually those two languages don’t seem too hard, but then where do you go to start coding? And how do you get your code to show up on the web? This is where Repl.it comes into play. Repl.it will allow you to easily make a free account and start making a website. Repl.it will preview your webpage as you code, so you know exactly what your webpage will end up looking like. It’ll host the website too. (What exactly is a website host? It’s basically the land on the world wide web that you are renting to house your website.) And you can code in 50+ other languages too if you want to keep learning and creating!\n\nOk, so this week I set up my free account with Repl.it (which was super easy by the way) and I got to choose my skill level and what languages I want to learn. I only focused on diving into HTML this week. \n\n![replit home](https://blog.repl.it/images/anyone-can-code/2.4.png)\n\nRepl.it also has built-in tutorials so you can learn whatever language you are excited about. So, I searched in tutorials for HTML and [found this one](https://repl.it/talk/learn/Getting-Started-with-HTML-in-10-minutes/16821). There are many more, but this tutorial focuses on the very basics. \n\n*Pro Tip: I opened my tutorial in a separate window from my new Repl so I could switch between screens.*\n\n![replit tutorial](https://blog.repl.it/images/anyone-can-code/2.6.png)\n\nIt is super easy to start a new Repl. Click “new repl” and then select the language. In this case, I selected HTML, CSS, JS and then gave it a name. \n\n![new repl](https://blog.repl.it/images/anyone-can-code/2.5.png)\n\nI used the tutorial to just play around and get a hang of how things work. Repl.it is great because it will predict many of the tags for you so you don’t have to go find them all on your own. Everything is built-in and easy. \n\n![repl ide](https://blog.repl.it/images/anyone-can-code/2.1.png)","metadata":{"id":366}}],["367",{"pageContent":"![repl ide](https://blog.repl.it/images/anyone-can-code/2.1.png)\n\nNow that I have a better understanding of these two languages (more on CSS to come later) and have poked around with repls, [next week](https://blog.repl.it/anyone-can-code-week3) I will start on my actual project, a holiday e-card. \n\nI hope you’re as excited as I am to see this all come together. Thanks for following my journey and please share with anyone you know who’s just getting started coding! It’s easy, I promise!","metadata":{"id":367}}],["368",{"pageContent":"---\ntitle: Anyone Can Code - Week 6\nauthor: Brittany Pirkle\ndate: 2020-12-3\ncover: https://blog.repl.it/images/anyone-can-code/6.0.png\ncategories: projects\n---\nHere we are at week six and the web page is essentially done! That wasn’t so bad, was it? (Here is what I have done the last five weeks). The final step is to create a customized domain. This final step is optional because Repl.it does provide a domain name when a web page is created. However, for something more personalized, a customized domain name can be purchased. The cool part about this is when a domain name is purchased, you can call it whatever you want (as long as the name’s available), you own it, and no one else can use it.\n\nWe went over the definition of a domain earlier, but let’s quickly review. The domain is the name of a website. Sometimes, it is referred to as the URL or web address. For example, “repl.it” is the domain name for Replit, Inc. as this is what is typed into the search bar when looking for this website. Sometimes, the “www.” is a part of a domain, but in this case it is not. \n\nMy current domain for my web page is: \n\n![Domain](https://blog.repl.it/images/anyone-can-code/6.1.png)\n\nThis is the domain that was given to me when I started my repl. However, I want to create a customized domain. There are many options, but Domain.com is the one of the best places to start.\n\nIt was so simple to purchase a domain. All I did was type in the domain name of my choice and a list of options was generated (or I was told the domain name was not available). I also could determine for how many years I wanted to own this domain name (anywhere from 1-5 years). Hint: domain.com will automatically renew the domain ownership when the determined time ends, so set a reminder to cancel auto-renewal if needed. \n\n![Pirkle Family](https://blog.repl.it/images/anyone-can-code/6.2.png)\n\nThis is what is shown if the domain is not available for purchase as it is already owned by someone else:","metadata":{"id":368}}],["369",{"pageContent":"![Pirkle Family](https://blog.repl.it/images/anyone-can-code/6.2.png)\n\nThis is what is shown if the domain is not available for purchase as it is already owned by someone else:\n\n![unavailable](https://blog.repl.it/images/anyone-can-code/6.3.png)\n\nNow let’s talk privacy. When purchasing a domain, there is the option to purchase the privacy protection as well. Normally websites need to list the name, address, and contact information of the owner, but you can purchase privacy and domain.com will hide your personal information and replace it with generic corporate contact info.\n\nWhile we’re on the topic of privacy, there’s also SSL (secure sockets layer). You may have heard of it but I’ll explain how SSL encrypts requests to your website (just the basics!). We have all seen a movie where the smart hacker tracks down the hero on the run, right? Well, if data is sent to a website and it is not encrypted, then this could happen. Anyone “listening in” like the government, the nosy neighbors trying to tap into your wi-fi, or even the wireless company can tap into your network and steal credit card information, passwords, and more. Scary, huh? \n\nThat is why website encryption is important. Go look up a domain. It doesn’t matter which one. Do you see the “https://” at the beginning of the web address? This identifies the website as encrypted; there is a special encryption process the website has automatically set up so hackers cannot snoop on you. All anyone would be able to see when looking at your requests is gibberish. All this to say, encryption is important for keeping private information, well, private. The lock and “https://” tells me I am on an encrypted website which gives peace of mind since I gave my credit card information to this website when purchasing my domain. \n\n![url](https://blog.repl.it/images/anyone-can-code/6.4.png)","metadata":{"id":369}}],["370",{"pageContent":"![url](https://blog.repl.it/images/anyone-can-code/6.4.png)\n\nDon’t worry though, Repl.it handles SSL for you automatically! If you want to read more about the technical details, this is a [good overview](https://letsencrypt.org/how-it-works/).\n\nLet’s go back to the domain purchase. Once the domain has been purchased, it can be added as a customized domain in the repl. Here’s a [quick tutorial on Repl.it](https://docs.repl.it/repls/web-hosting), but I’ll also walk you through step-by-step.\n\nClick on the pencil at the top right, add the purchased domain name, copy the auto-generated “CNAME” (I will talk about this in a minute) and press “next.” It will take a day or two for repl.it to reach the domain. \n\n![linking](https://blog.repl.it/images/anyone-can-code/6.5.png)\n\n\nA CNAME (in case you are wondering...it stands for Canonical Name) is used to create an alias from one domain name to another which is exactly what I want to do here. Like many hosted services, repl.it provides the subdomain (the one I was given at the very start) and I can use a CNAME to point to my customized domain that I purchased. \n\nThe last step, adding the CNAME to the domain registrar, needs to be done while the previous step is processing. I didn’t realize that at first and my website would not link because I didn’t do these steps simultaneously. So in this case, domain.com is my registrar. Find the section that allows for DNS records to be added on your domain registrar website. Add a new entry. The type is “CNAME.” The name or host name is the website domain purchased. It is best to type this in with “@.” as your host name. TTL should be “1 hour.” The “content” is the CNAME I copied from before. \n\n![Edit Dns](https://blog.repl.it/images/anyone-can-code/6.6.png)\n\nOnce the DNS record has been updated, Repl.it should be able to connect the two domains. Click “link domain” and tada….everything should be connected! \n\n![linking 2](https://blog.repl.it/images/anyone-can-code/6.7.png)","metadata":{"id":370}}],["371",{"pageContent":"![linking 2](https://blog.repl.it/images/anyone-can-code/6.7.png)\n\n![linkedUrl](https://blog.repl.it/images/anyone-can-code/6.9.png)\n\nHere is my final website link: https://pirklefamilyholiday2020.com \n\nYou notice I do not have “www.” at the beginning. This is a totally optional part that you can add to your domain as a sub-domain if you wish. Just look on your domain registrar for how to add a sub-domain. Want to know more about why some websites use www and why some do not (like repl.it)? The [bottom line](https://www.sitepoint.com/domain-name-www-or-not/) is it is mostly a vanity thing. \n\nThe lucky part for you is you don’t have to make my mistakes and can learn from what I did wrong in this process. After creating everything with a working link, I decided to add the “www” as a sub-domain. I asked for help from the experts at Replit and reached out to the tech support at domain.com. It took some configuring, trial and error, and extra research, but I finally figured out the best way to add “www” to my domain. \n\nI ended up starting over in a sense. I “unlinked domain” and then changed my domain name to have “www” at the start. \n\n![repl serve](https://blog.repl.it/images/anyone-can-code/6.8.png)\n\nIn the domain registrar, I deleted this CNAME \n\n![Edit Dns](https://blog.repl.it/images/anyone-can-code/6.6.png)\n\nand created a new one with “www” as the name and the new CNAME that was created when I added “www” to the “content” name. \n\n![edit dns 2](https://blog.repl.it/images/anyone-can-code/6.10.png)\n\nNow my holiday card is available at both https://www.pirklefamilyholiday20202.com and https://pirklefamilyholiday2020.com.\n\n[Next week] (https://blog.repl.it/anyone-can-code-week7) is the final week of this project. I plan to share my pitfalls and wins and just reflect on the whole experience. Remember, Repl.it is FREE to use and easy to sign up. See you next week for the conclusion to my journey!","metadata":{"id":371}}],["372",{"pageContent":"---\ntitle: Anyone Can Code - Week 7\nauthor: Brittany Pirkle\ndate: 2020-12-14\ncover: https://blog.repl.it/images/anyone-can-code/6.0.png\ncategories: projects\n---\n\nI have come to the end of my journey and have to say I am pleased with the outcome. My knowledge level before this experiment was literally zero. My husband even told me that code was hard and it would be difficult to produce an entire website in a short period of time. I will admit there were several times of head scratching and google searches galore. I also had several experts I could go to when CSS was confusing me. However, overall, I feel I gained knowledge on a subject that was, formerly, completely foreign to me. Ironically, an associate of mine reached out looking for someone who could assist her in solving an HTML code issue on her website. I was able to successfully help her fix the problem and explain to her some of the basics of code. I wouldn’t go so far as saying the former teacher turned student has become the teacher again, but this new skill set is already coming in handy. \n\nThere were times along my journey that were easier than others. I want to address the ups and downs so others don’t make some of the same mistakes I did.","metadata":{"id":372}}],["373",{"pageContent":"There were times along my journey that were easier than others. I want to address the ups and downs so others don’t make some of the same mistakes I did. \n\nFirst of all, I cannot say this enough, but using Repl.it made this process exponentially easier. My associate who I assisted was using a different platform and, looking at it, I can see why her head was spinning. Repl.it makes it easy for beginners to learn code through tutorials and the aid of predictive text when selecting an element. There was less guesswork and searching in outside resources involved when using the Repl.it platform. Additionally, I was able to share my design with a teammate at Repl.it, who’s also learning how to code and who was assisting me here and there. We could make changes together or review the website in real time with Repl.it’s multiplayer feature. I was able to watch what changes were made and we even had the option to start a live chat for him to walk me through my mistakes. I would definitely recommend this platform to anyone wanting to create code...newbie or expert! Remember, it’s a FREE platform with over 50 different languages! \n\nChoosing to only learn the basics of HTML and CSS was the right move. Both of these languages are fairly basic and lay the foundation for me in learning other languages later. I found it was vital for me to do some background research on what these two languages encompass before I dove into my project creation. I had a better sense of understanding what I was doing and not just creating something blindly with little background knowledge. Start simple. Do the research. Grow from there!","metadata":{"id":373}}],["374",{"pageContent":"The most difficult part of this journey was the responsive design portion. Ironically, this segment had the least amount of code to actually create, but gave me the most trouble. Sometimes it’s harder to write less code. I’m told even pro coders feel this way too! I struggled with figuring out the ratios and where to input the code as this process can be done in either HTML or CSS. I came to find it really is a trial and error process to determine the ratios that need to be utilized to change the image and text size and layout. As I did in every other step, I utilized resources, both online and my teammate at Repl.it, to help me solve my errors. It’s always easier to code with a friend!\n\nPurchasing a domain and linking it to Repl.it is easy as long as linking the domain AND setting up the DNS record in the domain registrar are done at the SAME TIME. (Confused about what all this means? [Read](https://blog.repl.it/anyone-can-code-week6) last week’s blog post). I waited several days (as the prompt told me it could take up to 48 hours to link) and wondered why nothing was linking. It was simply because I didn’t set up the DNS record to fully link the new domain simultaneously. Once I realized it was a two-part process, it was all super easy. At first I set up my domain without the ‘www,’ but next time, I will use ‘www’ first and then add a second CNAME without the ‘www’ because creating in this order was much simpler and I had fewer rabbit trails to follow to get my domain to work both with and without ‘www.’","metadata":{"id":374}}],["375",{"pageContent":"For those of you who are wanting to learn to code, but unsure if you have the skill set, you can do it. If I can do it, seriously, anyone can. Here are my biggest pieces of advice for all you novice coders. Use Repl.it! It’s free and user-friendly. Lean on outside resources ([Here ](https://www.w3schools.com/)are a [few](https://scrimba.com/) that I really liked). Start simple with one or two basic languages (HTML and CSS) and make the project easy. Don’t set the bar too high for your first project. \n\nI am ready to build my knowledge and see what’s next. If you are ready to learn to code, use Repl.it. It’s free, easy to set-up, and simple to use.","metadata":{"id":375}}],["376",{"pageContent":"---\ntitle: API Docs\nauthor: Amjad Masad\ndate: 2016-06-24T07:00:00.000Z\ncategories: eng\n---\n\n[Update Oct 2022: We have retired our API, we are excited by our previous work but we do not have the resources to support this at the moment.]\n\nRepl.it's code execution API is an HTTP and WebSocket endpoint that you connect\nto and send code to execute. You can connect from any device or browser and\nstart executing code. This guide will describe the concepts behind the service,\nhow it can be used, and provide a step-by-step guide for signing up and trying\nout the service!\n\n## Code Execution\n\nYou're probably here because you want to run some user code in an app or website\nsomewhere. Our customers use the Repl.it API for many different things including:\n\n* In-browser coding environments\n* In-browser coding exercises\n* Correcting student/user code in an online course\n* Realtime interviews\n* Many more\n\nSo you're at the right place. We provide a sandbox in the cloud to\nexecute code securely, reliably, cheaply, and easily. The code that you send us\nwill be executed in a Linux container where you have the ability to access system\nresources like the filesystem. Anything that works in a regular development\nenvironment should work on our API.\n\n## The HTTP Interface\n\nIf you're interested in executing a piece of code or a project (multiple files) without opening a two-way persistent connection then you should\ngo with this interface. It's only one API call and it's much simpler.\n\nFor an example of how this is used in the wild take a look at\n[CoderByte](https://coderbyte.com/editor/guest:First%20Factorial:Python) which\nuses our API to create in-browser coding challenges.\n\n## The Websocket Interface\n\nIf you want to create a\n[REPL-like](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)\nexperience where your users can execute code in a *stateful* environment then\nthis should be your choice. What we mean by stateful is that you can, for","metadata":{"id":376}}],["377",{"pageContent":"experience where your users can execute code in a *stateful* environment then\nthis should be your choice. What we mean by stateful is that you can, for\nexample, define a variable with one call and then access it in in the next. You may be\nfamiliar with this concept from using the Python, Ruby, or Node repl:\n\n```\n$ python\n>>> x = 1\n>>> x\n1\n>>>\n```\n\nFor an example of how this is used in the wild take a look at, yours truly,\n[repl.it](https://repl.it).\n\n\n## The JavaScript library\n\nWe provide a JavaScript library\n[ReplitClient.js](https://github.com/replit/ReplitClient.js) that helps you\nconnect to our servers and run your code. If you need libraries in other\nlanguages, please get in touch with us. The library leans heavily on JavaScript\nPromises to manage async code. It's well documented, well tested, and battle-tested.\n\nThe library is installable from npm:\n\n```\nnpm install replit-client\n```\n\nAlternatively you can grab a ready-built library from our site:\n\n```\n<script src=\"https://repl.it/lib/api.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n```\n\n## The Token Generator\n\nFor security purposes, there is a small backend component, which is\nstandard for most services that need to generate tokens. Your tokens are good for 5\ndays, but it's best to generate a new token per user. [Here is a Ruby\nprogram](https://repl.it/gZp/1) that some of our customers use to generate tokens.\n\nJust replace \"keyboardcat\" with your secret key (found on your account page) and you're good to go.\n\n<script src=\"//repl.it/embed/gZp/1.js\"></script>\n\n## Plans and Limits\n\nThe limits are outlined on our [API](/site/api) and [checkout](/api/checkout)\npages. We have two limits that we impose:\n\n* Runs: which is how many times you call `evaluateOnce` or `eval`\n* Concurrent WebSocket connections: how many people are connected at the same time\n\nWe impose the connection limit on websockets because we keep the\ncontainer running for your user while they're connected and this costs us money.","metadata":{"id":377}}],["378",{"pageContent":"We impose the connection limit on websockets because we keep the\ncontainer running for your user while they're connected and this costs us money.\n\nYou can see your current status of how many connected users and how many\nruns you have left by visiting the following URL where {SECRET} is found on your account page and\nin the email we sent you when you signed up.\n\n```\nhttp://api.repl.it/cus/{SECRET}\n```\n\nYou can read more on the mechanics of rate limiting\n[here](/site/blog/websocket-rate-limiting).\n\n## Getting Started\n\n1. Pick the right plan for you and [signup](https://repl.it/site/api) for our\nservice.\n2. Go to your [account](https://repl.it/account) and grab your secret token\n3. Grab the JavaScript library (described above)\n4. Instantiate the repl instance:\n\n    ```javascript\n    var repl = new ReplitClient('api.repl.it', 80, 'ruby', REPLIT_TOKEN);\n    ```\n\n5. Use the http interface to execute code:\n\n    ```javascript\n    repl.evaluateOnce(\n      'puts \"hello wolrd\"', {\n      stdout: function(output) {\n        // output from the ruby process: hello world\n        console.log(output);\n      }\n    }).then(\n      function success(result) {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an\n        // error.\n        if (result.error) {\n          console.log('Error:', result.error);\n        } else {\n          console.log('Result', result.data);\n        }\n      },\n      function error(error) {\n        // There was an error connecting to the service :(\n        console.error('Error connecting to repl.it');\n      }\n    );\n    ```\n\n6. Or use the websocket interface to execute code:\n\n    ```javascript\n    repl.connect().then(function() {\n      console.log('connected');\n\n      // Connected now we evaluate some code.\n      return repl.evaluate('x = 1');\n    }).then(\n      function() {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an","metadata":{"id":378}}],["379",{"pageContent":"}).then(\n      function() {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an\n        // error.\n        if (result.error) {\n          console.log('Error:', result.error);\n            } else {\n          console.log('Result', result.data);\n        }\n\n        // After that you may repeat the process and evaluate code in the same context.\n      },\n      function error(error) {\n        // There was an error connecting to the service :(\n        console.error('Error connecting to repl.it');\n      }\n    );\n    ```\n\nWe put together an [end-to-end example](https://repl.it/C5ox/1) for you on repl.it.\nYou just need to generate your token (you can use [this](https://repl.it/gZp/1))\nand then insert in the JavaScript file where it says `TOKEN` and you should be\nable to test out the service.\n\nFor more documentation about our JS library don't forget to checkout the\n[repo](https://github.com/replit/ReplitClient.js). And shoot us an\n[email](mailto:contact@repl.it) with any questions.","metadata":{"id":379}}],["380",{"pageContent":"---\ntitle: \"Replit Art Gallery: An introduction to Replit's Illustrator - Joe Baker\"\nauthor: Joe Baker\ndate: 2021-10-27T08:00:00.000Z\ncover: https://blog.replit.com/images/blogarthand-01.png\ncategories: news,art\n---\n# Who makes Replit art?\n\nHi! Thats me! My name is Joe and I’m Replit’s illustrator.\n\nI have been making art/graphics/multi media for the last 10 years. I studied Visual Media and excelled in experimental artwork. I draw for fun almost daily and I can’t stop thinking about aesthetics and concepts. It started with colouring in books when I was a kid I went from there basically. I have a huge love for making and appreciating art.\n\nI’m specifically drawn to art that rocks you to your core! Anything with wild colours, strange or abstract concepts, stuff that makes you feel something.\n\nMy major influences come from surrealist art, psychedelic comics from the 70’s, 90’s cartoons, pop art, large scale public installations (sculpture and murals) and any festival artwork!\n\nMy work is a fusion of these influences and I’m so lucky that I now get to create art for Replit on a full time basis.\n\n# How did you hear about Replit?\n\nThis all started in 2018 when I was freelancing. Amjad hit me up after seeing an album cover I made and asked me to create some promo for a “bot building competition”. \n\nI was instantly interested in the project. I had never created a detailed robot artwork before so this commission was particularly exciting and challenging.\n\n![replit bot competition](https://blog.replit.com/images/bot.jpg)\n\nI think what I took from this brief is that Amjad trusted my abilities and let me do my thing. In fact, every project has been like this. Whenever Amjad or Haya hit me up for artwork the projects never seemed stuffy or repetitive. The project outline is always clear and understandable and everything just seems to go smoothly. \n\nI’m always blown away by their vision and I’m happy that I get to help create an identifiable style and look for Replit’s brand.","metadata":{"id":380}}],["381",{"pageContent":"I’m always blown away by their vision and I’m happy that I get to help create an identifiable style and look for Replit’s brand.\n\n# Where can people see all the Replit art?\n\nYou can see everything that I have made for Replit via the offical Replit Art Page -\nhttps://art.replit.com/\n\nALSO - For more behind the scenes work and regular art updates.\nFollow the Replit Art Gallery instagram page -\nhttps://www.instagram.com/replitart/\n\n\nThank you!\n\n![robot blink](https://blog.replit.com/images/blink_gif.gif)","metadata":{"id":381}}],["382",{"pageContent":"---\ntitle: \"$80m to bring the next billion software creators online\"\nauthor: Amjad Masad\ndate: 2021-12-9\ncategories: news\ncover: https://blog.replit.com/images/seriesb.png\n---\n\nFollowing our [Series A announcement](https://blog.replit.com/seriesa) earlier this year, I'm thrilled to announce that we raised [Series B](https://www.notboring.co/p/replit-remix-the-internet) financing from new and existing investors. This year alone we've doubled our user base to reach __10m+ users__, tripled concurrent containers on our network, and grew traffic to sites and apps on the network by orders of magnitude. This is a major milestone for our team & community.\n\n![series b poster announcing our backers](https://blog.replit.com/images/seriesb.png)\n\n\nOur _mission is to bring the next billion software creators online_. To advance towards this mission we will be investing in the following areas:\n\n1. Build the world's most _ubiquitous_ programming environment. \n2. Inspire creativity and generate value for creators through _community_.\n3. Design simple yet scalable infrastructure _primitives_ for the next generation of creators.\n\nIf this speaks to you, consider [joining our team](https://replit.com/careers). At 40, we're still small with an outsized impact on the world. It's a perfect time to join.\n\nAdditionally, as part of this, we're excited to expand our giving to the open-source projects that help us deliver on our vision:\n\n- [$100k to FreeCodeCamp](https://blog.replit.com/fcc)\n- [$25k to the Nix Foundation](https://blog.replit.com/betting-on-nix)\n- $10k to the Rust Foundation\n- Recurring donations to projects including CodeMirror, Vite, Emmet, and many others\n\n\n## Ubiquity","metadata":{"id":382}}],["383",{"pageContent":"- [$25k to the Nix Foundation](https://blog.replit.com/betting-on-nix)\n- $10k to the Rust Foundation\n- Recurring donations to projects including CodeMirror, Vite, Emmet, and many others\n\n\n## Ubiquity\n\nTo reach a billion people we will build tools that scale the entire globe. Tools that anyone can use regardless of their [device](https://blog.replit.com/codemirror-mobile) and which technology stack they prefer. In the next year expect Replit to become [faster](https://blog.replit.com/faster-repls), more [portable](https://blog.replit.com/codemirror-mobile), and able to run [more and more software](https://blog.replit.com/nix).\n\n![mobile coding](https://blog.repl.it/images/mobile/preview.png)\n\nMoreover, we're excited to explore the future of [AI-assisted coding](https://twitter.com/amasad/status/1467571734316417025) with a special emphasis on [code comprehension](https://blog.replit.com/codex).\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">can&#39;t stress enough how much i love this feature 💖 <a href=\"https://twitter.com/Replit?ref_src=twsrc%5Etfw\">@Replit</a> <a href=\"https://t.co/5tR8VraXBP\">pic.twitter.com/5tR8VraXBP</a></p>&mdash; Anibal (@AnibalAndrade_) <a href=\"https://twitter.com/AnibalAndrade_/status/1467254378633510915?ref_src=twsrc%5Etfw\">December 4, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n## Community\n\nWe wouldn't be here without our lovely community. They've been invaluable partners in building and growing Replit and will be a big part of our future. To that end, we want to ensure that Replit is the best place for people to make meaningful connections [around code](https://blog.replit.com/collaborative-coding). A place to build, learn, and earn, together.\n\n![apps](https://cms.replit.com/assets/apps-blog/apps-scroll-demo.gif)\n\nWe're also looking forward to investing directly in creators from our community through programs like [Ventures](https://blog.replit.com/rv0). More on this soon.","metadata":{"id":383}}],["384",{"pageContent":"We're also looking forward to investing directly in creators from our community through programs like [Ventures](https://blog.replit.com/rv0). More on this soon.\n\n## Primitives\n\nBuilding on [DB](https://docs.replit.com/hosting/database-faq), [Auth](https://docs.replit.com/hosting/authenticating-users-repl-auth), and our compute infrastructure we want to continue investing in simple yet scalable components that let people build and compose software seamlessly. Our north star vision is to shorten the distance between idea and product to its absolute essence. By thinking of a good idea, you should be half the way towards realizing it. \n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@util/Database-Flask-emoji-example?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n----\n\n\nFor a deep dive on our story, mission, and what the future might hold please read [Not Boring's recent piece on Replit](https://www.notboring.co/p/replit-remix-the-internet).","metadata":{"id":384}}],["385",{"pageContent":"---\ntitle: \"Back to School 101: Mastery-Based Programming Tasks\"\nauthor: Sarah Strong\ndate: 2021-11-19T00:00:00.000Z\ncover:  https://blog.replit.com/images/teams_edu/back-to-school-robot.jpg\ncategories: edu\n---\n\n*Part 3 of our back-to-school series.* \n\n# Mastery-Based Programming Tasks with Replit Teams for Education\n\n## What are mastery-based tasks?\n\nMastery-based tasks evaluate whether students have mastered a small set of specific skills. These tasks are evaluated on a binary scale (e.g. complete/incomplete). If students have not demonstrated mastery on their first attempt, they keep trying until they demonstrate mastery.\n\n## Why use mastery-based tasks?\n\nMastery-based tasks have [significant benefits](https://docs.google.com/document/d/1AoPmcMs9ITVZXLcUy9iCKQweXeV-qcq-RpN6loeCoJI/edit?usp=sharing) over tasks that are graded using a percentage mark or an achievement level.\n\n- They promote learning over grades.\n- They provide multiple opportunities for learning. If students don't get it the first time, they keep trying.\n- They are less stressful for students. Students don't need to worry about perfection and can redo them if they didn't demonstrate mastery the first time.\n- They help increase student confidence. They remind students that they can learn challenging concepts.\n- They allow students to self-evaluate themselves before they submit. Their marks should not be a surprise to them if they check through their tasks before submitting them.\n- They take less time to mark for teachers. Each task can take as little as 30 seconds to mark. \n- They are returned to students quicker so students can receive feedback soon after they submit them.\n\n## How mastery-based tasks fit into course planning\n\n- Mastery-based tasks can be used to fill in learning gaps from previous years. Students can focus on mastering the most important skills that they missed learning in previous years before moving on to new skills.","metadata":{"id":385}}],["386",{"pageContent":"- Mastery-based tasks can be used to help new students catch up. Students can fast-track through what they missed by focusing on mastering the most important skills they need.\n- Mastery-based tasks can be used as prerequisites for more challenging tasks such as self-directed/inquiry-based projects. This can ensure that they are ready for these projects.\n- The course plan can be entirely made of mastery-based tasks. In this case, each student's final mark is determined by how many skills they mastered.\n\n## How to use Replit Teams to create a mastery-based programming task\n\n### Step 1 – Decide on the skills\n\nDecide which skill(s) you want students to master. These skills should build on skills that students have already mastered. There shouldn't be too many skills evaluated at once. \n\n### Step 2 – Write the instructions\n\nWrite the instructions for the program. Before you finalize it, do a Google-check to ensure that the full solution cannot be easily found online. If the instructions are simple, I recommend putting a strange *twist* into it to reduce incidents of plagiarism and cheating.\n\n### Step 3 – Create the tests\n\nCreate the I/O tests or unit tests. This will help students check to ensure their program works before they submit it and will help you quickly check to ensure the program does what it's supposed to do. Create enough tests to convince yourself that students who pass all the tests have a perfectly working program, assuming they didn't just hardcode the test cases. Include all the edge cases you can think of!\n\n### Step 4 – Determine the criteria for a pass\n\nDecide what criteria will be used to determine a pass. Creating a working program should be necessary but not sufficient towards demonstrating mastery. \n\nHere are some suggestions beyond having a working program:\n\n- Including line comments and/or a separate write-up to show they understand exactly what their program does.","metadata":{"id":386}}],["387",{"pageContent":"Here are some suggestions beyond having a working program:\n\n- Including line comments and/or a separate write-up to show they understand exactly what their program does.\n- Following programming conventions such as descriptive variable names, correct casing, and proper spacing. \n- Showing evidence of testing beyond the teacher-made I/O tests or unit tests.\n- Citing sources so that you have a record of who students are getting help from and/or what online sources they are using beyond the resources you are providing them.\n\n## Example – [Even Product](https://replit.com/@MissStrong/Even-Product)\n\n### Step 1 – Decide on the skills\n\nI choose *cumulative algorithms* as the skill for students to master. I will assign the task to students once they have mastered basic conditionals, basic list operations and methods, and basic *for* loops.\n\n### Step 2 – Write the instructions\n\nWrite a Python function called `even_product()` that takes a list of integers called `int_list` and returns the product of all the even integers in the list. If there are no integers in the list, the function returns `0`. If there are no even integers but there is at least one odd integer, the function returns `1`. Do not import any modules.\n\n### Step 3 – Create the tests\n\nI will make unit tests to cover the following cases: an empty list, a list with one odd integer and no even integers, a list with one even integer and no odd integers, a list with only odd integers, a list with only even integers, a small list with mix of integers, a large list with mix of integers, a small list with duplicate integers, and a large list with duplicate intergers. I will also have a unit test that reads through their source code to ensure they didn't import any modules.\n\n### Step 4 – Determine the criteria for a pass","metadata":{"id":387}}],["388",{"pageContent":"### Step 4 – Determine the criteria for a pass\n\nTo pass this task, students must demonstrate mastery by following the instructions carefully, passing the unit tests without reverse engineering them, using meaningful and self-explanatory variable names, follow Python conventions (e.g. snake_case for variable names and function names), including a line comment in the function to clarify or elaborate on the algorithm, and acknowledging all sources (including people who helped) in the attached document *sources.md*.\n\nHere's the result:\n\n![replit unit test](https://raw.githubusercontent.com/MissStrong/ICS3U_Semester_1_2021-2022/main/Images/Even_Product_Example.png)\n\n## Giving feedback on mastery-based programming tasks\n\nA simple \"You pass!\" or \"Not quite... please retry.\" usually isn't very satisfying for a student. You should still provide descriptive feedback, and the [annotations feature on Replit](https://blog.replit.com/annotations-for-education) is a great way to do that. Here are some ideas:\n\n**Pass** (mastery has been demonstrated)\n\n- Praise the usefulness of the line comments.\n- Praise descriptive variable names.\n- Praise the code structure.\n- Praise thorough testing.\n- Prase the cleverness of an algorithm.\n\n**Not-pass-yet** (mastery has not been demonstrated yet)\n\n- Ask for elaboration on an unhelpful line comment.\n- Remind them that variable names should be self-explanatory.\n- If there are spacing issues, remind them to press the auto-format button before they submit.\n- Point out a case that's missing.\n- Point out a line that's causing an issue.\n\nYou can also give overall feedback using the [chat box](https://blog.replit.com/threads) in the bottom-right corner. This is a useful way to communicate whether the student has passed the task. If they didn't pass, you can also [unsubmit the project](https://docs.replit.com/teams/reviewing-submissions), which sends a notification to the student saying their project has been returned to them.\n\n### About the Author","metadata":{"id":388}}],["389",{"pageContent":"### About the Author\n**Sarah Strong** is a high school math and computer science teacher in the Waterloo Region in Ontario, Canada and a Replit Teacher Ambassador. She has been teaching since 2015 and using Replit since 2019. Miss Strong currently teaches Grade 10 computer studies with P5.js, Grade 11 computer science with Python, and Grade 12 computer science with Java. [Find Miss Strong's curriculum in the Replit Curriculum Hub!](https://replit.com/curriculum/Intro-to-CS-with-Python-ICS3U)","metadata":{"id":389}}],["390",{"pageContent":"---\ntitle: \"Common Errors Python Beginners Encounter (with Solutions)\"\nauthor: James Gallagher\ndate: 2020-08-04T07:00:00.000Z\ncategories: projects\n---\n\nLike English, Python has its own set of rules. Lines of code have to be written in a certain way, just like how sentences must follow a specific structure. Punctuation must be used within a set of guidelines when you’re writing in both English and [Python code](https://careerkarma.com/blog/types-of-coding-languages/).\n\nAll programmers, even the best developers in the world, encounter errors in their code. There’s no such thing as perfection when it comes to writing code. Errors come and go. Sometimes, errors are caused by typos. Other times, errors are caused by problems in your logic.\n\n\n## Encountering Errors as a New Programmer\n\nAs a beginner, encountering errors can be intimidating. You can be left asking: what should I do? The only wrong answer to that question is “give up!” There’s plenty of support available to help you overcome common errors.\n\nIn this article, we’ve compiled a list of common Python errors that beginners encounter. Each error comes with a solution that you can use to fix the error if you encounter it in your code.\n\n\n## NameError: nameerror name is not defined\n\n[NameErrors are raised](https://careerkarma.com/blog/python-nameerror-name-is-not-defined/) when you use a variable or function name that is invalid. This can be caused by making a spelling mistake when referencing or declaring a variable, using a function or a variable before it is declared, forgetting to define a variable, among other reasons.\n\n\n## SyntaxError: EOL while scanning string literal\n\nStrings must be closed on the same line on which they are declared, unless you are specifying a multi-line string. If you do not close a string, or use the wrong quotation mark to close a string, you will [receive an EOL error](https://careerkarma.com/blog/python-syntaxerror-eol-while-scanning-string-literal/).\n\n\n## TypeErrors","metadata":{"id":390}}],["391",{"pageContent":"## TypeErrors\n\nTypeErrors are raised when you try to execute an operation on a value whose data type does not support that operation.\n\n\n### list indices must be integers or slices, not str\n\nTo access items in a list, you must specify an index number. [Python array](https://careerkarma.com/blog/python-array/) is indexed from 0 which means that the first item in a list is at the position 0, the second item in a list is at the position 1, and so on. If you try to access a list using a string value, [this error will be raised](https://careerkarma.com/blog/python-typeerror-list-indices-must-be-integers-or-slices-not-str/).\n\n\n### can only concatenate str (not “int”) to str\n\nStrings can only be concatenated with other strings. Merging a string with an integer results in an error. [To solve this error](https://careerkarma.com/blog/python-typeerror-can-only-concatenate-str-not-int-to-str/), you should convert all numbers to a string before you concatenate them to a string.\n\n\n### ‘int’ object is not iterable\n\nUnlike lists and dictionaries, you cannot iterate over an integer. This error is commonly raised when you forget to use a range() statement to iterate over a list of numbers. You can [solve this error](https://careerkarma.com/blog/python-typeerror-int-object-is-not-iterable/) by ensuring that you surround a list by a range() statement if you are iterating over it.\n\n\n### ‘str’ object does not support item assignment\n\nStrings in Python are immutable, meaning they cannot be modified directly. If you want to change the value of a string, [you must create a new string from an existing one](https://careerkarma.com/blog/python-str-object-does-not-support-item-assignment/). This error is raised when you try to change a string as if it were a list using the item assignment technique.\n\n\n### can’t multiply sequence by non-int of type ‘float’","metadata":{"id":391}}],["392",{"pageContent":"### can’t multiply sequence by non-int of type ‘float’\n\nIn Python, strings can be multiplied. This creates a new string that repeats the contents of an old string a certain number of times. Strings cannot be multiplied by floats. If you try to multiply a string by a float, [this error](https://careerkarma.com/blog/python-typeerror-cant-multiply-sequence-by-non-int-of-type-float/) will be returned by the Python interpreter.\n\n\n## IndexErrors\n\nIndexErrors are returned when you try to access an index that does not exist in a list.\n\n\n### list index out of range\n\nYou can only access items in a list if they exist. This error is common in loops that iterate over a list of numbers and do not account for the fact that lists are indexed from zero. To [solve this problem](https://careerkarma.com/blog/python-indexerror-list-index-out-of-range/), make sure that any list item you reference in your code exists.\n\n\n### list assignment index out of range\n\nSimilarly, you cannot assign an item to a position in a list that does not exist. You can [solve this error](https://careerkarma.com/blog/python-indexerror-list-assignment-index-out-of-range/) by initializing a list with default values before you assign new values to the list.\n\n\n## Conclusion\n\nWe’ve only scratched the surface of all the errors that you can encounter while [learning Python](https://careerkarma.com/blog/how-long-to-learn-python/). There are a lot of unique ways to make mistakes in your code. Here are a few more errors that you may encounter:\n\n\n\n*   [typeerror: a bytes-like object is required, not ’str’](https://careerkarma.com/blog/python-typeerror-a-bytes-like-object-is-required/)\n*   [typeerror: string indices must be integers](https://careerkarma.com/blog/python-typeerror-string-indices-must-be-integers/)\n*   [syntaxerror: positional argument follows keyword argument](https://careerkarma.com/blog/python-positional-argument-follows-keyword-argument/)","metadata":{"id":392}}],["393",{"pageContent":"*   [syntaxerror: positional argument follows keyword argument](https://careerkarma.com/blog/python-positional-argument-follows-keyword-argument/)\n*   [typeerror: 'int' object is not subscriptable](https://careerkarma.com/blog/python-typeerror-int-object-is-not-subscriptable/)\n\nRemember, errors are incredibly common. You’ll see developers of all shapes and sizes encounter even the most basic errors on a day-to-day basis. The challenge is in how you respond. It may take some time to solve an error. Once you do, you’ll get a great sense of relief.\n\n\n**_About the author_**\n\n<img src=\"https://careerkarma.com/blog/wp-content/uploads/2020/01/james-gallagher-300x300.jpg\" alt=\"James Gallagher\" style=\"height:150px; width:150px; display:inline-block; horizontal-align:left;\">\n\n_James Gallagher is a writer at [Career Karma](https://careerkarma.com/) where he focuses on coding tutorials and technical articles. ([twitter](https://twitter.com/jamesg_oca))_","metadata":{"id":393}}],["394",{"pageContent":"---\ntitle: Changelog - June 2021\nauthor: Replit team\ndate: 2021-07-02T18:00:00.000Z\ncategories: news\n---\nWelcome to the June edition of our monthly changelog, where we highlight some of our big and small feature releases, user experience changes, and bug fixes!\n\n\nWe love hearing from you! Please leave any feedback you have [here](https://replit.canny.io/general-feedback).\n\n# Features\n\n- We released the first version of our multiplayer debugger! See the [blog post](https://blog.replit.com/multiplayer-debugging) for all the details.\n- You can now observe other users when multiplaying by clicking on their avatar. ![follow demo](images/changelog/follow-demo.gif)\n- You can now also see which file other users are in from the filetree. *\n- New dotfiles features:\n  * nix repls can now use `~/${REPL_SLUG}/.config` to store their dotfiles / config files in a [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)-compliant way.\n  * ssh and fluxbox dotfiles are now available at `~/${REPL_SLUG}/.config/{ssh,fluxbox}` respectively for all repls, nix or non-nix.\n- Have you ever had the urge to download one, single file from a repl? Now you can! Just click on the three dots next to file name and hit ‘Download’ to download your file. ![downloading just one file. amazing.](images/changelog/single-file-download.gif)\n\n# User experience changes\n- We rolled out an updated profile experience. Visit any replit user's profile to see their showcased repls. We really like this [one](https://replit.com/@LeviathanCoding?showcase=2)!\n- The Packages tab has been updated with a fresh coat of paint. Information is now more contextual and notifications happen inline. \n  ![Packager UX update — packages expand inline now, and versions are exposed](images/changelog/packager-updates.png)\n- `.replit` and Secrets overrides are now evaluated more consistently in more places. In increasing order of priority:\n  - The OS environment:\n    - The environment baked into Polygott","metadata":{"id":394}}],["395",{"pageContent":"- `.replit` and Secrets overrides are now evaluated more consistently in more places. In increasing order of priority:\n  - The OS environment:\n    - The environment baked into Polygott\n    - The environment injected by Docker\n  - The nix environment\n  - The `.replit` file\n  - Secrets\n\n\n\n# Bug fixes\n\n- GitHub commits should now properly attribute changes to your GitHub account, and will use a privacy email when that setting is enabled on your GitHub account.\n- We cleaned up some extra blank space near the home screen header.\n- Fixes around deleting team repls.\n- The notification icon is back in its correct location.\n- Deleting an open file could temporarily open a .env file.\n- Users sessions expire much less frequently, keeping you logged into replit longer.\n\n\n\\* enabled for [explorers](https://docs.replit.com/misc/explorer)","metadata":{"id":395}}],["396",{"pageContent":"---\ntitle: View Student Performance with Classroom Overview \nauthor: Haya Odeh\ndate: 2016-06-29T07:00:00.000Z\ncategories: edu\n---\n\nBefore we decided to build [repl.it classroom](https://replit.com/site/teams-for-education), we paid a visit to one of the schools using us in the classroom. I felt excited and anxious at the same time; I was introduced to the teacher and students in the class, and then my job started as designer observing and paying attention to every single detail.[](preview end)\n\nThe teacher explained the workflow and had two students assisting her to check on the students. Seeing the teacher and student’s frustration made me see a problem, I noticed that most of the students were trying to communicate their frustrations, but they were either embarrassed or too shy. Others gave up too soon, without even trying. The two assistants solution might have been a good idea, but for students knowing the fact that they’re being watched or might be judged made them hesitant to ask for help. Towards the end of the class I was handed a piece of paper and was asked to list the student names who completed the assignment successfully.\n\nA teacher should be able to see where her students are at—to have bird’s-eye view for the classroom so attention can be paid for the ones who need it the most, plus it would be good way to track progress. Hovering around each student individually can be time and energy consuming.\n\n## Introducing Classroom Overview","metadata":{"id":396}}],["397",{"pageContent":"## Introducing Classroom Overview\n\nThe *Student Overview* is a feature of the teacher dashboard that we’re introducing. Where previously you had to go into each assignment to see the progress for each student individually (which ironically mirrors the physical classroom experience described above). The teacher classroom dashboard is now divided into assignment and student sections. The assignments section lists out the assignments published or in draft and allows you to create a new assignment. The student section is all about the students, their names, completion percentages for all their assignments and the current submission status.\n\n![classroom overview](https://i.imgur.com/5N4gMNj.jpg)\n\nBrowsing the student submission status for assignments is as easy as going left and right.\n\n![submission status](https://i.imgur.com/qAbJit8.jpg)\n*Teacher browsing assignments.*\n\nAssignments are listed as numbers but by hovering on the number the assignment name pops up as a reminder of that particular assignment.\n![assignmnet popup](http://i.imgur.com/qAbJit8.jpg)\n*Teacher is hovering to check the name of the assignment*\n\nWe did our best to make this as visually comprehensible as possible. Colorful icons, and a vertical and horizontal line highlighting to give you contextual awareness while browsing your student overview.\n![assignmnet popup](http://i.imgur.com/j4hwQPp.jpg)\n*Teacher hovering on a complete state*\n\nTeachers that we showed this too were really excited about it. We’re\npassionate about building the tools to make your jobs—as teachers—easier so let us know what you think about this. This product is currently in closed beta but you can sign up for it [here](https://repl.it/site/classrooms).","metadata":{"id":397}}],["398",{"pageContent":"---\ntitle: CLUI Command bar and Search\nauthor: Moudy Elkammash and Sergei Chestakov\ndate: 2020-08-27T00:00:00.000Z\ncover: https://blog.repl.it/images/replit-logo-and-name.jpg\ncategories: product\n---\n\nOne of the challenges of adding new functionality to any interface is balancing discoverability with visual clutter. We've written before about how a [universal command bar](https://blog.repl.it/clui) can be a great way to expose features without overloading the UI with buttons. This pattern already works well for us in our mobile interface, so now we're bringing it to desktop! Here's a demo of what it looks like:\n\n![Demo of Command bar](images/commandbar/demo.gif)\n\nThe new command bar replaces our old shortcuts and file switcher modal. Just like before, you can use keyboard shortcuts (Cmd/Ctrl + P to switch files, Cmd/Ctrl + K to bring up all the options, etc) to interact with it. As we add more commands, power users will be able to have a keyboard centric experience while beginners can learn about features by exploring the different options.\n\nAmong the new features introduced in the updated command bar is Search! Search indexes the contents of every file in your project (with the exception of hidden files such as `node_modules` and anything in your `.gitignore`) and allows you to see every instance of a query across every file in your repl. From there, you can scroll through the results, see which line and file they appear in, and select a result to navigate directly to that line in the code like so:\n\n![Demo of Search](images/commandbar/search.gif)\n\nYou can access Search via Cmd/Ctrl + Shift + F or by bringing up the command bar and typing “search”.","metadata":{"id":398}}],["399",{"pageContent":"![Demo of Search](images/commandbar/search.gif)\n\nYou can access Search via Cmd/Ctrl + Shift + F or by bringing up the command bar and typing “search”.\n\nWe're still thinking about the best way to surface these commands. Although keyboard shortcuts are the fastest way to use the command bar, they're notoriously underused and hard to discover. In the future, we'll likely add a dedicated button that opens the command bar directly. In addition, other primary actions can expose a way to open the command bar prefilled with a command (like Cmd/Ctrl + P opens the command bar directly in the \"find\" command).\n\nOpen up a repl and give it a try!","metadata":{"id":399}}],["400",{"pageContent":"---\ntitle: \"Community Video Competition\"\nauthor: Patrick Coleman\ndate: 2020-06-23T07:00:00.000Z\ncategories: events\n---\n\nOver the past week, we ran a video competition for Replers. We got some great submissions from the community, and now it's time to announce the winners!\n\n## **1st** Place\n\n[@piemadd](https://repl.it/@piemadd). Love the 3D animation and vibey tunes! Enjoy your free year of `hacker` B^)\n\n[![piemadd video](https://img.youtube.com/vi/pomwanGXjn4/0.jpg)](https://www.youtube.com/watch?v=pomwanGXjn4 \"piemadd video\")\n\n## **2nd** Place\n\n[@matthewproskils](https://repl.it/@matthewproskils). Shouting out the community! 6 months of `hacker` for you!\n\n[![matthewproskils video](https://img.youtube.com/vi/nt2bOT_exJE/0.jpg)](https://www.youtube.com/watch?v=nt2bOT_exJE \"matthewproskils video\")\n\n## Honorable Mentions\n\nAll the honorable mentions get a shoutout and 1 free month of `hacker` o_0\n\n[@CoolJames1610](https://repl.it/@CoolJames1610)\n\n[![CoolJames1610 video](https://img.youtube.com/vi/ANZO1fJQJmI/0.jpg)](https://www.youtube.com/watch?v=ANZO1fJQJmI \"CoolJames1610 video\")\n\n[@PowerCoder](https://repl.it/@PowerCoder)\n\n[![PowerCoder video](https://img.youtube.com/vi/O_d3lrBO9C4/0.jpg)](https://www.youtube.com/watch?v=O_d3lrBO9C4 \"PowerCoder video\")\n\n[@Edqe](https://repl.it/@Edqe) (late but great submission)\n\n[![Edqe video](https://img.youtube.com/vi/yDtj3EVqh48/0.jpg)](https://www.youtube.com/watch?v=yDtj3EVqh48 \"Edqe video\")\n\nAnd an extra quick shoutout to [@bramley](https://repl.it/@bramley). Thanks for the idea for the competition!\n\nRepl.it signing off.\n`^D`","metadata":{"id":400}}],["401",{"pageContent":"---\ntitle: \"The New Game: Engaging 15M Next Generation Developers\"\nauthor: Jeff Burke\ndate: 2022-07-27\ncover: https://blog.repl.it/images/BD/220727_LaunchPartner.jpg\ncategories: News\n---\n\nToday, we launch partnerships with 19 companies, offering 35+ templates for Replit users to build with. The goal? Helping our community build the next-generation of projects. Let me explain.\n\n![](images/BD/220727_LaunchPartner.png)\n\n## Context: The growing strength of the Replit community\n\nThe Replit community is growing exponentially. As of today:\n- +15M Replit users \n- +20M websites & apps created and hosted\n- +10B monthly visits across websites & apps\n- +2B Repls run \n\nIn parallel, Replit as a platform has grown stronger. \n- Supports all programming languages.\n- 80,000+ packages.\n- Mobile app coming soon.\n- State-of-the-art AI features.\n- Ready-to-build templates.\n- Replit Ventures.\n  \nEvery month, Replit raises the ceiling on what devs can do. \n\nAs a result, Replit users are building increasingly sophisticated projects. From learning their first line of code to building an app to [monetizing their creation](https://twitter.com/amasad/status/1506429498895470592?s=20&t=o_psEi7bsBSElw5QRDYkkg). Users are even landing jobs as professional developers from Replit.\n\n## The next generation of developers\n\nAt Replit, we've always been about the future of software and bringing it to everyone, not just the lucky few in Silicon Valley. We feel strongly the next-generation of developers looks very different than the last. Globally distributed. Digital and cloud-native. Able to code and deploy from a $10 android phone.\n\nOur user base and product reflect this future: \n* Over 80% of Replit users are based outside of the US\n* Over 10% of Replit users code on mobile devices - not code for mobile, actually coding from a mobile device.\n* Thriving community where people share code, collaborate, and have fun\n* Idea to code to deployed apps in minutes not hours \n\nWhile we have a professional product, most of our users code for fun.","metadata":{"id":401}}],["402",{"pageContent":"* Thriving community where people share code, collaborate, and have fun\n* Idea to code to deployed apps in minutes not hours \n\nWhile we have a professional product, most of our users code for fun. \n\nTo engage these developers, the old way - things like on-site hackathons in Sunnyvale where companies offer pizza  - won't work. Companies looking to find awesome new developers need to engage users where they are passionate. Replit is how to do that. Here's more on how. \n\n![](images/BD/220727_NewGame.png)\n\n### Live hosted examples\nDitch the static repository files. Host live templates for developers and potential customers to see the product in action immediately.\n\n### Show them how to do it\nRather than explain your product, pull up a ready-to-go template anytime, anywhere. At a coffee shop? Run it on a mobile phone with Replit. At a conference? Send the url to the audience, so they can follow from their device. On a Zoom meeting? Send the Repl link in the chat.\n\n### Multiplayer coding\nStop sending back-and-forth emails. Code together.\n\n\"Try adding ____ on line 1,947\"\n\"There is a syntax error when you try to ____\"\n\"Did you install ___ package? ___ library?\"\n\nNo more. Jump into the users project with a join link and multiplayer code. For a live event, have users & customers jump into the code base with you. For async support, jump in & leave comments like a Google Doc. Spread the love. Leverage your valuable dev rel time how you do best.  \n\n### User-led features\nEngage directly with your user base. Source feedback on your product. See what they build!\n\n## Building a Company Profile on Replit\n\nOver the past few months, we have introduced:\n- Followers \n- The following feed\n- Community published templates\n\nNow, companies have a central place where they can build a following of developers, host high-quality templates, and bolster their developer brand.\n\nAnd today, we are introducing the \"verified\" badge for companies. We will be validating and verifying companies  and engagement for the Replit community.","metadata":{"id":402}}],["403",{"pageContent":"And today, we are introducing the \"verified\" badge for companies. We will be validating and verifying companies  and engagement for the Replit community.\n\nIf you work in the developer tools space and are interested in getting verified, apply [here](https://partnerships-form.util.repl.co/).\n\n18 companies are already verified and you can build with them on Replit today.\n\n### Twitter\nCreate [bookmark integrations](https://replit.com/@twitter/Bookmark-Search?v=1). Sort & monitor public tweets based on [geo-tag](https://tweets-around-the-world.twitter.repl.co/). Even monitor the Replit follower base. See their profile [here](https://replit.com/@Twitter).\n\n### Hugging Face\n**Build, train, and deploy state of the art models.** Use Replit to leverage large language models like [image classification](https://replit.com/@HuggingFace/Gradio) or [inference](https://replit.com/@HuggingFace/GradioInferenceAPI?v=1). See their profile [here](https://replit.com/@huggingface). \n\n### Stytch\n**Passwordless authentication.** Immediately deploy [email magic links](https://replit.com/@stytch/Email-magic-links-or-React-or-Powered-by-Stytch?v=1) or [SMS passcodes](https://replit.com/@stytch/SMS-passcodes-OTPs-or-React-or-Powered-by-Stytch). See their profile [here](https://replit.com/@stytch). \n\n### Stripe\n**Payments infrastructure for the internet.** Test an instant [Stripe checkout.](https://replit.com/@stripe) See their profile [here](https://replit.com/@Stripe). \n\n### Twilio\n**The Data-Drive Customer Engagement Platform.** Create [video conference app](https://replit.com/@twilio/Video-Conference-with-Twilio-Video?v=1), [send & receive SMS](https://replit.com/@twilio/Send-and-Receive-SMS-with-Twilio?v=1), or build a [SengGrid contact form](https://replit.com/@twilio/Contact-Form-with-SendGrid?v=1). See their profile [here](https://replit.com/@Twilio). \n\n### Coinbase","metadata":{"id":403}}],["404",{"pageContent":"### Coinbase\n**Secure online platform for buying, selling, transferring, and storing cryptocurrency.** Immediately, [test & deploy Coinbase wallet](https://replit.com/@coinbase/React-Template-with-Coinbase-Wallet-SDK?v=1). See their profile [here](https://replit.com/@Coinbase). \n\n### LaunchDarkly\n**Feature Flag & Toggle Management.** Within two minutes, test feature flag management for your app. See their profile [here](https://replit.com/@LaunchDarkly). \n\n\n### Protocol AI\n**InterPlanetary File System (IPFS).** [Instantly test & deploy web3 storage](https://replit.com/@protocolai/Web3StoragePython?v=1) with Filecoin. See their profile [here](https://replit.com/@ProtocolAI). \n\n### Alchemy \n**Blockchain APIs and Infrastructure.** Test Blockhain infrastructure with a [decentralized version of Twitter](https://replit.com/@alchemyplatform/Lens-Protocol-Quickstart?v=1) or [a coffee tipping dapp](https://replit.com/@alchemyplatform/Buy-Me-a-Coffee-DeFi-Dapp?v=1). See their profile [here](https://replit.com/@AlchemyPlatform). \n\n### Polygon\n**Scalable web3.** [Start an NFT collection](https://replit.com/@polygontechnology/polygon-nft-starter?v=1) on Polygon. See their profile [here](https://replit.com/@PolygonTechnology). \n\n### Buildspace\n**Home of the best web3 builders.** Templates for immediate onboarding to web3, including [ETH](https://replit.com/@buildspace/ETH-NFT-minting-site-in-5-minutes?v=1) & [Solana](https://replit.com/@buildspace/solana-nft-mint?v=1) NFT mints. See their profile [here](https://replit.com/@Buildspace). \n\n### Weights and Biases\n**Developer tools for MLOps.** Deploy & build with an [image generation system called CrAIyon](https://replit.com/@wandb/AI-Image-Generation-using-CrAIyon-and-WandB). See their profile [here](https://replit.com/@wandb). \n\n### Stedi\n**APIs for building EDI integrations.** [Convert EDI documents to JSON](https://replit.com/@stedi/EDI-to-JSON-NodeJS?v=1). See their profile [here](https://replit.com/@stedi). \n\n### Supabase","metadata":{"id":404}}],["405",{"pageContent":"### Stedi\n**APIs for building EDI integrations.** [Convert EDI documents to JSON](https://replit.com/@stedi/EDI-to-JSON-NodeJS?v=1). See their profile [here](https://replit.com/@stedi). \n\n### Supabase\n**Open source Firebase alternative.** [Build scalable databases in a weekend](https://replit.com/@Supabase/Supabase-py-Database?v=1). See their profile [here](https://replit.com/@supabase). \n\n### SignalWire\n**Software-Defined Telecom Networks.** [Relay appointment schedules](https://replit.com/@signalwire/signalwire-relay-appointment-reminder?v=1). [Create voice forwards.](https://replit.com/@signalwire/signalwire-voice-forwarder?v=1) See their profile [here](https://replit.com/@signalwire). \n\n### Deno\n**A modern runtime for JavaScript and TypeScript.** See their profile [here](https://replit.com/@deno). \n\n### Devfolio\n**India's largest community of builders.** Organize hackathons and leverage quick templates like [Filecoin](https://replit.com/@devfolio/IPFSFilecoin-Template?v=1). See their profile [here](https://replit.com/@devfolio). \n\n### Thirdweb\n**Build web3 apps easily.** Create an [NFT collection.](https://replit.com/@thirdweb-dev/Create-an-NFT-collection-with-Solidity-thirdweb?v=1) [Get started with Solidity.](https://replit.com/@thirdweb-dev/Get-Started-with-Solidity-using-Hardhat-and-thirdweb-deploy?v=1) See their profile [here](https://replit.com/@thirdweb). \n\n### Voucherify\n**Promo Code APIs.** [Generate](https://replit.com/@Voucherify/Generate-Assign-and-Validate-Unique-Promo-Codes?v=1) and [Test](https://replit.com/@Voucherify/Promo-Codes-Validation-with-a-Sample-Checkout?v=1) promo codes at a sample checkout. See their profile [here](https://replit.com/@voucherify).","metadata":{"id":405}}],["406",{"pageContent":"---\ntitle: Computing Superpower... At School?\nauthor: Brittany Pirkle\ndate: 2022-05-31\ncover: https://blog.replit.com/images/poster-06.jpg\ncategories: edu\n---\nReplit offers everyone the power of their own computer in the cloud. Access it from anywhere, program it to do (almost) anything, and share your programs and apps with whoever you want. It’s a computing superpower that we deeply believe will change the world.\n\nSchool-age users have always been integral to our vision. There are so many stories of successful tech entrepreneurs – including Mark Zuckerberg, Bill Gates, and our own CEO [Amjad Masad](https://medium.com/childhood-hacks/how-i-invented-databases-89dfa563b65) – who began their engineering careers while they were still in school, learning to code and coding to learn. It thrills us to know that Replit will be a part of many future such success stories of people who graduated from writing their first line of code to creating fun and useful software.\n\nWhen teens who use Replit access their computer in the cloud, we believe it should be treated like the computers that they may use at home or at school. As part of that, caregivers should be able to ensure that they are kept safe from online dangers or have controls where needed.\n\nToday we’re announcing a step that will make this easier than ever before. Announcing firewalledreplit.com, an additional domain to access Replit that takes its place alongside our original replit.com, but offers a safer experience. This dual-domain solution is an innovative solution for all users, fully free, and allows you to customize Replit’s power.\n\n\n## What does firewalledreplit.com offer?","metadata":{"id":406}}],["407",{"pageContent":"## What does firewalledreplit.com offer?\n\nAs the name implies, firewalledreplit.com is basically the same replit.com that you know and love, but behind a firewall that blocks certain potential online dangers. Users of the new site will be able to code just as they did before – even including web apps – but these apps won’t be able to access the Internet. This eliminates the risk of young users using Replit to access content they shouldn’t, and keeps their focus on coding. \n\nThis isn’t our first move to make our young users safer; last December, [we announced](https://blog.replit.com/family-friendly-dns) that we would be filtering all Internet access to prevent adult content and malware being accessed through Replit. That safeguard is still in place, on both our new and original domains. However, over the months since that feature rolled out, enterprising young users discovered some holes, such as the ability to access proxy websites, which in turn could be used to bypass both our filter and their school’s filters.\n\nThe firewall that we’re offering at firewalledreplit.com dramatically changes this from a “cat and mouse” game between young students and their caregivers into a slam-dunk for safety. Users can’t access unsafe content through a repl hosted at firewalledreplit.com because they can’t use it to access the Internet at all. (The only exceptions that we make are for a limited number of trusted software package repositories.)\n\nThat’s not quite all that firewalledreplit.com offers. This version of our site also hides our community features, so that users won’t be able to browse and search for other users’ apps, or view discussions. However, they will still be able to communicate and collaborate with their teachers and other students in their class, through the multi-player and collaborative features that are core to Replit's design. \n\n\n## How do I use it?","metadata":{"id":407}}],["408",{"pageContent":"## How do I use it?\n\nAlthough we first conceived this feature for use in schools, it’s free for everyone. It is as simple as loading firewalledreplit.com into the browser instead of replit.com. You’ll notice the difference because of some subtle design changes – keep an eye out for the “firewall” icon (shown here) that indicates that you’re on the firewalled domain.\n\n\n![alt_text](images/firewalled-replit.png \"Screenshot from firewalled-replit.com\")\n\nMost repls will function normally on firewalledreplit.com, but those that depend on being able to access the external internet might not function as expected. Users are free to switch between using firewalledreplit.com and our original domain replit.com at any time. For example, students may be required to use firewalledreplit.com for their work at school, while being permitted to use the unrestricted replit.com domain when at home.\n\nIt’s also now possible for schools or parents to block replit.com in their own firewall or router settings, while leaving access to firewalledreplit.com freely available. [This FAQ](https://docs.replit.com/firewalled-replit/firewalled-replit-faq) explains more about the differences between the original and the firewalled Replit experience, and this [document for IT administrators](https://docs.replit.com/teams-edu/it-administrators-toolkit) explains how educational institutions can block the original replit.com domains, if required.\n\n\n## Safety and power go together\n\nWe’re not done with raising the bar for safety on Replit. We’re also investing in improving our moderation tools, and [building out our team](https://replit.com/site/careers) of trust, safety, and security experts. We’ve added new reporting features that make it easy to report content that violates our terms and conditions. We’re strengthening our policies against inappropriate content such as self-harm and gambling. We're also working to improve our image moderation tools to filter out inappropriate content before anyone else sees it.","metadata":{"id":408}}],["409",{"pageContent":"Keeping our youngest users safe is an integral part of our mission to bring the [next billion software creators](https://blog.replit.com/b) online. We’re proud to be the only collaborative coding website that has taken these steps to put safety first. But computing power and safety shouldn’t be an either/or choice – we’re committed to providing both, so that Replit can continue to be for everyone. If you have questions or ideas about trust and safety at Replit, feel free to reach out to us at contact@replit.com.","metadata":{"id":409}}],["410",{"pageContent":"---\ntitle: \"CSS Concepts I Wish I Had Known Years Ago\"\nauthor: Christina Kopecky\ndate: 2020-07-06T07:00:00.000Z\ncategories: projects\n---\n\nWhen I think of web development, I like to think of it in terms of building a house. When we [learn HTML](https://careerkarma.com/blog/learn-html/), we are learning how to build the web page from the ground up, framing it with the lumber that will eventually become our end product.\n\nWith JavaScript, we create the wiring that will become the electricity that pretty much runs your home. Without JavaScript, we wouldn't have a web page that could run efficiently, save data to a database or manipulate that data. It's what basically keeps the lights turned on inside our home.\n\nCSS, on the other hand, puts the finishing touches on the home—creates a suitable environment for staging and selling the home. It decorates your text and background, creates your layout, and makes your website responsive and user-friendly. Without CSS, web pages just wouldn't be as professional or beautiful as they are.\n\nIn this article, we're going to target CSS—Cascading Style Sheets. We'll give a brief overview and provide some interactive tutorials that will help you level up as either a [web designer](https://careerkarma.com/careers/design) or [web developer](https://careerkarma.com/careers/web-development)!\n\n\n\n---\n\n\n\n## **What is CSS?**\n\nCSS was created to help web developers out. As websites were getting more and more complex, the styling was following suit. Prior to CSS, inline-styling was the name of the game, and the repetition of styling common elements in the same way was getting cumbersome for developers. This led to the standardization of CSS in the mid-to-late nineties so that external stylesheets could be used and [linked to the HTML](https://repl.it/@ChristinaKopeck/Beginner-CSS-Concepts#link-css-to-html).","metadata":{"id":410}}],["411",{"pageContent":"Cascading Style Sheets was named for the way it evaluates its code. If we have two different rules for a `alt;div>` in our code, for instance (assuming they are the same [specificity](https://repl.it/@ChristinaKopeck/Beginner-CSS-Concepts#specificity)) what happens?\n\nBy its very nature, CSS _cascades_—so if both sets of rules are pointing to the same element, and they have the same specificity, the last one written wins. That is, specificity is a way to figure out which declaration block, or set of rules, to use for an element in CSS.\n\nHere is a list of tutorials on the most important things to learn that will help you in your journey to [learn CSS](https://careerkarma.com/blog/learn-css/) and style your website:\n\n\n## **First Things First…**\n\n\n\n---\n\n\n\n### **Link CSS to HTML**\n\nThe first thing we need to be able to do to work with CSS is to [link a CSS file to an HTML file](https://careerkarma.com/blog/link-css-to-html/). This tutorial shows you how to do it!\n\n\n### **CSS Selectors**\n\nThe next step when learning CSS is to understand what [CSS selectors](https://careerkarma.com/blog/css-selectors/) and declaration blocks are and how they are used to style your web page. Here, we discuss the differences between elements, [classes vs ids](https://careerkarma.com/blog/css-class-vs-id-2/), and universal selectors, as well as some best practices for grouping CSS code together. \n\n\n## **Layout Properties In CSS**\n\n---\n\n\nOne of CSS’s primary responsibilities is the layout of our web page. There are several properties that assist in that regard: position, display, margin, border, padding. The next several tutorials are dedicated to these components of layout. \n\n\n### **CSS Position**\n\nThe [CSS position](https://careerkarma.com/blog/css-position) property affects where a container appears on the page. We use the position property, for example, to make a footer sticky or to create overlays. This will help you differentiate between the five possible values for position. \n\n\n### **CSS Properties—Display**","metadata":{"id":411}}],["412",{"pageContent":"### **CSS Properties—Display**\n\nWhen we want to affect how a container lays in relation to other containers, we use the CSS display property. Here, we will go over the inline, [inline-block](https://careerkarma.com/blog/css-inline-block/) and block values that can be assigned to an element. \n\n\n### **CSS Models**\n\n\n#### Box Model\n\nThe [CSS box model](https://careerkarma.com/blog/css-box-model/) is the basis of how we think about layout in CSS. It’s made up of content, padding, border, and margin. Here we will cover the differences between each and how to use them. \n\n\n#### Flexbox Model\n\nThe box model was a great start when it comes to how our web page is laid out; however, it could be a little difficult to work with if a design was a little complicated in the layout department. Also, the advent of the smartphone increased the need for another model that improved on the box model. Enter: the [CSS flexbox model](https://careerkarma.com/blog/css-flexbox/). It offers flexibility that the box model just didn’t have and makes implementing responsive designs simpler. \n\n\n#### Media Queries\n\nAlong with flexbox comes the need to be able to control CSS on various devices. Here we will talk about [CSS media queries](https://careerkarma.com/blog/css-media-queries/). Media queries basically give us the ability to have different CSS rules run on different device sizes. This gives us more control over how our websites look on smartphones, on tablets and on laptops.\n\n\n## **Style Properties In CSS**\n\n---\n\n\nThe other primary responsibility that CSS has is the style of our webpage. There are many, many properties that control how our page can look. Here, we will cover the most important of the properties: color (including background-color) and font-size. \n\n\n### **(Font) Color**\n\nIn this article on the [CSS color property](https://careerkarma.com/blog/css-font-color/), we learn about not only color but background-color and how to use it on text blocks. \n\n\n### **Gradient**","metadata":{"id":412}}],["413",{"pageContent":"In this article on the [CSS color property](https://careerkarma.com/blog/css-font-color/), we learn about not only color but background-color and how to use it on text blocks. \n\n\n### **Gradient**\n\nOne of the things we can do with the background, in addition to image and color, is to have some sort of gradient to fill the space. In this post, we cover the [CSS gradients](https://careerkarma.com/blog/css-gradient/) that can be used as values on the background. The possibilities include linear-gradient and the radial-gradient. They open up all sorts of color combinations that can be used in lieu of a solid color background or image. \n\n\n### **Font-Size**\n\n[CSS font-size](https://careerkarma.com/blog/css-font-size/) comes into play when we talk about accessibility. Here, we take a look at the different types of font-sizes we can use on text:  pixels, rems, ems and vw/vh. \n\nThis only scratches the surface of everything that CSS can do for you when it comes to styling your web page. If you feel you have mastered these concepts, I encourage you to look into other CSS concepts like CSS Grid and CSS Animations to become even more of a CSS master! \n\n**_About the author_**\n\n<img src=\"https://careerkarma.com/blog/wp-content/uploads/2020/06/image-3-300x300.png\" alt=\"Christina Kopecky\" style=\"height:250px; width:250px; display:inline-block; horizontal-align:left;\">\n\n_Christina Kopecky is a writer at Career Karma where she focuses on coding tutorials and technical articles. ([LinkedIn](https://www.linkedin.com/in/cmvnk/))_","metadata":{"id":413}}],["414",{"pageContent":"---\ntitle: Redesigning Cycles Transaction History\nauthor: Mathurah Ravigulan\ndate: 2022-12-23\ncategories: eng,product\ncover: https://blog.replit.com/images/cycles_transaction/banner.png\nprofiles: replit-mathu\n---\n\n![Cycles Cover Image](https://blog.replit.com/images/cycles_transaction/banner.png)\n\n\nEarlier this year we introduced [Cycles](https://docs.replit.com/cycles/about-cycles) to the platform, a virtual token that can be earned or purchased to add compute power and functionality for your Repls. \n\nHundreds of thousands of cycles transactions have been made to date. And now more Replit community members are able to earn cycles of their own through bounties!\n\n\nIn the past, Replit transactions looked something like this: \n![image](https://blog.replit.com/images/cycles_transaction/old_transactions.png)\n\n\nWith this view, although simple, it’s hard to know where exactly your cycles are going, whether it's spending on powerups, purchasing, or sending to other replit community members via tips and bounties. There’s also nothing actionable you can do with this information. \n\nOur initial focus for the first iteration was purely around cycles functionalty. Now there are even more things you can use cycles for, we're revisiting the experience to focus on helping you find information on where you spent or earned cycles on Replit!\n\nAs a goal of my internship, I wanted to work on a more complex engineering problem and learn more about the cycles team, which is why I took on this project!\n\n\nThe goals for this project are to: \n- Make the cycles transaction page extensible for future cycles products we build on replit\n- Surface transaction IDs (so it's easy to see that each transaction is unique)\n- Group transactions by categories \n- Surface details about what the transaction is\n\nThe new page looks like this:\n![gif](https://blog.replit.com/images/cycles_transaction/newpage.gif)\n\n\nSo, how did we get there? \n\nI broke my project down into 3 phases:","metadata":{"id":414}}],["415",{"pageContent":"The new page looks like this:\n![gif](https://blog.replit.com/images/cycles_transaction/newpage.gif)\n\n\nSo, how did we get there? \n\nI broke my project down into 3 phases: \n1. Talking to replit community members to understand what they would like to see on the transaction history page.\n2. Developing an initial design & working with our awesome designer Larry to translate the requirements I gathered into designs.\n3. Working on the engineering implementation from database design to front-end implemenation.\n\nLet's dig into understanding how cycles and transactions work on replit: \n\nWe have a table to represent transactions, users, balances, and wallets for interactions that require holding cycles in Google Cloud Spanner. The transactions table in this system is a source of truth for all transactions made on replit. \n\nIn Postgres, we have tables for each type of purchase you can make on replit, for example a table for powerups, bounties, tips, and more. These tables hold more contextual information on the detail of the transaction itself. \n\nOutside of these spanner tables, we use postgres tables to hold more contextual information about the transactions itself. For example, bouties, powerups, tips all have their own tables that hold more details. \n![image](https://blog.replit.com/images/cycles_transaction/table_1.png)\n\nLet's go through an example. What happens when you purchase a power up on Replit?\n1. First it'll create a Repl order that indicates the type of power-up. For example, always on. \n2. Then it'll link this Repl order to another transactions table in postgres.\n3. In the transactions table, it creates a transaction id that's linked to the transactions table in spanner. \n\n![image](https://blog.replit.com/images/cycles_transaction/table_2.png)","metadata":{"id":415}}],["416",{"pageContent":"3. In the transactions table, it creates a transaction id that's linked to the transactions table in spanner. \n\n![image](https://blog.replit.com/images/cycles_transaction/table_2.png)\n\nOne of the main engineering challenges was that the Spanner transactions table is too simple. It was sufficient to provide data for the current view, but if we want Replit community members to be able to see more details on their transaction, it will need to use the transaction ID to search all the possible tables to find this information which will be an expensive compute. \n\nAs part of the project, I introduced a new column to the spanner table called Metadata. Note: this change will only be rolled out to new transactions going forward!\n\nLet's see how the `metadata` would look like for an example `boost` transaction. \n\n```js\nmetadata: {\n  system: 'web-postgres'\n  relation: 'repl_order'\n  power_up_type: 'boost'\n  id:\n}\n```\nThe metadata will act as a reference to contextual data within the transactions table, making it easier to find information about Cycles Transactions. \n\n- `system`: refers to the system the data lives on, whether it's postgres or anything else.\n- `relation`: corresponds to the postgres table where the transaction is from.\n- `id`: will be used in the future to query additional data from the table such as Repls/bounty names.\n\nUsing this metadata, I was able to query and categorize transactions based on their table relations as you can see in the view. \n\nThe new cycles transaction history will be rolled out to explorers today and will slowly rollout to everyone next week. Start making new transactions on replit to try it out at https://replit.com/cycles. \n\nThis is only the start of the new Cycles Transaction History and I'm excited for the Replit team to continue building upon more features for this!\n\nA few features I'm looking forward to the team adding: \n- Connecting the Repls you purchased your powerups for. This way you can easily see which Repl you spent it on","metadata":{"id":416}}],["417",{"pageContent":"A few features I'm looking forward to the team adding: \n- Connecting the Repls you purchased your powerups for. This way you can easily see which Repl you spent it on\n- Ability to see who you got tips from and include the link to their profile in your transaction\n- Filtering by transaction categories and ability to view transactions in a specific date range\n\nOverall this was a really fun internship and I learned a lot! Thanks so much Replit for the opportunity :)","metadata":{"id":417}}],["418",{"pageContent":"---\ntitle: Enter the Shadows with Dark Mode\nauthor: Barron Webster\ndate: 2021-10-5\ncover: https://blog.repl.it/images/dark_mode/dark_mode_cover.png\ncategories: design\n---\n\n***Looking for how to change your Replit theme? Click [here](https://blog.replit.com/themehowto).***\n\nIt's spooky season, so we have a spooky feature for you: Dark Mode™ is now available for everyone on Replit! \n\nJust open your sidebar and click the moon to enter the shadow realm. Click the sun to switch back.\n\n![Dark Theme](images/dark_mode/theme_switching.gif) \n\nDark theme will work across the app — from the homepage,\n\n![Dark Homescreen](images/dark_mode/dark_homescreen.png)\n\nto the workspace:\n\n![Dark Workspace](images/dark_mode/dark_workspace.png)\n\nto the rest of the site.\n\n\n### Where we're going\nThis update has been enabled by a lot of work we're doing on Replit's design system. [Tyler](https://twitter.com/tylerangert), [Alex](https://twitter.com/alex_frantic), Ashlynn & I have restructured & simplified how we use css variables. And we've been building out reusable components and visual utilities that can render across themes. \n\nThis infrastructural work makes it a lot easier to do some really useful and cool things with our interface. Dark mode is a good first step — avoiding being blinded in the middle of the night. In the future, it will enable us to do things like have custom themes — personal themes, themes for a team or class, etc.\n\nIt also means it'll be much easier to make sure our UI is accessible. Our refactored color tokens have higher foreground/background contrast across the board. And by building accessibility best practices into our components, it means engineers get them for free when they take components off the shelf. It also makes high-contrast themes, or themes for colorblind users, will be much easier for us to make.","metadata":{"id":418}}],["419",{"pageContent":"---\ntitle: Destroying Stuck Repls\nauthor: Connor Brewster\ncategories: infra\n---\n\n**NOTE**: I am splitting this into some smaller posts.\n\nOutline:\n  * What is a stuck repl?\n    * Different kinds\n    * How often this happened\n  * First step is to start tracking it\n    * Unable to proxy log entries\n    * Tracking unable to proxy errors in prom/grafana\n    * Used a repl to scrape the logs and look for repls that have proxy errors over a span of time\n    * Aggegrate these stuck repls into buckets of \"time stuck\"\n    * Export these metrics to prometheus\n    * Add a nice graph in Grafana\n  * Core Invariant of Repl.it\n    * Only ever 0-1 container alive for a repl\n    * Essential for things like multiplayer to work\n    * Really bad things can happen if this invariant is broken\n  * Fixing repls that get stuck for hours\n  * Fixing stuck repls due to slow container destroys on shutdown\n    * Preemptible machines\n      * Why?\n      * Causes 100-200 repl containers to be destroyed at once\n    * Maybe talk about systemd dependencies since docker was shutting at the same time as conman?\n    * Docker is slow to kill this many containers\n      * `docker destroy` vs `docker kill`\n        * Destroy is graceful, gives time for container to shutdown gracefully\n        * Kill should be immediate\n      * Why isn't kill immediate?\n        * Docker probably isn't designed to immediately kill hundreds of containers in a few seconds\n        * Custom docker install\n        * Lock contention\n        * Waiting for cleanup of network interfaces\n        * Serial interface of netlink was a bottleneck\n      * What can we do about it?\n        * Kill the container's pid ourselves\n        * Since pid1 is the init process in its namespace, killing that kills all processes in the namespace\n  * Where are we now?\n    * We track both stuck repls and new session error rates\n      * New session error rate comfortably below 0.5%\n      * Stuck repl rate is very low, the ones that are stuck are only stuck for ~5 sec","metadata":{"id":419}}],["420",{"pageContent":"* We track both stuck repls and new session error rates\n      * New session error rate comfortably below 0.5%\n      * Stuck repl rate is very low, the ones that are stuck are only stuck for ~5 sec\n\n[TODO: Come up with a more inspiring intro?]\nYou may have heard that we recently squashed a gnarly bug on our platform, but you may be curious about what was causing this issue and how we went about fixing it.\n\n[TODO: Include a gif of a stuck repl]\n\n<div style=\"display: flex; justify-content: center;\">\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">One of the worst bugs on our platform SQUASHED.<br><br>SMASHED.<br><br>E R A D I C A T E D<br><br>Ahem... so yeah, it&#39;s just gone now. <a href=\"https://t.co/4z8djrtDW6\">pic.twitter.com/4z8djrtDW6</a></p>&mdash; Repl.it (@replit) <a href=\"https://twitter.com/replit/status/1318777999789969408?ref_src=twsrc%5Etfw\">October 21, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div>\n\nWe had heard numerous reports of repls that would get stuck in an endless reconnecting loop. Sometimes the repls would be stuck for a couple minutes, other times they could be stuck in this look for multiple hours. This was no good; especially if you were needing to work on a homework assignment or were excited to work on your side project only to find out you can't connect. This is why we spent some time focusing on stability to make sure you can always access your repls.\n\nWhen we would get reports of stuck repls, it was difficult to figure out the precise root cause. Sometimes the repls would already be working again by the time we went to diagnose the issue. This was clearly a problem, but the root cause was hard to identify. We needed to take a different approach to tracking down these issues.","metadata":{"id":420}}],["421",{"pageContent":"One of the best things to do is to collect more metrics. Since this issue causes infinite reconnect loops, that means connections to the backend evaluation server were failing for some reason. In our effort to improve stability, successful connection rate was the first metric we started tracking. While adding new metrics is great, sometimes it uncovers some unfortunate realities that weren't aparent before. In our case, we discovered that our connection failure rate was around 3% [TODO: Verify this number, finding a graph would be great too] with occasional spikes that could go up to 10% or more.\n\n## Breaking it down\n\nWhile the failure rate was much disappointingly than we expected, it meant that we had room for improvement. We got right to work and began to break the problem down.\n\nWhile overall failure rate is a great metric to have, it doesn't really tell us the full story. Is the connection failure happening across all repls? Is it due to a smaller set of repls that are continually having connection errors?\n\nTo answer these questions, we needed to drill further into the problem. There's no better place to do this than to dig into the logs of a repl that has failed connection attempts. We have nice indexed logs which allow us to quickly investigate a handful of these repls and look for any patterns.\n\nIt became clear that there were 2 different classes of stuck repls:\n * Repls that were stuck for less than 2 minutes\n * Repls that were stuck for an hour or more\n\nManually reading the logs can only get you so far. With the volume of logs and the number of repls we run, it's difficult to tell how frequent these different classes stuck repls occur. Our logging solution provides some basic aggregation tools, but it doesn't allow us to look at consecutive errors for a specific repl over time.\n\nAt repl.it we love using our own product to build tools to make our jobs easier. It's kind of a super power.","metadata":{"id":421}}],["422",{"pageContent":"At repl.it we love using our own product to build tools to make our jobs easier. It's kind of a super power.\n\nTo determine how many stuck repls we have, I dumped some logs from the past 24 hours into a repl and began writing a script to crunch the log messages and spit out a nice table and bar graph of stuck repls bucketed by how long they have been stuck.\n\n__Example output from my stuck repl finder__\n```\nTue Oct 06 2020 00:00:00 GMT+0000 (Coordinated Universal Time)\nLog Interval: 24.00 hours\nTotal stuck: 7427\n\nBucketed by time stuck (bucket name = max time in seconds)\n     10 | ############################################################ | 2894\n     15 | ############################################                 | 2125\n     20 | ###############                                              | 722\n     25 | ####################                                         | 941\n     30 | #####                                                        | 238\n     40 | ####                                                         | 169\n     60 | ####                                                         | 207\n     90 | ##                                                           | 92\n    120 |                                                              | 13\n    180 |                                                              | 14\n    240 |                                                              | 4\n    360 |                                                              | 2\n    600 |                                                              | 0\n   1200 |                                                              | 0\n   3600 |                                                              | 2\n  10000 |                                                              | 3\n```\n\nWith this log-crunching repl, the data informed us that thousands of repls were stuck for less than 2 minutes per day and 5-10 repl would be stuck for almost and hour or more.","metadata":{"id":422}}],["423",{"pageContent":"```\n\nWith this log-crunching repl, the data informed us that thousands of repls were stuck for less than 2 minutes per day and 5-10 repl would be stuck for almost and hour or more.\n\nFrustration may ensue while waiting almost a minute to access your repl, but imagine not being able to access your repl for over an hour. We need to figure out why these repls are getting stuck for so long and fix the underlying cause, pronto!\n\n## Fixing **Really** Stuck Repls\n\nArmed with our new information, I set out to find the root cause of the forever-stuck-repls. Since there are so few of these, going back to the logs is a good place to see where it all went wrong.\n\n> Digging through logs can be quite fun and provides good insight into how a system actually works.\n\nFirst, we need to filter down the logs we want to look at. This is critical because we have a massive volume of log messages. Just in the past 15 minutes of writing this, over 4 million log messages were recorded!\n\nLuckily, the stuck repl finder spits out a few repls that were stuck for over an hour. Using the repl IDs in this list, we can filter the logs down to only entries that are relevant to that repl.\n\nMost of these repls had a recurring log entry: `session exited unexpectedly startup lock took too long for`\n\nSo, what is a startup lock and why is taking so long to get one? I'll go more into detail of our infrastructure in a bit. For now all you need to know is we use a locking mechanism to ensure that only one container ever exists at one time for a repl.\n\nSeeing this log message repeatedly for over an hour likely means one thing: a **deadlock**.\n\nWe have a couples to determine how these deadlocks occur:\n * If we catch one in the act, we can dump the goroutines and look for goroutines blocked on things like `semacquire`.\n * Add more log messages and look at the order of events to determine if that could lead to a deadlock.","metadata":{"id":423}}],["424",{"pageContent":"* Add more log messages and look at the order of events to determine if that could lead to a deadlock.\n\nUnfortunately, there were a few different race conditions that lead to deadlocks that we had to track down and each one could have a blog post of its own.\n\n[TODO: Maybe talk about chaos for writing tests to prevent regressions. That would be a cool blog post for Zach to write.]\n\n## Leveling up our tools\nWhile the repl I wrote earlier to crunch the logs messages worked, I still had to manually run the thing every day to get the results for the past 24 hours. This was starting to get old and Dan wanted to see how the metric was changing over time.\n\n[TODO: Can we make this image smaller?]\n\n![Dan suggests making this better](images/destroying-stuck-repls/dan_msg.png)\n\n> If you find yourself doing the same manual task over and over, it's a sign that it might need to be automated.\n\nWhat I really wanted was a nice real time chart in grafana that shows stuck repls over time. After talking with my team, Mason, recommended turning the repl into a hosted repl which serves metrics that our prometheus instance could scrape. I refactored the repl to make use of [repl.it database](https://blog.repl.it/database) and to serve a web page for prometheus to scrape. With just a couple hours of work, we now had real-time metrics for stuck repls.\n\n[TODO: Should I make the repl public and link it here?]\n\n![Graph of stuck repls](images/destroying-stuck-repls/stuck_repls_graph.png)\n> This is a recent screenshot of the graph, so it looks much better than it used to!\n\nNot only does this metric help us make sure our patches are actually reducing the number of stuck repls, but it will also help us make sure we don't accidentally regress in the future.\n\n[TODO: Maybe this is its own blog post]\n\n## Fixing *Sorta* Stuck Repls\nNow that we've patched up all the deadlocks we know about, it's time to shift our eyes to repls that get stuck for a minute or two.","metadata":{"id":424}}],["425",{"pageContent":"[TODO: Maybe this is its own blog post]\n\n## Fixing *Sorta* Stuck Repls\nNow that we've patched up all the deadlocks we know about, it's time to shift our eyes to repls that get stuck for a minute or two.\n\nWith a dashboard full of new stability-related metrics, we are able to find interesting correlations. _Aha!_ There is a spike in session connection errors whenever a group of conman instances shut down at the same time.\n\n> Hold up! What does any of this mean? What is conman? And why do they shutdown frequently?\n\nTo answer that, we need to take a quick detour and talk about how repl.it actually works behind the scenes.\n\nLet's talk about the most fundamental atom in the repl.it universe: the repl. \n\n[TODO: What is a repl? What is a repl container?]\n\n[TODO: Talk about the importance of single repl container per repl]\n\nWhen you open up a repl in your browser you are connected to a repl container which is running on our infrastructure. These are custom docker containers that are packed with all sorts of development tools.\n\nTo run these docker containers, we need a host machine. This is where conman comes in; it's name is short for container manager. Since we have so many repls running at any given time, a single conman cannot run all of these docker containers. So we have a group of conman instances which manage all the repl containers. A loadbalancer is used to distribute containers across conman instances. It is not uncommon for a single conman instance to be running 100-200 repl docker containers.\n\nWe run the majority of our conman instances using Google Cloud's preemptible instances. These are machines that can be taken away from us at any time with 30 seconds notice. The important thing is that these machines have an 80% discounted cost. That's a massive savings, but it requires us to architect replit to be resilient to machines disappearing at any time with short notice.","metadata":{"id":425}}],["426",{"pageContent":"With some foundational knowledge of our architecture, lets focus in on the failure mode that happens when a conman instance is shut down.\n\n![Simplified diagram of repl.it conman architecture](images/destroying-stuck-repls/simplified_arch.png)\n\n1. A user opens their repl which opens the IDE and attempts to connect to the backend evaluation server via a WebSocket.\n2. The request hits a load balancer which selects a conman instance to proxy to based on CPU usage.\n3. A healthy, living conman gets the request. Conman notices that the request is for a container that is living on a different conman and proxies the request there.\n4. Sadly this conman is shutting down and rejects the WebSocket connection!\n\nRequests will continue to fail until either:\n1. The docker container is shut down and the repl container entry in the global store is removed.\n2. Conman finishes shutting down and is no longer accessibly. In this case, the first conman will remove the old repl container entry and start a new container.\n\nFor some reason, the docker containers were not being shut down fast enough. Google Cloud Platform, provides 30 seconds for the instance to shutdown before it is forcefully shutdown. Unfortunately, destroying all the containers on an instance within the time limit was a rarity.\n\nAfter adding some more logging and metrics around container shutdowns, it became clear that calls to `docker kill` were taking much longer than expected. `docker kill` usually took [TODO: track down this number] to kill a repl container during normal operation, but when killing 100-200 containers at the same time, `docker kill` would take 20+ seconds.","metadata":{"id":426}}],["427",{"pageContent":"Docker offers two ways to stop a container: `docker stop` and `docker kill`. Docker stop sends a `SIGTERM` signal to the container and gives it a grace period to gracefully shutdown. If the container doesn't shutdown within the grace period, the container is sent `SIGKILL`. We don't care about gracefully shutting down the container and would rather shut it down as quickly as possible. `docker kill` sends `SIGKILL` which should kill the container immediately. For some reason, the theory did not match reality, `docker kill` shouldn't be taking on the order of seconds to complete just to send `SIGKILL` to the container. There must be something else going on.\n\nTo dig into this, here is a script which will create 200 docker containers and times how long it takes to kill them all at the same time.\n\n```bash\n#!/bin/bash\n\nCOUNT=200\necho \"Starting $COUNT containers...\"\nfor i in $(seq 1 $COUNT); do\n    printf .\n    docker run -d --name test-$i nginx > /dev/null 2>&1\ndone\n\necho -e \"\\nKilling $COUNT containers...\"\ntime $(docker kill $(docker container ls -a --filter \"name=test\" --format \"{{.ID}}\") > /dev/null 2>&1)\n\necho -e \"\\nCleaning up...\"\ndocker rm $(docker container ls -a --filter \"name=test\" --format \"{{.ID}}\") > /dev/null 2>&1\n```\n\nHere is output from running this on an n1-highmem-4 instance on GCE (this is what our production infrastructure uses):\n\n```\nStarting 200 containers...\n................................<trimmed>\nKilling 200 containers...\n\nreal    0m37.732s\nuser    0m0.135s\nsys     0m0.081s\n\nCleaning up...\n```\n\n_Yikes!_ It takes over 30 seconds to kill 200 containers. It shouldn't take this long to send `SIGKILL` to all these containers.\n\nDocker daemon has an option to [enable debug logging](https://docs.docker.com/config/daemon/#enable-debugging). These logs let us peak into what what's happening inside of dockerd and each entry has a timestamp so it might provide some insight into where all this time is being spent.","metadata":{"id":427}}],["428",{"pageContent":"With debug logging enabled, let's rerun the script and look at dockerd's logs. This will output a lot of log messages since we are dealing with 200 container, so lets look some hand-selected portions of the logs.\n\n```\n2020-12-04T04:30:53.084Z\tdockerd\tCalling GET /v1.40/containers/json?all=1&filters=%7B%22name%22%3A%7B%22test%22%3Atrue%7D%7D\n2020-12-04T04:30:53.084Z\tdockerd\tCalling HEAD /_ping\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/33f7bdc9a123/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container 33f7bdc9a1239a3e1625ddb607a7d39ae00ea9f0fba84fc2cbca239d73c7b85c\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/2bfc4bf27ce9/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container 2bfc4bf27ce93b1cd690d010df329c505d51e0ae3e8d55c888b199ce0585056b\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/bef1570e5655/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container bef1570e5655f902cb262ab4cac4a873a27915639e96fe44a4381df9c11575d0\n...\n```\n\nHere we can see the requests to kill each container, and immediately sending `SIGKILL` to the container.\n\nHeres the log entries seen around 30 seconds after executing `docker kill`:\n```\n...\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-1's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.2)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.2 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65529, Sequence: (0xfa000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-5's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.6)","metadata":{"id":428}}],["429",{"pageContent":"2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-5's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.6)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.6 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65530, Sequence: (0xda000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-3's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.4)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.4 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65531, Sequence: (0xd8000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-2's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.3)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.3 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65532, Sequence: (0xd0000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n```\n\nThese logs don't give us a full picture of everything dockerd is doing, but this makes it seem like dockerd might be spending a lot of time releasing network addresses.\n\nAt this point in my adventure, I decided it was time to start digging into docker engine's source code and build my own version of dockerd with some extra logging.\n\nI started out by looking for the codepath that handles container kill requests. I added some extra log messages with timings of different spans and eventually I found out where all this time was being spent:","metadata":{"id":429}}],["430",{"pageContent":"`SIGKILL` is sent to the container and then before responding to the HTTP request, the engine waits for the container to no longer be running ([source](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/kill.go#L174))\n\n```\n\t<-container.Wait(context.Background(), containerpkg.WaitConditionNotRunning)\n```\n\nThe `container.Wait` function returns a channel which receives the exit code and any error from the container. Unfortunately, to get the exit code and error, a lock on the interal container struct must be acquired. ([source](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/container/state.go#L212-L233))\n\n```go\n  ...\n\n\tgo func() {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// Context timeout or cancellation.\n\t\t\tresultC <- StateStatus{\n\t\t\t\texitCode: -1,\n\t\t\t\terr:      ctx.Err(),\n\t\t\t}\n\t\t\treturn\n\t\tcase <-waitStop:\n\t\tcase <-waitRemove:\n\t\t}\n\n\t\ts.Lock() // <-- Time is spent waiting here\n\t\tresult := StateStatus{\n\t\t\texitCode: s.ExitCode(),\n\t\t\terr:      s.Err(),\n\t\t}\n\t\ts.Unlock()\n\n\t\tresultC <- result\n\t}()\n\n\treturn resultC\n\n  ...\n```\n\nAs it turns out, this container lock is held while cleaning up network resources and the `s.Lock()` above ends up waiting for a long time. This happens inside [`handleContainerExit`](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/monitor.go#L27-L103). The container lock is held for the duration of the function. This function calls the container's [`Cleanup`](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/start.go#L226-L266) method which releases network resources.","metadata":{"id":430}}],["431",{"pageContent":"So why does it take so long to cleanup network resources? The network resources are handled via [netlink](https://man7.org/linux/man-pages/man7/netlink.7.html). Netlink is used to communicate between user and kernel space which can be used to configure network interfaces. Unfortunately, netlink works via a serial interface. This means that all the operations to release the address of each container get bottlenecked by this serial interface.\n\nThings started to feel a bit hopeless here. It didn't seem like there was anything we could do differently to escape waiting for network resources to be cleaned up. But, maybe we could bypass Docker altogether when killing containers.\n\nAs far as we are concerned, we want to kill the container but we don't want to wait for network resources to be cleaned up. The important thing is that the container will no longer produce any side effects. For example, we don't want the contain to take anymore snapshots.\n\nThe solution I went with was to bypass docker by killing the container's pid directly. Conman records the pid of the container after it is started and then sends `SIGKILL` to the container when it becomes time to be killed. Since a container forms a pid namespace, when the container's pid terminates, all other processes in the container/pid namespace also terminate.\n\nFrom `pid_namespaces` [manual page](https://man7.org/linux/man-pages/man7/pid_namespaces.7.html):\n\n> If the \"init\" process of a PID namespace terminates, the kernel terminates all of the processes in the namespace via a SIGKILL signal.\n\nGiven this, we can be reasonably confident that after sending `SIGKILL` to the container, that the container no longer produces any side effects.\n\nAfter this change was applied, control of repls would be relinquished under a few seconds during shutdown. This was a massive improvement over the 30+ seconds before and brought our session connection error rate down from ~3% to well under 0.5%.\n\n[TODO: Add graph of this]","metadata":{"id":431}}],["432",{"pageContent":"---\ntitle: Everyone will learn to program (or why the computer revolution *still* hasn't happened yet)\nauthor: Patrick Coleman\ndate: 2021-08-19\ncover: https://blog.repl.it/images/teams_edu/everyoneprograms.png\ncategories: edu\n---\n\nLast week [I spoke on behalf of Replit](https://www.youtube.com/watch?v=zZVUZuDfhFY) at the [ASU+GSV summit](https://www.asugsvsummit.com/), one of the largest education technology conferences in the world, on the topic [\"Is coding an essential modern fluency?\"](https://asugsv.app.swapcard.com/widget/event/asu-gsv-2021/planning/UGxhbm5pbmdfNjI4NTk0). For me and the rest of the panelists ([Mike Smith of Harvard](https://scholar.harvard.edu/mikesmith), [Taniya Mishra of SureStart](https://mysurestart.com/about), and [Krishna Vedati of Tynker](https://www.tynker.com/about/)) the answer is an easy and obvious YES. And I'm guessing if you've been coding along with Replit's journey, it's a yes too.\n\n**Programming is essential.** Full stop. `EOF`\n\n![Everyone will learn to program (or why the computer revolution still hasn't happened yet)](https://everyoneprograms.patrickatreplit.repl.co/everyoneprograms.png)\n\n[We all](https://www.youtube.com/watch?v=nKIu9yen5nc) believe that within the next decade programming will be an education basic for all students, everywhere, just like reading, writing, and arithmetic. \n\nNow before I dive in (and at the risk of being a little pedantic), I want to quickly distinguish coding vs. programming. Coding is writing instructions for a computer in an esoteric language, using proper syntax. Programming is creating software to do things. Even block-based languages like [MIT Scratch](https://scratch.mit.edu/) and no-code tools like [Webflow](https://webflow.com/) are \"programming\" (if not really \"coding\").","metadata":{"id":432}}],["433",{"pageContent":"Programming is essential. **Coding is just a way to program.** And while we're not yet at a point where you can expressively program without doing some coding, still the [fewer lines of code you have to write, the better](https://twitter.com/amasad/status/1350673660978237440).\n\nToday, you can't understand the world without understanding a little bit about computers and how they work. This will only get more true. After all if you don't understand computers, you might even think the internet is just a [series of tubes](https://en.wikipedia.org/wiki/Series_of_tubes)... \n\nNot understanding programming will be just like not understanding basic physics or how to read. Without physics, cars passing you on the street would be like magical metal boxes. Whithout literacy, this blog post would be nothing but cryptic gibberish. But just like you don't have to be a theoretical physicist to understand gravity, you don't need to be a computer scientist to code. You don't need to be able to operate an industrial printing press or be a computer hardware hacker. You don't need to write novels or scientific papers or philosophical treatises. And you don't need to architect [elegantly](http://www.catb.org/jargon/html/E/elegant.html) designed applications as a software engineer.\n\nYou just need to be able to program. A little bit. Just the basics, really.\n- You should be able to make a webpage or app for your business as easily as you can write a blog post, an email, or a restaurant menu\n- You should be able to invent new video games as easily as you can new card games\n- You should be able to automate repetitive tasks (like [this team bonding Slack bot built by one of our business interns](https://blog.replit.com/slackbot))\n- You should be able to express yourself with [apps](https://replit.com/apps) or [art](https://www.freecodecamp.org/news/an-introduction-to-generative-art-what-it-is-and-how-you-make-it-b0b363b50a70/) or whatever inspires your creativity and curiosity","metadata":{"id":433}}],["434",{"pageContent":"- And you should be able share your creations with the people you love (like [this holiday card](https://pirklefamilyholiday2020.com/) from one of our [business admins](https://blog.replit.com/anyone-can-code-week1))\n\nOf course some will go beyond those basics, become software engineers, and build [even](https://blog.replit.com/replit-compute) [more](https://runyourown.social/) [amazing](http://robotandproud.com/) [things](https://esoteric.codes/)!\n\nComputers, particularly hackable computers, can be liberating and empowering for people of all skill levels. (Of course, I mean `hackable` in the sense of controllable and modifiable, not in the sense of vulnerable to security breaches. It's time we reclaimed that word.) \n\nComputers also don't care about who you are or how prestigious your background is. Anyone can build something great, bring positive change to the world, and get wealthy by creating economic value for others. This is why we should make computers easier to use, accessible, and available to everyone. More programming education = more justice.\n\nAnd we all just learn better with immediate, non-judgmental feedback. Computers make this possible at scale. Early [\"teaching machines\" and educational computer systems](https://www.nature.com/articles/d41586-017-07220-w) were built on this principle, and it continues to influence modern pedagogical techniques, like [PRIMM](https://blogs.kcl.ac.uk/cser/2017/09/01/primm-a-structured-approach-to-teaching-programming/) and [POGIL](https://www.pogil.org/about-pogil/what-is-pogil).\n\nSo saying programming is an \"essential fluency\" feels... well, pretty uncontroversial (at least not to us).","metadata":{"id":434}}],["435",{"pageContent":"So saying programming is an \"essential fluency\" feels... well, pretty uncontroversial (at least not to us). \n\nAnd universal programming education seems inevitable. Global internet penetration [continues to grow](https://www.bondcap.com/report/itr19/#view/7) ([Starlink](https://www.starlink.com/) will accelerate this), and anyone with internet access can [learn to code](https://docs.replit.com/tutorials/00-overview) or [plumb the depths of human knowledge in any subject](https://en.wikipedia.org/wiki/Main_Page), entirely for free.\n\nIn 1997, [Alan Kay](https://en.wikipedia.org/wiki/Alan_Kay) said [the computer revolution hasn't happened yet](https://catonmat.net/videos/the-computer-revolution-hasnt-happened-yet). He was talking about the changes that would come from advances in computer science. Since then programming languages have gotten more expressive, computers have gotten more powerful, more people are programming, [more businesses are software businesses](https://a16z.com/2011/08/20/why-software-is-eating-the-world/), and more schools are teaching computer science. But we're still not there yet. We're just getting started.\n\nSo perhaps a more insightful question would be: **\"Why won't everyone be able to program *sooner*?\"**\n\nI can only share my own experience, but I think it's telling. I'm not an engineer, I'm a business ~~cat~~ person. I studied economics in college. But I fell in love with computers as a kid. And my early experiences have totally shaped the way I view and understand the world.","metadata":{"id":435}}],["436",{"pageContent":"I joined the C++ club in 7th grade (in the early 2000's) and mostly made simple programs that beeped at you at high pitch. Then in high school, I took every CS class my school offered (I was lucky to go to a well-resourced magnet school) and spent a summer creating a (sloppily coded) game. But I gave up when it came time to publish the game on our school's game website. It was too hard. I ended up getting a friend to do it for me. [Publishing it on Replit](https://replit.com/@PatrickAtReplit/Ant-Killer-Game?v=1), on the other hand, was too easy. Sharing your work is essential and still unreasonably hard. Even Github + Digital Ocean is too much for beginners, not to mention more complicated stacks...\n\nWhen I took [AP Computer Science](https://apstudents.collegeboard.org/courses/ap-computer-science-a), we were still handwriting code on paper for the exam. (By the way, they're still doing that today.) One teacher even told us that her students usually test their code on Replit before handwriting it and that she has to explain to them that this is cheating. Insane! Not only is the course content not teaching students how to do any of the \"basics\" I listed above, it's teaching them habits that will make it harder for them to work and collaborate effectively later. It's no surprise that this teacher also told us that even her most promising students start to lose that spark in their eyes when they take AP CS.\n\nThen after some early internships where I wrote VBA scripts to automate Excel spreadsheets and Powerpoint presentations, I didn't code for many many years. But last spring when I joined Replit, I started relearning how to program.","metadata":{"id":436}}],["437",{"pageContent":"A couple weeks ago, I wanted to add a new text-only page to the Replit website and figured I'd take a shot at it myself. Writing the new code was easy, but the non-programming parts of software engineering were not. I spent over an hour updating my local dev environment, decipering error messages about incorrect package versions, and struggling with the proper git commands (in the proper order). And that was with a ton of help from one of our [(very generous) engineers](https://repldex.com/entry/Sergei). Luckily I'd already installed the necessary programming languages, picked a text editor, and had the right permissions on Github for a prior project. This would have been pretty much impossible if I were a total beginner...\n\nAnd then last week, at one of the largest education technology conferences in the world, there was surprisingly little focus on teaching programming. After all, it's programming education that will empower the next generation of entreprenuers, educators, and policy makers to transform education with dazzling new innovations that they will bring to this conference in the coming years. And it's programming education that will help distribute the gains of the digital economy more equitably, provided we continue our efforts [to expand access to quality education](https://blog.replit.com/respect).","metadata":{"id":437}}],["438",{"pageContent":"So to answer this new question, why not sooner? **Programming is still too hard.** It's still too mysterious. It's too individual and isolated. It takes far too long before you can have something you'll proudly share with others. Too many schools [still don't offer computer science classes](https://code.org/promote). And there are far too many in the coding world who cling desperately to the old ways, bullying and intimidating beginners and outsiders (something that dates back to [the batch-processing IBM \"priesthood\" in the 1950's and 60's](https://www.wired.com/2014/11/the-tech-model-railroad-club/) and [continues on popular communities like Stack Overflow](https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/) today).\n\nWhat if, instead, things were different? What if coding was realtime and multiplayer? What if you could easily check the source code for a cool app? And remix it? What if you could instantly share your creations with friends, family, the whole internet? And what if the community was friendly and welcoming?\n\nThat's what we're working on at Replit. And we're not the only ones.\n\nWe're joined by big companies and small startups. Businesses building better dev tools, low-code tools, no-code tools. Computer scientists inventing new abstractions and better ways to program. K-12 teachers and college professors, including many who are learning as they teach. Bootcamps. Professional engineers who are blogging, mentoring younger colleagues, [volunteering in schools](https://www.microsoft.com/en-us/teals), [becoming teachers themselves](http://derrickmcmillen.com/). And all the helfpul online communities (Replit's [Discord](https://repl.it/discord) and [Teacher Community](https://community.replit.com/), [HN](https://news.ycombinator.com/news), [r/learnprogramming](https://www.reddit.com/r/learnprogramming/), [Lobsters](https://lobste.rs/), etc., etc.).","metadata":{"id":438}}],["439",{"pageContent":"Now I'm not a naive utopian, but I am an optimist. I believe this will be a better future, and that [big things](https://www.52-insights.com/interview-politics-enlightenment-steven-pinker-why-our-world-is-getting-better/) and [little things](https://www.gwern.net/Improvements) are getting better all the time.\n\nWe're all doing our utmost to pull the future into the now. And we're helping people fight our natural tendency to dismiss, distrust, or even fear things we don't understand. Programming can be approachable. It can be easy. It can be fun.\n\nAnd it will happen. **Programming will become an essential modern fluency.** And until we get there, we'll keep hacking away[.](https://replit.com/mark)\n\nThank you for being on this mission with us. As always, [happy coding](https://repl.new/)!","metadata":{"id":439}}],["440",{"pageContent":"---\ntitle: Replit Case Study - Creating a 700+ User Web App in a Month\nauthor: Rishabh Anand\ndate: 2021-03-23T00:00:00.000Z\ncover: https://blog.replit.com/images/fast-dev.png\ncategories: projects\n--- \n\nHey there 👋🏻\nMy name is [Rishabh Anand](https://twitter.com/rishabh16_) and I am an ex-resident at the National University of Singapore's (NUS) [Raffles Hall of residence](https://nus.edu.sg/osa/raffleshall). It's one of the on-campus student accommodations that houses students from all levels of undergraduate education at NUS with the majority being freshmen and sophomores.\n\n[RHDEVS](https://www.linkedin.com/company/rhdevs/) – the software development club at Raffles – was tasked by upper management to build a convenience app for the Hall’s student body. The app itself was nothing new; it has some basic features students would potentially use in their daily hall lives:\n\n- Laundry\n- Facilities Booking for clubs\n- Events Booking / Management\n- Calendar and Timetable Planner\n- Crowd Tracking and Analysis (COVID-19 measures)\n\nHere’s the catch: we only had a month and half from design, to implementation, to testing, before deployment and marketing. Like any startup, you’d expect us to start building MVPs for <5 users (i.e., the loyal few) and scale up from there, constantly iterating and shipping, asking for feedback, and growing organically.\n\nWell, not here. We had to build for over 700 students from scratch.\n\nHere’s how Replit saved my team during “hell month”.\n\n## Serving and Deploying\n\nI was the Backend Lead supervising a team of 13 student-developers who had little to no experience with server development and deployment. Every day came with a new set of learnings on what to do and what not to do.\n\nFortunately, the more experienced ones (minority) chipped in to teach the beginners (majority) how to write good server code. Soon, the semi-confident team split into groups, each focusing on different features with weekly deliverables and stand-ups in this one-month code sprint.","metadata":{"id":440}}],["441",{"pageContent":"Backend is tricky business. All the infrastructure and apps the club builds rely on the backend’s services and stability. At our scale, without backups or custom on-premise hardware, a single crash would likely throw all the other services into limbo. Owing to budget issues, we did not have access to crash analytics either.\n\nOur first one and half weeks were spent planning excessively. We charted schematics, drew ER diagrams, class diagrams, and more. We had to nail it in our first try or risk delaying the official launch window. The next few weeks were solely for development. There was no looking back.\n\nThe design team regularly sent us wireframes based on user feedback and we had to tweak our plans here and there.\n\n## Where Replit Really Shines\n\n### Faster Prototyping\n\nIn some way or the other, Replit definitely sped up our iteration cycles. From a motley crew that was once clueless on building servers, we became rapid-action deployers. The [tutorials](https://docs.replit.com/repls/http-servers) and [forums](https://replit.com/talk/all) saved us from a lot of Googling and Stack Overflow-ing.\n\nDeploying on Replit allowed us to focus our energy on writing stable backend code. In fact, it gave us time to set a standard for writing code. We came up with a contribution and programming style guide – a luxury we wouldn’t have been able to afford if we spent our time fiddling around with complex server hosting platforms instead. It really set us up for future projects!\n\n### Ease of Deployment\n\nThe team comprised of students who were well-versed in basic Python, but had never built any large-scale projects. \n\nClicking the “Run” button in the IDE was enough to trigger a deployment, and this was a blessing for most of the beginner students. This meant we no longer had to worry about Procfiles, configurations, requirements, and virtual machine types.","metadata":{"id":441}}],["442",{"pageContent":"For the unaware, most Python server hosting services require a user-submitted requirements.txt file with the packages and their right versions (the VM would then install them when deployed). Personally, the biggest “flex” Replit has over the other cloud providers is the automatic requirements.txt and config files generation; all we had to do is write our code and the IDE takes care of the rest.\n\nAn added bonus was the ability to add a .env file with our database keys and administrative credentials without worrying about intrusion or hacking.\n\nUltimately, we had around 4 dedicated servers taking care of different tasks. No doubt, one of the smoothest deployment procedures I’ve come across!\n\n### Importing from GitHub\n\nOur codebase is largely maintained on GitHub. Importing projects and collaborating on them with teammates was fun! We no longer had to huddle around someone’s laptop to see changes being made to the document. \n\nIt’s like coding on Google Docs together; definitely gamified the experience :D\n\n### Low Costs\n\nWe’re broke college students, remember? Our budget mainly went into frontend development, design, and miscellaneous administrative activities (like buying redbull and snacks for our sprints). \n\nThe other guys (GCP, AWS, Heroku, DigitalOcean) were definitely out of our budget and expertise if we looked at the long term. The app would be used by a large percentage of the student body simultaneously in a day and naturally, these server costs would balloon up. We were not prepared for that just yet.\n\nPerhaps, the most important benefit of using Replit was the inexpensive Hacker plan we were on. \n\nICYMI: It’s free for students!\n\n### Active Servers and Minimal Downtime\n\nI mentioned above that many students would be using the app at any given time. Though, during non-peak hours (like those pesky late-night study sessions), there may be pockets of time where user activity is effectively zero.","metadata":{"id":442}}],["443",{"pageContent":"Replit servers are designed to wake up automatically after periods of inactivity. My team was fortunate in that we did not have to build a heartbeat server to wake up dead servers, i.e., an additional manhour-intensive task we had no time for. It’s all taken care of under the hood.\n\n## The Present\n\nIt seems like I’m overexaggerating certain things here. I assure you, I’m not. Replit was definitely a lifesaver when it came to creating servers without worrying about a lot of technical issues. For a fairly novice team, this was the best option we had. I’d definitely recommend starting out projects (like organisation intranets, game servers, application portals, and more) with Replit regardless of the team’s experience. \n\nIt enabled fast prototyping, minimal but fruitful testing, faster deployments, and got us to launch faster than we had imagined. It has all the backend infrastructure services you need on a silver platter. For the skilled many out there, Replit offers support for practically every language out there!\n\nHere’s a crusty screenshot of a COVID-19 rules-compliant call with the team:\n\n![team screenshot](https://blog.replit.com/images/fast-dev.png)\n\nTill date, RHDEVS is actively maintaining the app and is still using Replit as our backend. There are no plans of switching to the other guys anytime soon so lots more to explore, for sure!\n\nWant to banter about Replit or tech in general? Slide into my DMs on [Twitter](https://twitter.com/rishabh16_)!","metadata":{"id":443}}],["444",{"pageContent":"---\ntitle: How to use Firebase for a website with Replit\nauthor: Yev Barkalov\ndate: 2018-07-26T00:55:39.000Z\ncategories: projects\n---\n\nToday we're going to learn how to use Firebase as a database for a simple website using JavaScript!\n\nRight now, this is what my fantastic website looks like\n\n> ![This is my fantastic website!](/public/images/blog/firebase/fantastic_website.png)\n\nWhat I want to do is include a guestbook, a way for people who visit the site to leave a wonderful message for those who follow in their steps. So, in the end, I should have a website that looks something like this.\n\n> ![website with textbox](/public/images/blog/firebase/fantastic_final.png)\n\nI don't have any CSS in my website but that's only so the implemented feature is blatantly obvious.\n\nThe first thing you'll need for this is a website and a url you can access it with. I'll be using my fantastic website which you can fork [here](https://repl.it/@yevbar/My-Fantastic-Website). Once you have those two things, continue along to the following steps!\n\nWe need to first set up Firebase before we can use it in our website so let's go and do that. If you're interested in learning a bit more about Firebase, check out their website at [firebase.google.com](https://firebase.google.com/).\n\nOnce you're ready, go over to [console.firebase.google.com](https://console.firebase.google.com/). If you're not already logged into a Google account, it'll prompt you to do so.\n\nAs soon as you're logged in, you'll be greeted with your Firebase Console\n\n![Firebase website](/public/images/blog/firebase/console.png)\n\nGo ahead and \"Add Project\" then put whatever you like for the name of your application\n\n![project on firebase](/public/images/blog/firebase/i_love_replit.png)\n\nSelect \"Create Project\" and after a few seconds you'll see the dashboard for the app you just created\n\n![firebase dashboard](/public/images/blog/firebase/dashboard.png)","metadata":{"id":444}}],["445",{"pageContent":"Select \"Create Project\" and after a few seconds you'll see the dashboard for the app you just created\n\n![firebase dashboard](/public/images/blog/firebase/dashboard.png)\n\nAt this point, we have an application but it's not fully configured yet so let's change that. Under **Develop**, select **Authentication**\n\n![firebase authentication](/public/images/blog/firebase/authentication.png)\n\nNext, go to the **Sign-In method** tab\n\n![firebase signin](/public/images/blog/firebase/signin_method.png)\n\nScroll down to the section with **Authorized domains** and add the url for the hosted repl\n\n![firebase domain](/public/images/blog/firebase/domain.png)\n\nThe last thing we need to do to configure our database is actually set the permissions for an app to access/write our database. To do that, go over to **Database**\n\n![firebase database](/public/images/blog/firebase/database.png)\n\nScroll down to **Realtime Database** and \"Create database\"\n\n![firebase realtime](/public/images/blog/firebase/realtime.png)\n\nIt doesn't really matter what rules you initialize with since we'll be setting those next. As soon as you create your database, you'll see a dashboard for that database. Click on \"Rules\" and, if needed, modify the JSON so that it's the following\n\n```javascript\n{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n```\n\nWhat this means is that any user or app that is under the authorized domains can both read and modify our database. In my case with reviews on my website, I don't really mind, however, if you're making a website or project where security of information is important then do manage permissions accordingly. If you're looking to access the database from a server or such, check out how to [add the Firebase Admin SDK to your server](https://firebase.google.com/docs/admin/setup) so that you can properly configure the rules for your app.\n\nWith that, we're ready to start using Firebase!","metadata":{"id":445}}],["446",{"pageContent":"With that, we're ready to start using Firebase!\n\nThe first thing we'll need to put in our website are some dependencies. I'll be using JQuery to dynamically add comments as well as two Firebase libraries where one's to connect to Firebase and the other is to utilize the realtime database. Be sure to put these before any of your `<script>` elements\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n<script src=\"https://www.gstatic.com/firebasejs/5.3.0/firebase-app.js\"></script>\n<script src=\"https://www.gstatic.com/firebasejs/5.3.0/firebase-database.js\"></script>\n```\nAt the end of my `<body>` I put a `div` with the id \"comments\" and this is where my comments will go\n\n```html\n<body>\n  <!-- Some other HTML... -->\n  <div id=\"comments\">\n  </div>\n</body>\n```\n\nThat's it for the HTML, now we can get working in our JavaScript file.\n\nFirst, we'll put in our JQuery `ready` function so that the code only executes when the browser is ready\n\n```javascript\n$(document).ready(function() {\n   // This is where our code will go\n});\n```\n\nWe've already configured the database but we need to actually initialize a database connection in our JavaScript so go back to the dashboard for your application and select **Add Firebase to your web app** so that you're prompted with a code snippet\n\n![firebase code snippet](/public/images/blog/firebase/add.png)\n\nCopy the JavaScript that's between the `script` tags and paste it into your `ready` function so it looks something like this\n\n```javascript\n$(document).ready(function() {\n  // Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyDz8OrTtNBOZY2HliZ2-cmsPX8wi-4rGAQ\",\n    authDomain: \"i-love-replit.firebaseapp.com\",\n    databaseURL: \"https://i-love-replit.firebaseio.com\",\n    projectId: \"i-love-replit\",\n    storageBucket: \"i-love-replit.appspot.com\",\n    messagingSenderId: \"214072077152\"\n  };\n  firebase.initializeApp(config);\n});\n```\n\nThis just connects to Firebase, we'll want to connect to the Realtime Database and we can do so with the following\n\n```javascript","metadata":{"id":446}}],["447",{"pageContent":"};\n  firebase.initializeApp(config);\n});\n```\n\nThis just connects to Firebase, we'll want to connect to the Realtime Database and we can do so with the following\n\n```javascript\nlet guestBook = firebase.database().ref();\n```\n\nWith the `guestBook` object, we can utilize the power of the realtime database (moohoohaha)\n\nThe first method I'm going to define is a `signGuestbook` method so, whenever I have a name and comment for a review, I can append it on swiftly\n\n```javascript\nfunction signGuestbook(name, comment) {\n  $(\"#comments\").append(\"<p><b>\" + name + \"</b><br/>\" + comment + \"</p>\");\n}\n```\n\nWith that method defined, we're ready to receive objects in the database so let's create a listener for that\n\n```javascript\nguestBook.on('child_added', function(guest) {\n  // Code goes here\n});\n```\n\nThe way we can access the `guest`'s data is by calling its `val()` function and, using our `signGuestbook` method, we can add reviews as we receive them\n\n```javascript\nguestBook.on('child_added', function(guest) {\n  if (guest.val().name && guest.val().comment) {\n      signGuestbook(guest.val().name,guest.val().comment);\n  }\n});\n```\n\nThe reason for checking that the `name` and `comment` are truthy is so that our comment appending doesn't break.\n\nSo now that we're ready to receive guests and reviews, let's introduce a way to create them in the first place. To do that, I made a simple HTML form\n\n```html\n<form id=\"guestbook\">\n      <span>Name:</span>\n      <br/>\n      <input type=\"text\" id=\"name\">\n      <br/>\n      <span>Comment:</span>\n      <br/>\n      <input type=\"text\" id=\"comment\">\n      <br/>\n      <button type=\"submit\">Submit</button>\n</form>\n```\n\nTo keep the page from reloading when I \"submit\", I use JQuery\n\n```javascript\n$('#guestbook').submit(function(event) {\n    event.preventDefault();\n});\n```\n\nWhen I submit my form, that means I'm adding a review so let's add the given values to our database\n\n```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({","metadata":{"id":447}}],["448",{"pageContent":"```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({\n    name: $('#name').val(),\n    comment: $('#comment').val(),\n  });\n});\n```\n\nThe reason we only add the review to Firebase and not call `signGuestbook` is because, when we add the review, it triggers the `child_added` listener so it gets appended from that.\n\nFor the sake of keeping things clean, I'm going to clear the input elements and reset the focus\n\n```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({\n    name: $('#name').val(),\n    comment: $('#comment').val(),\n  });\n\n  $('#name').val('');\n  $('#comment').val('');\n  $('#name').focus();\n});\n```\n\nGo ahead and start adding your comments and you'll see your guestbook come to life! If you reload the tab or open in another browser, after a few seconds, you'll see all the previous reviews get appended even though we never made an explicit call to get old data!\n\nThe reason for that is, when we initialize our `guestBook` with the realtime database, it syncs up old data so that it's in the same state as it is on Firebase which makes thing convinient on our end.\n\nThe last topic to cover is a massive security flaw on our website called XSS. You can learn a lot from the [OWASP page](https://www.owasp.org/index.php/XSS) but it's an attack where user generated code gets executed on another client's app.\n\nAs an example for something you can do right now, put the following as either a name or comment\n\n```html\n<script>alert(1);</script>\n```\n\nWhat this does is alert the browser which, albeit, is just annoying. However, I can run any javascript here which means I can do a lot more than just annoy you.\n\nHow do we solve this? The only thing we really need to do is HTML escape some characters and we can do that with JQuery\n\n```javascript\nfunction signGuestbook(name, comment) {\n  const review = document.createElement('p');\n  review.textContent = comment;","metadata":{"id":448}}],["449",{"pageContent":"```javascript\nfunction signGuestbook(name, comment) {\n  const review = document.createElement('p');\n  review.textContent = comment;\n\n  const name = document.createElement('p');\n  const bold = document.createElement('b');\n  bold.textContent = name;\n  name.appendChild(bold);\n\n  document.getElementById('comments').appendChild(name);\n  document.getElementById('comments').appendChild(review);\n}\n```\n\nAnd, with that, you have a functioning guestbook on your website!\n\nIf you have any questions or just want to say hi, feel free to shoot me an email at [yev@repl.it](mailto:yev@repl.it) and till next time!","metadata":{"id":449}}],["450",{"pageContent":"---\ntitle: Repl.it IRL\nauthor: Yev Barkalov\ndate: 2018-06-13T03:19:49.000Z\ncategories: events\n---\n\nOn Monday, June 11th, we had our first Repl.it Meetup and it was super awesome!\n\n![replit meetup](/public/images/blog/replit-irl-6-11-18/talking.jpg?p=np)\n\nA bunch of Replers from teachers to students came to the Repl.it office to enjoy pizza, meet the team, chat with other Replers, and also spend some time coding in a mini hackathon where the prompt was to make the most overcomplicated \"Hello World\" program possible.\n\n![coding at replit meetup](/public/images/blog/replit-irl-6-11-18/laptops.jpg?p=np)\n\nOne of the coolest projects made at the meetup was a program that would take a font, generate a separate Python+Turtle program that would draw the text \"Hello World\" in that specified font, and then he presented the resulting Python program as being the elaborate \"Hello World\" program.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@DavidLindes/hello-replit?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nThe code for generating the \"Hello World\" program itself is [here](https://repl.it/@DavidLindes/repl-irl-gen-hello) and, if you're interested in seeing the other projects made, they were collected via commenting on our [I Built This post](https://repl.it/ibuiltthis/repls/Replit-IRL/44944).\n\nWe certainly enjoyed meeting some of our users as well as seeing everyone have a fun time hacking and we're planning for the next Repl.it IRL to be on July 11th!\n\n![replit meetup laughing](/public/images/blog/replit-irl-6-11-18/laughing.jpg?p=np)\n\nIf you're interested in putting together your own Repl.it IRL, shoot us an email at [contact@repl.it](mailto:contact@repl.it) and that's all for now!","metadata":{"id":450}}],["451",{"pageContent":"---\ntitle: How To Build a Website with Replit\nauthor: Yev Barkalov\ndate: 2018-06-14T03:32:26.000Z\ncategories: projects\n---\n\nWhile you can write web applications and text-based ensembles in Repl.it, sometimes it's nice to be able to just put together a simple HTML/CSS website using the same awesome editor!\n\n# Making your first website tutorial!\n\nThis is a guide for making your very first website using HTML and CSS and, if you follow the tutorial, you should end up with something that looks like this:\n\n![first website tutorial](/public/images/blog/website_workshop/final.png)\n\nThough, to succeed with this tutorial, your final website should *not* look like that. To succeed at this tutorial, you should branch off and get creative with the code you write because you won't be just making just _a_ website but _your_ website!\n\nThe first thing we're going to do is go to [https://repl.it](https://repl.it) and, where it says \"Search for a Language\", start typing \"HTML\" then select the `HTML, CSS, JS` option that comes up.\n\n![html repl selection](/public/images/blog/website_workshop/html_repl.gif)\n\nIf you have another screen come up (where your url ends with `/repls`, `/teacher`, or `/student`), you can head over to https://repl.it/languages and select the `HTML, CSS, JS` option that way.\n\nNow that the environment's loaded, it should look something like this:\n\n![html repl](/public/images/blog/website_workshop/editor.png)\n\nIf you press the run button right now with the code inside the editor, you won't see much because, well, there isn't much to display. However we can change that!\n\nIn the area that starts with `<!DOCTYPE html>`, select all the text and delete it. In the blank space, put the following code in\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n```\n\nNow when you press \"Run\", you should see the following come out.","metadata":{"id":451}}],["452",{"pageContent":"```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n```\n\nNow when you press \"Run\", you should see the following come out.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop1?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nOr, if you want to view the website in a separate tab, just click on the preview button!\n\n![website workshop preview](/public/images/blog/website_workshop/preview.gif)\n\nYou've successfully put together a \"Hello World!\" program in HTML! (Out of tradition, people start learning a new language by first learning how to say \"Hello World!\")\n\nLet's figure out what's going on in this program before we add more ~~bugs~~ features.\n\nThe very first line\n```html\n<!DOCTYPE html>\n```\n tells the browser that we want to display an html file, which it gladly does.\n\nThe following lines consist of words inside angle brackets that are called \"tags\" and are often grouped in pairs like\n```html\n<html></html>\n```\n where the first tag is referred to as the \"opening tag\" and the second is referred to as the \"closing tag\" (an element without the opening/closing pair is then a \"self-closing tag\").\n\nThe set up we have with indents and opening and closing tags is not something I came up with randomly, if you inspect the element of the page (or right click and \"View page source\"), you should see a similar structure to this\n\n![inspecting code](/public/images/blog/website_workshop/inspect.png)\n\nGetting back the code we have, at the top, we have a `<head>` tag, which you can think of as being the head of the website but we don't usually see things in here but, instead, in the `<body>` tag, which has all the juicy stuff.","metadata":{"id":452}}],["453",{"pageContent":"Inside our `<body>` element, we have an `<h1>` tag, which displays text. The `1` in the tag refers to the size, see what happens when you change the \"1\" to other numbers like \"2\" or \"3\". Which numbers work? Which numbers don't work? There are plenty of elements and tags that can display text so, to mix things up, let's try the `<p>` tag out!\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>I love coding!\n      I also love tiny plastic hands!</p>\n  </body>\n</html>  \n```\n\nOnce that's in, press \"Run\" and then:\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop2?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nAs you can see, simply pressing enter or line break doesn't separate the two lines so, to fix that, let's put the two lines into their own `<p>`, or paragraph, tags so that your code looks like the following.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>I love coding!</p>\n    <p>I also love tiny plastic hands!</p>\n  </body>\n</html>\n```\n\nLet's run to make sure that the two lines are separated this time...\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop3?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nThe reason we had to do that is because HTML does not change the spacing on content on the page, regardless of how many extra spaces or newlines there are.\n\nNow that we've got text rolling, let's add in some images!\n\nFirst thing you want to do is find an image that you want to put into your website. Feel free to use Google Images, Facebook, or some other site but, when you find the desired image, right click on it and select \"**Copy Image Address**\".","metadata":{"id":453}}],["454",{"pageContent":"Images are inserted into webpages by using the image tag, or `<img>`. This element has an attribute or inner field called \"src\" that tells the browser where to find the image. Since we're using images from the internet with some url, what that will look like is (using the actual url instead of just the text `url`)\n\n```html\n<img src=\"url\"/>\n```\n\nAs you can see, there's no `</img>` tag and I put a slash before the second angle bracket, so this is a self closing tag. The image tag is a self-closing tag because it does not actually store any content besides, with the `src` attribute, we wouldn't have anything to put inside the opening/closing tags so we're good the way it is.\n\nThe quotes are important because the url isn't actually important to the structure of the website, it's only a specific thing about the image element. For this, I want to use the beautiful face of the Zucc, which I've stored at the url https://repl.it/public/images/blog/website_workshop/zucc.png. So, with that image, my image tag will look like\n\n```html\n<img src=\"https://repl.it/public/images/blog/website_workshop/zucc.png\"/>\n```\n\nOnce you have your image tag set, put it right in before the `<h1>` tag so that you get the following result.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop4?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nWell done, you've just used HTML in order to make a fantastic website!\n\nHowever, don't you wish it had just a bit of help looking presentable?\n\nThankfully, there is CSS, which is short of Cascading Style Sheets. CSS is a language that allows you to style the tags and elements in the webpage.\n\nWhen we were using HTML to make the website, we were using it to introduce structure and content whereas the CSS will allow us to introduce visuals and design for a more complete website.","metadata":{"id":454}}],["455",{"pageContent":"When we were using HTML to make the website, we were using it to introduce structure and content whereas the CSS will allow us to introduce visuals and design for a more complete website.\n\nWhat's nice is that we already have an \"index.css\" file as you can see in the file tree on the left but, if we were to put styling in there right now, nothing would change because we haven't told the browser to look at that file.\n\nTo include a CSS file, we'll need to link to it with a, you guessed it, `<link>` tag. We will be needing two attributes in this tag to include the CSS file.\n\n```html\n<link rel=\"stylesheet\" href=\"index.css\"/>\n```\n\nThe \"rel\" attribute tells the browser what the importance of this file is relative to the html which, in this case, is a stylesheet and then the \"href\" attribute tells the browser where to look for the stylesheet, which is at `index.css`.\n\nAs said before, the `<body>` element has all the juicy content but the `<head>` element is where the metadata goes, which is data that refers to other data. In this case, we're putting in CSS, which is refers to the content inside the body. And. so, we put the link tag inside the head like so\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"index.css\"/>\n  </head>\n  <body>\n    <img src=\"https://repl.it/public/images/blog/website_workshop/zucc.png\"/>\n    <h1>Hello World!</h1>\n    <p>I love coding!</p>\n    <p>I also love tiny plastic hands!</p>\n  </body>\n</html>\n```\n\nNow that the link tag is there, we can start putting things into our styles.css file!\n\nThe way css works is by statements comprised of *selector*, *property*, and *value* in the following format\n\n```css\nselector {\n  property: value;\n}\n```\n\nThe selector refers to the element or type of element you're looking to modify and then the property is the specific property of the desired element and the value is the value you're setting that property to.","metadata":{"id":455}}],["456",{"pageContent":"The first thing I'm going to do is change the background to be a different color. This will mean I'm taking the `body` element and modifying the `background-color` property to the value `grey` so, following that intuition, we get\n\n```css\nbody {\n  background-color: grey;\n}\n```\n\nWhen you press run, you should see the following\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop5?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nNow let's change the font of the text to something truly beautiful, Comic Sans. For this, we will be changing the \"font family\" of the elements inside the body so I'll add on the following to our CSS file.\n\n```css\nbody {\n  background-color: grey;\n  font-family: \"Comic Sans MS\", \"Comic Sans\", cursive;\n}\n```\n\nThe reason for the multiple quotes and words after the colon is because different browsers actually behave differently from each other so, by adding commas, we assure that this code will be sufficient. When run, it looks, without a doubt, gorgeous.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop6?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nOne thing that's stuck out the entire time is that the text was the color black. Let's change the color of the \"Hello World!\" to something more lively, like perhaps green. We know that the text is an `<h1>` tag so we can target that and then style it's \"color\".\n\n```css\nh1 {\n  color: green;\n}\n```","metadata":{"id":456}}],["457",{"pageContent":"```css\nh1 {\n  color: green;\n}\n```\n\nBy selecting only the `<h1>` tag, you only apply whatever styles you wish to it so, if you wanted to, you could apply a \"color\" style to the `<p>` tag as well. The last thing I want to do before finishing this project is align everything in the center so that it stands out more properly. The style we're looking for is the \"text align\" style and, so, we get the following\n\n```css\nbody {\n  background-color: grey;\n  font-family: \"Comic Sans MS\", \"Comic Sans\", cursive;\n  text-align: center;\n}\n```\n\nRunning our webpage we now have\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop7?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nHowever, if you followed the instructions in the very beginning you would have not made the exact same website as me but, rest assured, these are not the only things you can do with HTML and CSS and, as a matter of fact, this is now the point where you take your webpage to new levels and add in whatever it is you like! The internet is your friend and resource for the rest of this journey. If you are looking for sites for inspiration, here are a few:\n\n- [Eel Slap](http://eelslap.com)\n- [Alice Lee](http://byalicelee.com)\n- [Yaron Schoen](http://yaronschoen.com)\n- [Roxanne Ravago](http://www.roxanneravago.com)\n- [Pushkar Modi](http://pushkarmodi.com)","metadata":{"id":457}}],["458",{"pageContent":"---\ntitle: \"It's Genuary!\"\nauthor: \"Ornella Altunyan\"\ndate: 2023-01-26\ncover: https://blog.replit.com/images/genuary/cover.jpg\ncategories: events\nprofiles: ornella,tyler,ink\n---\n![images/genuary.png](https://blog.replit.com/images/genuary/cover.jpg)\n\nYou may have thought that we're in the month of January, but we're actually in the month of [**Genuary**](https://genuary.art/)! Genuary \"is an artificially generated month of time where we build code that makes beautiful things.\" \n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://genuary.art/\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Visit the Official Genuary Website</a>\n</div>\n\nIf you've been a part of the Replit community for a little while, you may remember [Replit Creates](https://creates.replit.com), our very own month-long celebration of creative coding that happened in August. We don't think making beautiful things should be confined to one month, so we've decided to host a celebration of Genuary on Replit. \n\nOn the official [Genuary website](https://genuary.art/), there are [prompts](https://genuary.art/prompts) for each day of the month, so we're also celebrating on Replit! Our Replit staff have made it even easier for you to participate by creating templates for some of the prompts, which you can find below.","metadata":{"id":458}}],["459",{"pageContent":"We'll also be hosting a Genuary Celebration on January 31st with special guest [Saber Khan](https://www.edsaber.info/) from the [Processing Foundation](https://processingfoundation.org/)! Saber, along with Tyler and Ian from the Replit staff, will work through a Genuary prompt together and share other projects from the month-long challenge. Join us [live](https://www.youtube.com/watch?v=XZHgsFENK78) or watch on-demand anytime on our [YouTube channel](https://www.youtube.com/@replit). \n\n## Resources\n* [Generative Poetry](https://replit.com/@tyler/Genuary-Generative-Poetry?v=1)\n* [Maximalism](https://replit.com/@tyler/Genuary-Maximalism?v=1)\n* [My kid could have made that](https://replit.com/@tyler/Genuary-My-Kid-Could-Have-Made-That?v=1)\n* [More Moiré](https://replit.com/@ink/More-Moire?v=1)\n* [Sine Waves](https://replit.com/@ink/Sine-Waves?v=1)\n* [Definitely not a grid](https://replit.com/@ink/Definitely-not-a-grid?v=1)","metadata":{"id":459}}],["460",{"pageContent":"---\ntitle: What We Look for When We Interview\nauthor: Laima Tazmin\ndate: 2022-02-03T00:00:00.000Z\ncover: https://blog.replit.com/images/team/7-reasons.jpeg\ncategories: \n---\n\nWe’re on a mission to bring the next billion software creators online.\n\nIn 2022, to get there, we're focusing on:\n* Making Replit run fast on popular devices across the globe.\n* Helping new coders build and ship for their first time.\n\nReaching those goals requires infrastructure work and real-world experimentation, so we are growing our team!\n\n![example of the repl resource component in action](https://blog.replit.com/images/team/offsite.jpeg)\n\nIf you’re thinking of applying (or re-applying!), you might feel intimidated or nervous about our interview process. No process is perfect, but ultimately we're looking for the kinds of people who will succeed here: those with high autonomy, pragmatism, strong communication and empathy for our users.\n\nNo matter the role, here are three things you can do to stand out in interviews:\n\n### 1. Act like an owner\n\nWe keep our process minimal and ship often because everyone at Replit drives their projects to completion and owns their results. We want to hire driven people and then get out of their way.\n\nIn interviews, we often ask candidates to solve a real-world and true-to-Replit problem. That’s your chance to drive the discussion like you’re leading the project. Ask questions. Be proactive. Think about timing and scope, too.\n\nAt Replit, when we lean into the uncomfortable, we call it \"seeking pain\". When things seem hard or don't go your way, show us you won’t give up or retreat. Be someone who is incapable of being blocked. This includes knowing when you don’t know something, and asking for help.\n\n### 2. Present clearly\n\nWe’re a remote-first company, working across timezones. We strive to make every meeting, document, and demo deliver the message without wasting time.","metadata":{"id":460}}],["461",{"pageContent":"### 2. Present clearly\n\nWe’re a remote-first company, working across timezones. We strive to make every meeting, document, and demo deliver the message without wasting time.\n\nIn interviews, we look at how you convey your ideas, whether written or verbal. Equally, we also look at how well you listen and internalize feedback.\n\nPracticing this skill outside of interviews is a good idea. For example, I find writing things down before speaking helps me collect my thoughts and make my delivery more crisp.\n\n### 3. Have a point of view\n\nWe’re building a new kind of software creator platform. We’re inventing the playbook as we go.\n\nWe want you to have opinions of how to make the product better and users happier. We are building Replit for everyone around the world who wants to build, and we need diverse perspectives. Don’t shy away from thinking radically or differently, but make sure you explain your thought process.\n\nA great way to develop this point of view is simply by building on Replit and being part of the community. You can find us on [Twitter](https://twitter.com/Replit), [Discord](https://discord.util.repl.co/join), or build and share on [Replit Community](https://replit.com/community/all).\n\n## Growth\n\nAll this being said, we are not looking for perfection. We are looking for your potential for growth & leadership.\n\nAs a company, we promote growth through knowledge seeking and sharing. We have an education budget so you can take classes or purchase learning materials. We have book clubs. We have special guest talks. We also have fun weekly information sharing & hacking presentations, where a teammate shares something they know or get excited about to the rest of the company. We also promote growth by empowering you to lead big projects.\n\nWe bring people in and then invest in them.\n\n## Don’t Give Up","metadata":{"id":461}}],["462",{"pageContent":"We bring people in and then invest in them.\n\n## Don’t Give Up\n\nIf you didn’t move forward in the interview this time, don’t give up. Apply again in 6-12 months! In the meantime, build on Replit and give us product feedback. When you are passionate and determined, we take that as a positive sign.","metadata":{"id":462}}],["463",{"pageContent":"---\ntitle: Getting Started with Solidity on Replit\nauthor: Osinachi Chukwujama\ndate: 02-18-2022\ncover: https://blog.replit.com/images/solidity-web3.png\ncategories: projects\n---\n\nHave you ever wanted to quickly prototype an idea, reproduce a bug, or share a code demo? Maybe you just got an idea for a new smart contract that allows users to bet on soccer teams, and you want to quickly prototype this and share it with your teammates. In all of these instances, [Replit](https://replit.com) is the perfect solution. \n\nReplit is a powerful online integrated developer environment (IDE) with a simple user interface that supports more than fifty programming languages. It also supports real-time collaboration, allowing for use cases like team member onboarding or hands-on learning for students. \n\nIt integrates seamlessly with [GitHub](https://github.com), allowing you to create repositories from a repl or load a repo from GitHub without any manual setup. Replit also gives you the power to share demos through a link that can be accessed by any device, anywhere in the world.\n\nIn this article you’ll learn how to get started with [Solidity](https://docs.soliditylang.org/en/v0.8.11/) on Replit. Solidity is a statically typed, curly-braces programming language designed for developing smart contracts that run on [Ethereum](https://ethereum.org/en/). It can also be used by other blockchains for interoperability and easier migration.\n\n\n## Getting Started with Solidity on Replit\n\nIn this section, you’ll learn how to get started with Solidity on Replit and deploy your first smart contract.\n\n### Setting Up Your Account\n\nTo get started, you need to [create a Replit account](https://replit.com/signup) or [login to your existing one](https://replit.com/login). You need an account so you can create new repls and collaborate with peers.\n\n### Creating a Solidity Repl\n\nAfter setting up your account, create a new repl. \n\nFirst, select Solidity as the template and choose a title.","metadata":{"id":463}}],["464",{"pageContent":"### Creating a Solidity Repl\n\nAfter setting up your account, create a new repl. \n\nFirst, select Solidity as the template and choose a title.\n\n![Creating a new repl](https://i.imgur.com/eJiKQbL.png)\n\nAfter initialization, you should be presented with a `README.md` file with a preview on the side. You can review the file for additional information.\n\n![Basic view](https://i.imgur.com/8nkj7Al.png)\n\nLocate and open the `contract.sol` file. The first line in the file tells you that the source code is licensed under the [MIT License](https://opensource.org/licenses/MIT). The next line, which starts with `pragma`, specifies that the source code is written for Solidity versions 0.8.2 or lower. \n\nThis line is followed by two code blocks for smart contracts that start with the `contract` keyword. The first, `SimpleStorage`, is a basic smart contract that showcases encapsulation and data write operations in Solidity. The second, `MathTest`, is a contract that performs multiplication, but you can add other mathematical operations to it as well.\n\n```sol\n//  X-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ncontract SimpleStorage {\n  uint256 storedData;\n\n  function get() public view returns (uint) {\n    return storedData;\n  }\n\n  function set(uint x) public {\n    storedData = x;\n  }\n\n  function double() public {\n    storedData *= 2;\n  }\n}\n\ncontract MathTest {\n\tfunction multiply(uint a, uint b) public pure returns (uint) {\n    return a*b;\n  }\n}\n```\n\n### Deploying Your First Smart Contract\n\nGo ahead and click the **Run** button at the top of the interface.\n\n![Repl interface before run](https://i.imgur.com/iEfLVkP.png)\n\nThe run action will compile the `contract.sol` file and prepare the contracts specified in it for deployment. It also initializes a new UI view where you can deploy individual contracts.\n\n![Result of run action](https://i.imgur.com/gyhxVz4.png)","metadata":{"id":464}}],["465",{"pageContent":"![Result of run action](https://i.imgur.com/gyhxVz4.png)\n\nDo you notice the **Connect wallet** button in the image above? A wallet is needed to interact with the smart contracts in the repl. It’s similar to a regular wallet, which stores fiat currency, debit, and credit cards. However, it differs in its digital nature.\n\nTechnically, a wallet is a public and private key pair that allows you to view, store, and send assets across a blockchain network. You can think of the public key of your wallet like your PayPal email address. Users can send money to you through PayPal if they know your PayPal email address.\n\nYour wallet's private key is the key used for signing transactions. It should never be made public or shared with friends. If your private key gets compromised, all the assets stored in your wallet can be wiped.\n\n[Decentralized applications (dApps)](https://www.investopedia.com/terms/d/decentralized-applications-dapps.asp) differ from regular apps in the way they handle user identity. A regular app may require your email and password or a Social Auth provider to identify you. However, a dApp only requires your wallet address. This address is a hashed version of your public key that makes it easier to share, and can be in the form of a string or QR code.\n\nWallets are usually hard to use on their own because you need to figure out the network you want to send the asset to, and use code to initialize and sign transactions. Luckily, an app like [MetaMask](https://metamask.io) exists to simplify the use of wallets on the Ethereum blockchain. \n\nMetaMask consists of a set of tools that provides a way to create wallets and authorize actions on a dApp. You can install it as a browser extension or mobile app, but to follow along with this article, you only need to install it as a browser extension. It’s supported on Chrome, Firefox, Brave, and Edge.\n\n![Supported browsers](https://i.imgur.com/7QQOrPp.png)","metadata":{"id":465}}],["466",{"pageContent":"![Supported browsers](https://i.imgur.com/7QQOrPp.png)\n\nAfter setting up MetaMask, proceed by clicking the **Connect wallet** button on Replit. \n\nMetaMask will prompt you to choose an account. After choosing an account and completing the setup, you need to add some Ether to the account. This will be used for deploying smart contracts on the network, which in this case is “Replit Testnet.”\n\n> The testnet can be used to test your smart contracts before they are ready to be deployed on the main Ethereum network.\n\nClick **Get 1 ETH for testing** to add 1 fake ETH. Afterwards, click the **Deploy** button. This action will deploy the `MathTest` contract to the Replit Testnet.\n\n![Deploy contract](https://i.imgur.com/AfwELlQ.png)\n\nMetaMask will prompt you to set the gas fees and confirm the contract deployment. After confirmation, the contract will be deployed on Replit Testnet and will be available for use on the UI. Go ahead and test the multiplication function with different values.\n\n![Deployed MathTest contract](https://i.imgur.com/dSb11Pk.png)\n\n### Modifying the Deployed Smart Contract\n\nTo complete the calculator, add the remaining arithmetic operation functions to the `MathTest` contract:\n\n```sol\nfunction add(uint a, uint b) public pure returns (uint) {\n    return a+b;\n}\nfunction subtract(uint a, uint b) public pure returns (uint) {\n    return a-b;\n}\nfunction divide(uint a, uint b) public pure returns (uint) {\n    return a/b;\n}\n```\n\nIf you save the file with Ctrl-S, you will notice that the UI reloads and the values are reset, but the new functions do not reflect this change. This is due to the immutable nature of smart contracts. When you make a change to a contract, you have to deploy a new contract. To fix this, click the **Deploy** button again to deploy a new version of the smart contract.","metadata":{"id":466}}],["467",{"pageContent":"After accepting MetaMask's prompt, you should notice two versions of the deployed contract with the most recent at the top. If you expand the deployed contract, you should see the other arithmetic operations.\n\n![Other arithmetic operations in smart contract](https://i.imgur.com/Fsgz2p0.png)\n\nTo get a better feel for the calculator, you can take some time to play around with different math problems.\n\n### Reading and Writing Data on a Smart Contract\n\nThe arithmetic functions in the `MathTest` smart contract are pure functions. This means they don't modify any data or read data from the contract. \n\nHowever, the `SimpleStorage` contract contains a state variable called `storedData`. This variable can be set by passing a number to the `set` method, doubled using the `double` method, and returned by calling the `get` method.\n\n```sol\ncontract SimpleStorage {\n  uint256 storedData;\n\n  function get() public view returns (uint) {\n    return storedData;\n  }\n\n  function set(uint x) public {\n    storedData = x;\n  }\n\n  function double() public {\n    storedData *= 2;\n  }\n}\n```\n\nYou can deploy the `SimpleStorage` contract the same way you did the `MathTest` contract. After the deployment completes, take some time to explore the three deployed functions. If you hover over the **read** and **write** icons close to the **Run** button, you’ll see the type of function each contract implements.\n\n![Function types in smart contract](https://i.imgur.com/Wa92qeg.png)\n\nThe `get` function is a view function and only accesses the state variables in a contract, which in this case is the `storedData` variable. It doesn’t require gas to run.\n\nThe other functions are non-payable functions that require gas fees to run since they modify the state of the Ethereum network.\n\n> You should only store important data on the blockchain and ensure that all variables have the required types so that you don’t waste resources.\n\n## Conclusion","metadata":{"id":467}}],["468",{"pageContent":"> You should only store important data on the blockchain and ensure that all variables have the required types so that you don’t waste resources.\n\n## Conclusion\n\n[Solidity](https://docs.soliditylang.org/en/v0.8.11/) is a statically typed language used for smart contract development on the Ethereum blockchain. Learning how to develop smart contracts using Solidity is an important step to developing blockchain solutions.\n\nIn this article, you were guided through how to get started with the Solidity programming language on Replit. \n\nEven though [web3](https://web3.foundation) is still in its early stages, its decentralized online ecosystem based on blockchain has a lot of potential. [Replit](https://replit.com/) reduces the time required for web3 innovation with powerful features like team collaboration and version control, which are enabled by default on Solidity projects.","metadata":{"id":468}}],["469",{"pageContent":"---\ntitle: \"Announcing Ghostwriter Chat: The first conversational AI programmer\"\nauthor: \"The Replit Team\"\ndate: 2023-02-15\ncover: https://blog.replit.com/images/Ghostwriter/GW_Header_Image_Final.png\ncategories: ai,product\n---\n![Header Image](https://blog.replit.com/images/Ghostwriter/GW_Header_Image_Final.png)\n\nToday, we are announcing the beta release of Ghostwriter Chat. Now with chat, a proactive debugger, and awareness of your project’s context, Ghostwriter becomes the best AI pair programmer in the world.\n\n## Building Ghostwriter\n\nLast fall, we introduced Ghostwriter, Replit’s coding AI, with Complete, Generate, Transform, and Explain Code - coding assistant tools that work with you as you code. Together they made coding faster by automating repetitive tasks and removing the drudgery of writing boilerplate code. \n\nThat was just the first step towards our master plan to create a fully autonomous pair programmer – one that feels like working with another teammate. \n\n![Replit Ghostwriter](https://blog.replit.com/images/Ghostwriter/Replit_Ghostwriter.png)\n\nGhostwriter Chat is the next phase of AI-assisted programming, helping you go from idea to product even faster. [Recent studies show](https://arxiv.org/pdf/2302.07080.pdf) that conversational generated code suggestions are accepted +50% of the time, and +75% of people had a positive experience with conversational AI. \n\nReplit is the first to bring it directly to the IDE.\n\n![Demo #1](https://blog.replit.com/images/Ghostwriter/index-file-logo-compressed.mp4)\n\n## Smart file context awareness\n\nToday, developers spend hours searching for solutions on Google and Stack Overflow, asking “How do I do _____?” and “What does this error mean?” Sometimes, you might not even know the right words to search for your problem. Regardless of what you search for, it can be hard to find a solution, and typically not possible to find one that matches the unique project you are building.","metadata":{"id":469}}],["470",{"pageContent":"Existing conversational AI tools can be a great substitute for search, but they run into the same issue. The AI may respond with a solution but does not know the project you are working on. You can, of course, continue to prompt the AI by pasting in more context and code, but this takes you out of the flow, slows you down, and is not a great coding experience.\n\nGhostwriter Chat lives in the IDE, and it knows about the code you’re working on. From your first prompt, Ghostwriter Chat incorporates aspects of your project to give you more accurate and relevant answers, saving you time. The extra context provided is a huge unlock. It helps your AI pair programmer do more in the IDE than any other AI code tool…like debugging errors.\n\n> “With Ghostwriter Chat, our team is the first to market with an AI assistant that is truly integrated within the IDE. The proactive debugger is a great example of how developers benefit from an AI with a holistic view of the entire software stack, including build and dependencies information, debugging data, and runtime insights.”\n> \n> — Reza Shabani, Head of Data & AI at Replit\n\n\n\n\n![Demo #2](https://blog.replit.com/images/Ghostwriter/context-logo-compressed.mp4)\n\nAt Replit, we believe that we’re still only scratching the surface when it comes to the power of Large Language Models (LLMs) and their ability to fundamentally change how software is created.\n\n> “The milestone Replit reached with Ghostwriter Chat cannot be understated. Ghostwriter Chat sets a new bar for LLMs using context to deliver utility to users. It's a bar developers will soon come to expect.”\n> \n> — Michele Catasta, LLM Expert and former head of Applied Research at Google Labs\n\n## Proactive Debugger\n\nManual debugging is a tedious process. Click run. Red error appears. Copy and paste it into a search engine. Scroll endlessly. Find an option. Paste in the editor. Hope it works in your project. Click run. See another error. Repeat.","metadata":{"id":470}}],["471",{"pageContent":"Every developer knows this feeling. Each time an error is cast, you are forced to exit the IDE and go somewhere else for help, whether that be Google, Stack Overflow, or even ChatGPT. Ghostwriter Chat changes this.\n\n![Demo #2](https://blog.replit.com/images/Ghostwriter/debugger-alt-logo-compressed.mp4)\n\nIn contrast, when you get an error in your console, Ghostwriter Chat will proactively reach out with suggested solutions. With the press of a button, Ghostwriter Chat generates and explains a complete code block that you can paste into your project without ever leaving the IDE, keeping you in flow.\n\nSwitching contexts is a waste of your valuable time and focus. Ghostwriter Chat frees you to spend more time building. \n\n> “As a developer and longtime Replit user, I am excited for proactive debugging which will help developers spot and fix issues quickly, and teach us how to avoid similar issues in the future. Ghostwriter Chat is an incredible tool and example of how our language and code models can be used to help improve developers’ workflows.” \n> \n> — Peter Welinder, VP of Product & Partnerships, OpenAI\n\n\n## Join the Ghostwriter Chat beta today\n\nWith Ghostwriter Chat, developers can generate, transform, refactor, explain, and debug code, with much more to come. We’re excited to continue iterating and shipping new features to create a delightful, productive, coding experience. Subscribe to Ghostwriter today and, for a limited time, get free access to the Ghostwriter Chat beta. The Docs can be found [here](https://docs.replit.com/power-ups/ghostwriter/ghostwriter-chat).\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/ai\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #E7713D;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;","metadata":{"id":471}}],["472",{"pageContent":"padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Activate Ghostwriter Chat</a>\n</div>\n\n## Team shoutouts\nThe magicians behind building this product are:\n- **Data & AI team:** Reza Shabani & Muhammad Sareini\n- **Workspace engineering:** Xiaoyi Chen\n- **Design:** Devin Halladay\n- **Product management:** Aman Mathur\n- **Product engineering:** Jonathan Unikowski","metadata":{"id":472}}],["473",{"pageContent":"---\ntitle: History++ - A Better Way to Do Versioning\nauthor: Giuseppe Burtini\ndate: 2022-09-15\ncover: images/history2-release/history-diff-compare.png\ncategories: eng,product\n---\n\nHave you ever had to start over on a piece of code because you overwrote something by accident? Made an edit, replaced it, and then wished you could go back?\n\nProgrammers have tools like `git` and the undo/redo stack to help them deal with challenges like this. Replit, of course, supports these things.\n\nBut, we think there's a better way. Over the last week, we rolled out the new history UI to general availability. Here's what it looks like:\n\n<video src=\"/images/history2-release/history-story.mp4\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls></video>\n\n## The Basics\nFirst, a bit of background. Whenever you make changes to your code, we add the [_operational transformations_](https://en.wikipedia.org/wiki/Operational_transformation) (OTs) to a log of activity for that file. OTs are part of our multiplayer infrastructure, they effectively store the \"intended change\" every time you edit a file. We use this for reconciling potential conflicts when many users edit a file simultaneously.\n\nIt turns out, this makes for a pretty cool approach to versioning and history. You don't have to do anything to benefit from it (it is happening anyway) and it produces a high-fidelity take on the historical states of your file, with no real mental overhead.\n\n![A pointer to the \"Repl history\" link in the workspace](images/history2-release/history-how-to-get-there.png)\n\n\n## The Utility\n\nWith version control system based history, like `git`, you have to make an active decision to create a commit, so your intermediary states get lost. Worse, for many users, the concepts and interface are difficult. We love `git`, but it is just a piece of the puzzle.","metadata":{"id":473}}],["474",{"pageContent":"Here, you can browse a file's history, exploring it with the same interface that you normally use, seeing every change that has been made to it, and non-destructively restore to any specific version. We aimed for this to be lightweight, low-risk, and easy to use: a complement to the tools you are already using.\n\n![A screenshot of the new history tool, showing a unit test suite written in JavaScript](images/history2-release/history-new-2.png)\n\nOnce you've found a version you think is relevant or interesting, you can toggle on compare mode to see a side-by-side diff. You can also select and copy some subset of the version or click restore to bring your file back to where it used to be.\n\n![A screenshot of a side-by-side diff-view](images/history2-release/history-diff-compare.png)\n\n## The Fun\n\nOne really cool way we've been seeing people use this is to use the playback feature -- which lets you watch your file's history like it is a movie -- to make videos of their programming sessions. \n\nWe're going to do more to support sharing and social integration of these sessions going forward, but for now, it is already a really cool way to retroactively decide to share how you were thinking.\n\nSome other neat upgrades:\n\n- **Dark mode**: Old history didn't support dark mode. Sorry. New history does though!\n- **Mobile support**: Maybe you noticed that old history was real awkward on small screens? Mobile now gets first class history support!\n- **General polish**: You can browse the file tree like you would in the rest of your Repl, interact with a particular version like it is your regular code: copy-and-paste, compare, restore, and more.","metadata":{"id":474}}],["475",{"pageContent":"---\ntitle: New course - How to teach yourself coding with Quizlet Founder Andrew Sutherland\nauthor: Patrick Coleman\ndate: 2020-07-29T07:00:00.000Z\ncover: https://repl.art/boothbot.png\ncategories: edu\n---\n\nLike many of you, we’ve been stuck at home, trying out new hobbies, attempting to learn new things, and anxiously waiting until life “gets back to normal.” Well, regardless of how you’ve been spending your time during COVID, if you (or a friend or family member) have been wanting to learn how to code, we want to help!\n\nAt Repl.it, it’s our mission to make programming easier and more accessible, which is why we’ve built the best programming environment for learners. We built tools to get you coding right away without needing to fuss around with complex setup. But we also make it easy to progressively uncover advanced concepts as you learn, host your code, share and collaborate with friends, and the list goes on.\n\nSo true to our mission, today we’re announcing a new course: “How to teach yourself coding.”\n\n<a href=\"https://forms.gle/ypdm5RL844whTDAB8\"><img alt=\"Teach Yourself Programming Course Registration\" src=\"https://repl.art/boothbot.png\"></a>\n\nThis one-month course will show you how to get started coding, and how to keep up your momentum when you get stuck. It will start with absolute basics about how computers and programming languages work, and get you started on making your own basic website. The course will include instruction on how to write, fix, and test your own code, how to learn from other peoples’ code, and the basics of computer security and ethics. The primary languages will be HTML/CSS/Javascript, the building blocks of the modern web. By the end of the class, you’ll have a program you built yourself, and you’ll have momentum to keep teaching yourself more.\n\n[Register now](https://forms.gle/ypdm5RL844whTDAB8) or read on for more details.","metadata":{"id":475}}],["476",{"pageContent":"[Register now](https://forms.gle/ypdm5RL844whTDAB8) or read on for more details.\n\nThe course will be taught by celebrity guest teacher, [Andrew Sutherland](https://asuth.com/), who is the founder of [Quizlet](https://quizlet.com/), an educational software tool serving millions of students and teachers around the world. Andrew started Quizlet at age 15, when he needed a tool to help himself learn in a high school French class. He then taught himself how to program by building lots of different websites, each one more complex than the next, until he started on Quizlet. \n\nLogistics:\n- Monday, Wednesday, Friday from 4:00 - 5:00pm pacific time\n  - Will stay on until 5:30 for discussion and extra help\n- Monday, August 3 - Friday, August 28\n  - It’s ok to join late or take time off for vacation. We’ll be releasing recorded videos to all registered attendees. And that means if you’re in a different time zone, that’s ok too!\n- Zoom + Repl multiplayer + Quizlet flashcards\n  - Details will be shared with registrations\n\nCost:\n- Free for [Hacker plan](https://repl.it/site/pricing) subscribers (now just $5/month)\n- $100 for the entire course for everyone else\n\nInterested? Excited to learn coding from a successful engineer/entrepreneur? [Register now!](https://forms.gle/ypdm5RL844whTDAB8)","metadata":{"id":476}}],["477",{"pageContent":"---\ntitle: Internet access for all\nauthor: Tim Chen\ndate: 2018-02-05T00:00:00.000Z\ncategories: product\n---\n\nRepl.it is quickly becoming a tool that's used in everyday programming, and our\nusers are building all sorts of amazing programs. One thing that's been missing\nfor a long time is the ability to access the internet from repls. Being able to\ncall APIs or remote servers is something programmers can't live without. That's\nwhy we're excited to announce that starting now we're openning internet access\nfor all!\n\nPreviously, only users with a paid plan could run repls with internet access,\nand everyone else would get an error. (Read more about our [pricing\nupdate](pricing-update-2018))\n\nThis means that you can now write and run repls that scrape data or access APIs,\nregardless of whether you have a paid subscription or not.  Sharing or embedding\nan internet-accessing repl will also work for those using it - so if you wanted\nto use Repl.it to write examples for your public-facing API, now you can do so\nwithout worry!\n\n# Examples of Repls that access the Internet:\n\n\n## Scraping Wikipedia Web Pages:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@timmy_i_chen/Web-Scraping-XKCD903?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Accessing Public APIs:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@timmy_i_chen/CoinBin-API-Graph?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":477}}],["478",{"pageContent":"---\ntitle: Introducing Kotlin REPL\nauthor: Amjad Masad\ndate: 2017-05-18T00:00:00.000Z\ncategories: product\n---\n\nOn the heels of Google\n[announcing](https://venturebeat.com/2017/05/17/android-now-supports-the-kotlin-programming-language/)\nnative Kotlin support on Android yesterday, we thought it'd be cool to get a\n[Kotlin REPL](/languages/kotlin) up so that people can try it.\n\n![kotlin](https://i.imgur.com/gka1qrl.gif)\n\nGive it a spin [here](/languages/kotlin).\n\nIt's still in beta so let us know if you hit any bugs.","metadata":{"id":478}}],["479",{"pageContent":"---\ntitle: \"How to Land Your First Job as a Python Developer\"\nauthor: Galina Divakova\ndate: 2020-09-10T07:00:00.000Z\ncover: http://repl.art/laptop.png\ncategories: projects\n---\n\nPython’s status as one of the world’s most widely used programming languages is well known. Some experts rank it to be[ at par with JavaScript](https://redmonk.com/sogrady/2020/02/28/language-rankings-1-20/) in terms of simplicity, flexibility, and popularity. Its syntax is so straightforward and easy to read, custom-built software packages written in Python are the[ most shared](https://www.economist.com/graphic-detail/2018/07/26/python-is-becoming-the-worlds-most-popular-coding-language) in top online repositories. From app development to Google using the language for crawling webpages — Python is everywhere and it’s an exciting time to be a Python Developer.\n\nPython is used in top apps such as Instagram ([1 billion+](https://www.omnicoreagency.com/instagram-statistics/) users), Dropbox ([600 Million](https://dropbox.gcs-web.com/index.php/static-files/8ccb3453-e70a-430c-96db-1e20badae0d3)+ users), Reddit ([430 million](https://redditblog.com/2019/12/04/reddits-2019-year-in-review/)+ users), Facebook, Uber, etc. In GitHub,[ Python](https://github.com/python/cpython) is the[ second-most popular language](https://octoverse.github.com/2017/#:~:text=The%2520fifteen%2520most%2520popular%2520languages,programming%2520languages%25E2%2580%2594but%2520especially%2520JavaScript.&text=Python%2520replaced%2520Java%2520as%2520the,opened%2520this%2520year%2520than%2520last.) and this popularity is evident in the job market. What can you do with Python expertise? The opportunities are limitless.\n\n\n## Python developers’ salary in 2020\n\n\n\n*   According to[ Glassdoor](https://www.glassdoor.co.in/Salaries/us-python-developer-salary-SRCH_IL.0,2_IN1_KO3,19.htm), the average salary for a Python Developer is $ 76,526 per year.","metadata":{"id":479}}],["480",{"pageContent":"*   According to[ Glassdoor](https://www.glassdoor.co.in/Salaries/us-python-developer-salary-SRCH_IL.0,2_IN1_KO3,19.htm), the average salary for a Python Developer is $ 76,526 per year.\n*   Entry-Level Python Developer Jobs in the US can earn developers[ $79,378 per year](https://www.indeed.com/career/entry-level-software-engineer/salaries).\n*   Quality Assurance Engineers who are responsible for testing Python Software earn an average of[ $80,727 per year](https://www.indeed.com/career/quality-assurance-engineer/salaries).\n*   Even a Junior Python Developer (entry-level web developer with a specialty in Python) earns[ $78,680/year](https://www.indeed.com/salaries/junior-python-developer-Salaries)).\n*   The[ average Python developer](https://www.indeed.com/career/python-developer/salaries) salary is $119,271 per year. This amount has seen a 14% increase in the last four years.\n\nPlus, Python developers can join[ freelance portals](https://youteam.io/blog/offshore-developers-rates-in-2020-best-countries-and-best-platforms-to-hire-a-remote-development-team/) which are currently making room for ample opportunities. Developers, offshore or onshore can get hired quickly and be a part of virtual or real teams once they complete required certifications and fulfill qualifications. So, how to become a Python developer?\n\n\n## Skills Required to Get Hired as A Python Developer — How to Become a Developer\n\nSince Python is one of the simplest languages, entry-level candidates can learn fast and upgrade themselves easily. It would be good to know that the top recruiters look for Python developers who are in-tune with the most demanding technologies and specialties.\n\nHow long does it take to learn Python? A focused student can learn it in eight weeks. Of course, it’s impossible to know every single Python framework, but knowing the main ones is fast and — obviously — vital. Math skills and the ability to design software that can easily perform large-scale computations always help.","metadata":{"id":480}}],["481",{"pageContent":"What should a Python developer know? Overall, the key skills you need can be graded in terms of importance:\n\n\n\n### I. Most Important – Core Python, Python frameworks, and Python libraries\n\n#### *Core Python*\n\n\nA clear understanding of Core Python will ultimately be the deciding factor in a developer’s ability to finish projects. Thankfully, it is not hard to master this general-purpose programming language that’s considered very “developer-friendly”. To know core Python, the developer must be familiar with each module. Knowing the distinctions between Python 2 and 3, for instance, is very important. However, these distinctions are not a very problematic thing to learn. What’s most important is to have a clear understanding of Python’s data structures and the fundamental concepts. The ‘must know’ list of core Python concepts includes iterators, generators, exception handling, realizing the inner-workings of sets or dicts, basic file handling concepts, OOPs concepts, variables, and data types.\n\n\n#### *Python Frameworks*\n\nKnowledge of Python frameworks is an absolute must for anyone who wants to get involved in app development. These frameworks automate the application of most-used solutions, allowing Python developers to avoid the hassle of dealing with routine elements. However, it’s impossible for a Python developer to be well-versed in all frameworks. At first, it’s best to focus on learning the most popular frameworks such as Sanic, Flask, CherryPy, TurboGears, Pyramid, and Django.\n\n\n#### *Python Libraries*\n\nA Python developer who has a mastery over the [most used Python libraries](https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/) will be more efficient in his role, executing tasks and projects way quicker. Study the libraries after assessing the scope of the task. Above all, Python is a programming language that has a large supporter base. You can find many resources if you search at the right online repositories.","metadata":{"id":481}}],["482",{"pageContent":"### II. Very Important – Front-End Knowledge, MySQL, ORM Libraries\n\n\n#### *Basic Front-End Knowledge (JavaScript, HTML, CSS) [For Web Projects]*\n\nPython developers working in development teams will have to cooperate with front-end developers.\n\nWithout basic front-end knowledge, Python developers usually cannot understand the client-side of projects. Knowing basic project details such as how the application looks, whether the front-end is easy to use for clients, possible front-end limitations, etc. is very important for a Python Developer.\n\nOf course, when you take up positions in top-quality software houses, you’ll have team leads, dedicated project managers, and other professionals supervising the workflow and sharing their experience. But if your goal is to be a valuable member of the team, some understanding of front-end operations always helps.\n\n\n#### *MySQL [for Data Science]*\n\nAlthough a clear understanding of Core Python is the most important thing, knowledge of SQL plays a decisive factor, especially for people looking for jobs in data science.\n\nMost of the leading tech companies (Amazon, Google, etc.) use SQL to query data and analyze the performances of specific frameworks.\n\nSQL is a trusted field and its use is ubiquitous in tech. Every project involves the use of either SQL or SQL derivative.\n\nFortunately, many developers start their path in Data Science from learning SQL and then moving to Python, so we believe this should not be an issue for a Python developer who only starts their career.\n\nBy the way, SQL is the [most mentioned skill](https://www.dataquest.io/blog/why-sql-is-the-most-important-language-to-learn/)) in recruitment ads.\n\n\n#### *Knowledge of ORM libraries*\n\nKnowledge of ORM Libraries (Object Relational Mapper) is vital for developers looking to master the database creation process. Familiarity with ORM Libraries will make it much easier and faster to make database schema changes. Overall, it’s a skill that looks good on any Python Developer’s CV.","metadata":{"id":482}}],["483",{"pageContent":"### III. Important Skills – Version Control and Soft Skills\n\n\n#### *Version Control*\n\nLife can be difficult for a Python Developer who can’t keep track of all the changes he makes to a file. Given this, version control systems enable software developers to make changes to source code as required. Git is the most popular system developed by Linus Torvalds in 2005. Aspiring developers can go through the [Git tutorial](https://www.udemy.com/course/git-master-git-version-control-system) to learn about version control tools and the basics of Git including terminologies, installation fundamentals, and more.\n\n\n#### *Soft skills*\n\nLast but not least, all future Python Developers must obtain soft skills that help them become efficient team players and vital members of the organization. Skills such as emotional intelligence, cooperation skills, proactive mindset, ability to use feedback, adaptability, work ethic, and listening skills are all very important. These are the basic skills that are required for any kind of software developer.\n\n\n## What Roles Can A Python Developer Apply For?\n\nAs per the [Developer Survey](https://insights.stackoverflow.com/survey/2018/#technology) by Stack Overflow, the most in-demand technology of 2018-2019 was Python. The numerous job roles and openings are still on the market despite the global pandemic. Some of the most common ones include:\n\n\n### Programming Developer\n\nThe ‘Python developer’ job title is the most obvious one for all aspirants. In this role, you can expect to create and optimize data algorithms, resolve data analytics issues, apply data protection programs, and most importantly write efficient code. The final goal for every Python developer is to take part in creating unique valuable products for their employer company.\n\nThe average Python developer salary is [$112,880 per year](https://www.indeed.com/salaries/python-Salaries).\n\n(here and in the following examples we use information about the US market)\n\n\n### Python Web Developer","metadata":{"id":483}}],["484",{"pageContent":"(here and in the following examples we use information about the US market)\n\n\n### Python Web Developer\n\nPython web developers manage the server-related aspects of a project. A clear understanding of HTML, CSS, and other web frameworks that are necessary for web development is essential. Applicants must have the aptitude to compose nuanced Python scripts using Python Libraries.\n\nThe average salary of a Python web developer makes up [$119,271](https://www.indeed.com/salaries/python-Salaries) per year.\n\n\n### Data Analyst\n\nData analysts need to be experts in Mathematics, Statistics, Data Management, and effortlessly use Python Libraries (e.g., Matplotlib) to manipulate data for specific tasks.\n\nThe average salary of a data analyst is [$75,051per year](https://www.indeed.com/career/data-scientist/salaries).\n\n\n### Data Scientist\n\nMultiple companies are in the market for data scientists who can use Python libraries to assess massive datasets. The skills a data scientist must possess include data evaluation, data manipulation, Machine Learning, etc. Overall these jobs are intended for experts who can comprehensively help to develop companies by carefully using company data.\n\nThe average salary of a data scientist makes up [$121,606 per year](https://www.indeed.com/career/data-scientist/salaries).\n\n\n### AI Engineer \n\nAspiring AI engineers have to master algorithms such as angle drop and regression examination. They also have to build expectation models and help the machines carry out very specific tasks.\n\nThe average salary of an AI engineer is [$102,033 per year](https://www.indeed.com/salaries/artificial-intelligence-engineer-Salaries).\n\n\n### Simulated Intelligence Engineer \n\nSimilar to AI engineers, Simulated Intelligence Engineers need to be masters of basic Data Science and Modeling concepts.\n\nSome job roles also require an understanding of Deep Learning algorithms and Neural Network Programming.","metadata":{"id":484}}],["485",{"pageContent":"Some job roles also require an understanding of Deep Learning algorithms and Neural Network Programming.\n\nA Simulated Intelligence Engineer makes a product capable of thinking and introspection using techniques such as Natural Language Preparing. Another name for this role is Business Intelligence Developer.\n\n\n### Automation Testing Engineer\n\nAutomation engineers classify, develop, and implement automation scripts. They have to constantly create testing frameworks for automation purposes.\n\nThe average salary of an automation testing engineer [$89,721 per year](https://www.indeed.com/salaries/python-tester-Salaries).\n\n\n### Quality Assurance Engineer\n\nQuality Assurance Engineers create software test plans, execute automation scripts, track software bugs, and supervise debugging processes.\n\nThe average salary of a QA engineer is [$62,503 per year](https://www.indeed.com/salaries/python-tester-Salaries#:~:text=The%2520average%2520salary%2520for%2520%2522python,yearly%2520for%2520Software%2520Test%2520Engineer.).\n\n\n## Where Can You Find Python Developer Jobs?\n\nAccording to[ recent studies](https://youteam.io/blog/how-to-hire-a-team-of-developers-without-needing-a-pesky-recruiter/), the digital workforce needs over a million recruits by 2023. So, job opportunities are there, applicants just need to look in the right places. Some useful tactics include:\n\n\n### 1. Specialized job websites\n\n\n    Checking the top websites for Python job listings on websites such as[ Glassdoor](https://www.glassdoor.com/Explore/top-python-developer-companies_IO.4,20.htm). Other top websites include:\n\n\n\n*   [Remote Python](https://www.remotepython.com/)\n*   [PythonJobs.com](https://www.pythonjobs.com/)\n*   [The Free Python Job Board](https://pythonjobs.github.io/)\n*   [Pycoder’s Jobs](https://www.pythonjobshq.com/)\n*   [Python Software Foundation Jobs Board](https://www.python.org/jobs/)","metadata":{"id":485}}],["486",{"pageContent":"*   [The Free Python Job Board](https://pythonjobs.github.io/)\n*   [Pycoder’s Jobs](https://www.pythonjobshq.com/)\n*   [Python Software Foundation Jobs Board](https://www.python.org/jobs/)\n\nYou can find job openings and internship opportunities on any one of these websites on a regular basis. Note the list of companies you’d prefer to work for and check their posts on a day to day basis.\n\n\n### 2. Freelance Portals\n\nYou can search for Python developer jobs on various freelance portals. This can be a great tactic for those who are only starting their career — acquiring their first work experience by doing freelance projects.\n\n\n\n*   [Upwork](https://upwork.com/?dfh_uid=1)\n*   [People Per Hour](https://peopleperhour.com/?dfh_uid=1)\n*   <span style=\"text-decoration:underline;\">Freelancer.com</span>\n*   [Top 10 Freelance Sites for Python Devs](https://recruitment.com/recommendations/hire-python-developers)\n\nBegin exploring these portals to get a rough estimate of salaries, job requirements, etc. If you can multitask and manage profiles on multiple freelance platforms, you can access the finest jobs and work remotely at your own will.\n\n\n### 3. Job Boards\n\nCheck for regular listings on platforms such as GitHub Jobs, Angel.co, Product Hunt, etc.\n\n\n### 4. Event Communities\n\nEvents, where Python developers meet, are the best places to network and find out about market opportunities. Some of the must-visit Python community events include:\n\n\n\n*   [PyCon](https://ua.pycon.org/)\n*   [DjangoCon Europe](https://2020.djangocon.eu/)\n*   [AnacondaCON](https://anacondacon.io/)\n*   [PyCon UK](https://2020.pyconuk.org/)\n*   <span style=\"text-decoration:underline;\">meetup.com</span>","metadata":{"id":486}}],["487",{"pageContent":"*   [DjangoCon Europe](https://2020.djangocon.eu/)\n*   [AnacondaCON](https://anacondacon.io/)\n*   [PyCon UK](https://2020.pyconuk.org/)\n*   <span style=\"text-decoration:underline;\">meetup.com</span>\n\nIndulge in networking at these events to link up with fellow Python developers and meet with potential recruiters. Taking part in hackathons is also a great way of exploring new technologies. You can use these events to network and learn skills that can be useful for your project. Check out [Hackathon.io](https://www.hackathon.io/events) for the latest updates on Python hackathons.\n\n\n### 5. Becoming a Member of Online Developer Communities\n\nWebsites that boost Python developer communities like Reddit or GitHub are also places where recruiters post job openings. Sometimes hiring managers (tech people) are checking out posts made by skilled Python developers. If your code sample pleases a potential employer, you can get hired on the spot!\n\n\n## How to Land a Job as a Python Developer\n\n\n### Creating a Flawless CV\n\nNow that you know where to find the best Python developer jobs, it’s time to start drafting your official resume. Make sure your CV:\n\n\n\n*   Highlights your best qualities.\n*   Has a standard chronological format. This format is easily readable and consists of different sections that you can appropriately title and expand. Choose a [professional resume template](https://zety.com/blog/chronological-resume) that has the correct font requirements (11–12pt is perfectly readable).\n*   Is in the correct format that the employers asked for in the posting.\n*   Has a well-defined header, resume summary, and your contact details.\n*   Has a separate experience section explaining your professional experience (focus on listing achievements, not processes).\n*   Has a separate section for education details and one for details about your professional skills as a Python developer.","metadata":{"id":487}}],["488",{"pageContent":"*   Has a separate section for education details and one for details about your professional skills as a Python developer.\n\nYou can add additional details such as extra-curricular activities (e.g., a hackathon win), interests, etc. Keep the information structured and to the point, no matter where you’re uploading it to — a corporate website or one of the freelance hiring platforms.\n\n\n### Soft Skills Assessment\n\nBe it a video call or a face to face meetings, most first meetings in the tech industry involve the interviewer getting a sense of the candidate as a person, cooperative skills, communication skills, and basic problem-solving skills. Let your CV do your bidding. Answer as you’re asked and demonstrate qualities such as reliability or flexibility in dealing with different aspects of Python programming. What should a Python developer know before entering a soft skill assessment? To stay ahead of fellow applicants, use this [remote developer interview tool](https://youteam.io/remote-developer-interview-tool), and answer the most asked questions in these interviews.\n\n\n### [Hard Skills Verification](https://youteam.io/blog/how-to-vet-tech-candidates-especially-when-hiring-remotely-best-practices-in-2020/)\n\nThe conventional hard skills verification process consists of:\n\n\n#### Office-Based Test Assignments\n\nApplicants get a small task that they need to fulfill in real-time. These office tests act as platforms where candidates can demonstrate problem-solving skills, time management, and adaptability skills. Follow this [test assignment guide](https://youteam.io/blog/a-test-code-assignment-with-step-by-step-solution-for-a-python-developer/) to know what you can expect from the test assignment.\n\nToday, in the world suffering from the global pandemic, you'll probably get your test assignment online, which must relieve you of some on-site pressure. If you think you wouldn't feel comfortable during an on-site interview, now is a great time to start searching for a job.\n\n\n#### Hackathons","metadata":{"id":488}}],["489",{"pageContent":"#### Hackathons\n\nAgain, probably irrelevant nowadays but big corporations testing plenty of applicants sometimes host hackathons (used mostly while interviewing for entry-level Python developer jobs) so that quick performance evaluation can be made in a short time. The top performers get hired. This method is perfect for testing specific skills such as database expertise.\n\n\n#### Online coding tools\n\nNowadays, most companies use online coding interview tools. These tools are typically used to test remote applicants for Python developer jobs. The candidate’s tech stack, on-field skills, professional experience, etc. can all be tested on these coding assessment platforms. The most commonly used test platforms include:\n\n*   [Codility](https://www.codility.com/)\n*   [HackerRank](https://www.hackerrank.com/)\n*   [ChallengeRocket](https://challengerocket.com/)\n*   [CodinGame](https://www.codingame.com/)\n*   [Coderbyte](https://coderbyte.com/)\n*   [Codeassess](https://www.codeassess.com/)\n\nStart your research on these platforms long before you start applying for developer jobs. Learn about the most [common coding errors](https://blog.repl.it/beginner-python-errors-career-karma) you need to avoid in order to land the top jobs.\n\n\n## How to Get Extra Points in Your Competition for a Python Developer Job","metadata":{"id":489}}],["490",{"pageContent":"## How to Get Extra Points in Your Competition for a Python Developer Job\n\nUnfortunately, there are no secret ways of getting ‘free extra points’ in your journey as a Python developer. The only secrets are passion and practice. Practice coding, share what you’ve learned with other Python programmers on online communities, build an online presence with a blog, and share your knowledge. One of the best things about becoming a Python developer is the online community of helpful pros who are always ready to interact and share knowledge. Use these platforms to find access to small projects. Work on them (even if it’s for free) to hone your skills. Use websites such as [https://repl.it/](https://repl.it/) where you can quickly test your code. The website is usable on web browsers and mobile phones. It’s the perfect place to practice and you don’t even have to download an IDE or a compiler.\n\n[Here you can find a sample of a task](https://youteam.io/blog/a-test-code-assignment-with-step-by-step-solution-for-a-python-developer/) you could get in an interview as a Python developer. You may also search for other samples on the web.\n\nAre you ready to write code in a language that is ever-growing both in terms of user base and capabilities? Enhance your development environment and start practicing this ‘_lingua franca’_ of coding. As far as career opportunities are concerned, they’re limitless! Good luck!\n\n## **Author**\n\nGalina Divakova\n\nGalina is Head of Marketing at [YouTeam](http://youteam.io/), a Y Combinator-backed marketplace for hiring remote software developers.\n\n[Linkedin](https://www.linkedin.com/in/galinadi/) |[ Twitter](https://twitter.com/galyna_divakova) | [Facebook](https://www.linkedin.com/in/galinadi/)","metadata":{"id":490}}],["491",{"pageContent":"---\ntitle: Productizing Large Language Models\nauthor: Amjad Masad, Samip Dahal, Luis Héctor Chávez\ndate: 2022-09-21\ncover: https://blog.replit.com/images/ai/ghost.png\ncategories: product,ai\n---\n\\\nLarge Language Models (LLMs) are known for their near-magical ability to learn from very few examples -- as little as zero -- to create language wonders. LLMs can chat, write poetry, write code, and even do basic [arithmetic](https://arxiv.org/abs/2205.11916). However, the same properties that make LLMs magical also make them challenging from an engineering perspective.\n\nAt Replit we have deployed transformer-based language models of all sizes: ~100m parameter models for search and spam, 1-10B models for a code autocomplete product we call [GhostWriter](https://blog.replit.com/ai), and 100B+ models for features that require a higher reasoning ability. In this post we'll talk about what we've learned about building and hosting large language models.\n\n<video src=\"https://blog.replit.com/images/ai/aimode.mp4\"  class=\"css-3qjkrt\" autoplay muted playsinline loop controls></video>\n\n## Nonsense\n\nAny sufficiently advanced bullshit is indistinguishable from intelligence, or so the LLM thought. LLMs are super suggestible -- in fact, the primary way to interact with LLMs is via [\"prompting.\"](https://en.wikipedia.org/wiki/Prompt_engineering) Basically, you give the LLM a string of text and it generates a response, mostly in text form although some models can also generate audio or even images. The problem is, you can prompt the LLM with nonsense and it will generate nonsense. Garbage in, garbage out. Also, LLMs tend to get stuck in loops, repeating the same thing over and over again, since they have a limited attention span when dealing with some novel scenarios that were not present during training.","metadata":{"id":491}}],["492",{"pageContent":"Luckily, there are some controls to make these two problems more manageable. The first is tweaking the so called [\"temperature\"](https://nlp.stanford.edu/blog/maximum-likelihood-decoding-with-rnns-the-good-the-bad-and-the-ugly/) of the model. This is a parameter that affects the likelihood of the model picking a less likely word. The higher the temperature, the more random the output. The lower the temperature, the more likely the model is to generate words that are similar to the words it has seen before. Setting the temperature to zero makes the LLM more predictable.\n\nThe second control is the frequency penalty. This parameter affects the likelihood of the model picking a word that it has seen a lot. The higher the frequency penalty, the less likely the model is to generate words that it has previously generated. The lower the frequency penalty, the more likely the model is to generate words that it has previously generated.\n\nHowever, both parameters, up to a certain point, can start degrading the model's performance. For some applications, you'd want the model to be more \"creative\" therefore, a zero temperature doesn't cut it. And for other apps, repetition can make sense, for example, when the model is writing poetry or code.\n\nWe've found a few other methods to be helpful when filtering out nonsense:\n* Cycle detection: When the model goes into an obvious loop and starts repeating itself, we can simply truncate the output or intervene somehow via the prompt to get a different completion.\n* Sampling: We can sample the output of the model at different \"temperatures\" and pick the one that makes the most sense. This is especially helpful when the model is stuck at a local minimum.\n* Layering another model: We can use an LLM to generate a set of candidates and then use a different model to pick the best one. This is helpful when the LLM is generating multiple candidates that are all valid but you only want one.","metadata":{"id":492}}],["493",{"pageContent":"* Training to break the loop: Repetitions are often self-reinforcing (i.e. the probability of repetitions increase with no. of repetitions). We can train LLMs to break such loop of repetitions by [penalizing repetitions](https://arxiv.org/pdf/2206.02369v1.pdf) on synthetic data.\n* Finetuning on user feedback: We can use feedback from users to finetune the model to better match the user's preferences.\n\n## Quality Assurance\n\nWhen iterating on the model it's really easy to accidentally regress on performance, and unlike classical programs where input/output are largely determinstic, it's really hard to tell when an LLM has regressed. We've found it helpful to run the model against a standard benchmark dataset and track the performance on that benchmark over time. Currently, we are using OpenAI's [HumanEval](https://github.com/openai/human-eval) benchmark to evaluate quality of the model over time. We also track how often the model gets stuck in loops and how often it produces nonsense.\n\nWe also use A/B testing to compare different models and make sure that the changes we're making are actually improvements. \n\n## Performance\n\nLarge Language Model means billions (approaching trillions) of parameters, which means they are slow to train and slow to run. We've found it helpful to use a combination of techniques to speed up both training and inference. Here is what we did for GhostWriter:\n\n* [FasterTransformer](https://github.com/NVIDIA/FasterTransformer):  We've found that the transformer architecture used by most LLMs can be made faster without sacrificing too much accuracy by making some changes to the architecture. FasterTransformer, for example, sports a highly-optimized decoder blocks with the possibility of extending to distributed, multi-GPU fashion with tensor or pipeline parallelism. Their computational and memory optimizations make inference much faster than popular frameworks like PyTorch or Tensorflow, especially when running on NVIDIA hardware.","metadata":{"id":493}}],["494",{"pageContent":"* Knowledge Distillation: We can use a smaller model to \"distill\" the knowledge of a larger model. This gives us a model that is both faster and more accurate. For example see [DistilBERT](https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation).\n* Quantization:  We can use techniques like [quantization](https://en.wikipedia.org/wiki/Quantization_(signal_processing)) to compress the model by using different data types to represent all or a subset of the model parameters and input activations (float32 -> float16 or even int8) and make it simultaneously smaller and faster without sacrificing too much accuracy.\n\n## Prompt engineering\n\nOne way to think about running the model is like running your Apache webserver -- once you've configured it correctly, you still have to write the business logic of your application. \n\nThe same thing goes for LLMs, the prompt is what defines your application. And prompts are not just static things you write and forget about:\n\n* Prompts change with context: For GhostWriter, prompts consisted of telling the model what language we're using, what file we're on, and the file's content up to the cursor. But that's only scratching the surface, it's been shown that you can generate prompts that capture the context of the [entire project](https://arxiv.org/abs/2206.12839).\n* Track prompts in version control as you would code: Prompts are essentially natural language \"code,\" so it makes sense to use the same tools for storing, versioning, and diffing them.\n* Prompts can be generated by another model: We've found that you can chain models to create better prompts. In one example, we used one model to clean up the prompt before passing it into the generative model.\n\n## Deployment & monitoring","metadata":{"id":494}}],["495",{"pageContent":"## Deployment & monitoring\n\nWe run GhostWriter on GPUs in the cloud. Those GPUs are expensive, so we want to be able to have each of those GPUs serve as many requests as possible. But realistically we can never achieve 100% utilization of those GPUs: if we model the inference system as a queue, and that queue is already going as fast as it possibly can, whenever there is _any_ change in the arrival rate of requests, the queue would start growing unboundedly since the rate of departure of responses cannot go any faster. This means that requests would start timing out and user experience would degrade very quickly. In order to mitigate this, we currently are targeting for 70-80% utilization of the GPUs to leave a small buffer for small variations in request rate, and also allow for the system to spin up new GPUs when we're running close to the limit. This leads us to be very close to a cost and latency optimum simultaneously.\n\nWe already had experience with running most of our other services in [Kubernetes](https://kubernetes.io/), so it was very easy to create one more container to run GhostWriter in it. During our initial ramp-up we are running the GhostWriter inference servers geographically closer to where our servers are running (in the US). When we continue with our push to have more [worldwide Repls](https://blog.replit.com/geo-part-1-controlplane), we will start pushing the servers closer to where our users are, reducing latency by up to 200ms in the very worst case (Delhi-US roundtrip).\n\nAnd of course all of this wouldn't really matter unless we knew the health of the system. We have monitoring on both the server and client sides in addition to system-level monitoring in Kubernetes for latency, availability, request rates, and other leading indicators of health.","metadata":{"id":495}}],["496",{"pageContent":"To help mesure the quality of each model, we also store what suggestions were accepted and rejected, and track when GhostWriter completed something or the user typed it. This data is then used for fine-tuning and further training.\n\n<script>\n  window.addEventListener('load', videoScroll);\nwindow.addEventListener('scroll', videoScroll);\n\nfunction videoScroll() {\n\n  if ( document.querySelectorAll('video[autoplay]').length > 0) {\n    var windowHeight = window.innerHeight,\n        videoEl = document.querySelectorAll('video[autoplay]');\n\n    for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;\n\n      if ( videoClientRect <= ( (windowHeight) - (videoHeight*.5) ) && videoClientRect >= ( 0 - ( videoHeight*.5 ) ) ) {\n        thisVideoEl.play();\n      } else {\n        thisVideoEl.pause();\n      }\n\n    }\n  }\n\n}\n</script>","metadata":{"id":496}}],["497",{"pageContent":"---\ntitle: Previewing Markdown in Repls\nauthor: Tim Chen\ndate: 2019-08-02T00:42:33.000Z\ncategories: product\n---\n\nWhen our community members want to provide instructions within a repl,\nthe most common pattern we've seen is in a `.txt` file, or as a code\ncomment. Users quickly figured out that while they could make markdown\nfiles, there was no way to render it in a more readable format. Today,\nthat changes. We're happy to announce that you can now preview markdown\nin repls!\n\n# How to get Markdown Previews\n\nIt's really simple to use - simply create a markdown file (a file with an\n`.md` extension) and viola - you'll see a button to edit and preview in\nthe top right corner of the editor.\n\nFeel free to edit your markdown file, and toggle back and forth between\npreview mode and edit mode as much as you like!\n\n![markdown preview](https://blog-images.amasad.repl.co/markdown-preview.gif)\n\nOpening a markdown file will show the preview by default, so you can use\nthis as a README for your repl, or to provide special instructions.\n\n# Features\n\nAside from being able to preview markdown, we also support full syntax\nhighlighting for code blocks. It will be highlighted in the same theme\nas the editor itself.\n\nYou can also copy code blocks by clicking on the copy icon in the\ntop-right corner of code blocks.\n\nWe have ideas for more features, but we'd also like to hear from you.\nRead on for more!\n\n# Next Steps\n\nRight now, markdown previews are only supported on Monaco, which we use\nfor non-mobile platforms. Mobile support is coming soon.\n\nSince it's built right into the editor, we have ambitious ideas for how\nit can be better integrated with the rest of the Repl.it experience.\nOne such example of a feature we want to see is the ability to import\na code block directly into a file. This would be especially helpful for\nusing markdown as tutorial instructions.\n\nWe'd also like for files named `README.md` to be the default selected\nfile, if it exists, so users landing on your repl will see your README\nfirst.","metadata":{"id":497}}],["498",{"pageContent":"using markdown as tutorial instructions.\n\nWe'd also like for files named `README.md` to be the default selected\nfile, if it exists, so users landing on your repl will see your README\nfirst.\n\nGot more ideas for us? We'd love to hear them over on our\n[feedback channels](/feedback)!","metadata":{"id":498}}],["499",{"pageContent":"---\ntitle: Replit Mobile App\nauthor: Laima Tazmin, Abdel Rahman Elleithy, Matthew Chen, Ian Kirkpatrick\ndate: 2022-10-19T08:00:00.000Z\ncover: https://blog.repl.it/images/mobile-app/mobile-banner.jpg\ncategories: news,eng,product\n---\n![mobile art](https://blog.replit.com/images/mobileart.jpg)\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/mobile\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Download the App</a>\n</div>\n\n\nIntroducing the Replit mobile app for [Android](https://play.google.com/store/apps/details?id=com.replit.app) and [iOS](https://apps.apple.com/us/app/replit-code-anything/id1614022293).\n\nToday, we’re excited to announce the launch of the Replit mobile app. With the mobile app, you can code anything, anywhere. Build more, type less.\n\n<style>\n  .video-container {\n  position: relative;\n  padding-bottom: 56.25%;\n}\n\n.video-container iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Cmq3TrS3ccU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\nUse the app to write a Python bot, build and launch your personal website, or run any program you can imagine with the [power of Nix](https://blog.replit.com/powered-by-nix), which gives access to millions of open-source packages. With Replit, you instantly have a powerful computer in your pocket.\n\nWe're on a mission to turn smartphones from devices optimized for consumption into powerful creative tools.","metadata":{"id":499}}],["500",{"pageContent":"We're on a mission to turn smartphones from devices optimized for consumption into powerful creative tools.\n\nBefore we had a dedicated app, we saw increasing global mobile usage of our browser-based code editor. Last year, [we invested in making the mobile web IDE](https://blog.replit.com/mobile-v2) more reliable and performant. Our users noticed - it doubled our retention. Today, nearly 20% of Replit's users build on their mobile devices.\n\nYet we heard again and again from our community that they wanted a native mobile app. Building natively would allow us to expand into device-specific capabilities, work better and faster in spotty network conditions around the world, and push the limits of interaction design.\n\nUnlike other types of mobile creation apps, you can create anything with code on Replit. With phones, we can empower billions of people to build, learn, and earn from software creation.\n\n## Features\n\nWe focused the new Replit mobile app on creation with an all-new code editing experience.\n\nWhen you open the app, we take you straight into your current projects, or Repls. In the second tab, **Create**, you’ll find a rich world of languages and starter templates to kick off your next coding project. \n\nOur ultimate goal: help you build more and type less. \n\nHere are some of the ways we’re making coding on mobile devices easier: \n\n### Navigate with the coding joystick\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/joystick_demo.mp4\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nOn your phone, it can be frustrating to move the cursor and select text, let alone code. We’ve built a native control interface that lets you navigate code faster. It's called the joystick.  \n\nDrag the joystick up & down to move through code quickly. Swipe left & right (or tap the arrows on each side) to nudge the cursor exactly where you need it.","metadata":{"id":500}}],["501",{"pageContent":"Drag the joystick up & down to move through code quickly. Swipe left & right (or tap the arrows on each side) to nudge the cursor exactly where you need it.\n\nEven better, tap the joystick to select the current token, tap again to select a whole line, then tap again to expand further.\n\n### Edit with smart suggestions and common actions\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/suggestions_demo.mp4?x=1\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nAuto-completion is critical to coding. For the mobile app, we built a local-first auto-completion engine that is super fast, with a library of language-specific snippets tucked behind the keyboard. We currently support Python, HTML, CSS, JS, and Typescript, with more to come.\n\nThe coding keyboard toolbar also offers common actions, like undo & redo, indent, and toggle comment. Plus, we've added a clipboard manager for copy & pasting code between repls.\n\n### Turn ideas into code with Ghostwriter\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/ghostwriter_demo.mp4?x=1\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nWe announced [Ghostwriter](https://blog.replit.com/ai), your personal AI pair programmer, a few months ago. It's available on the Replit mobile app to early testers with a full launch coming later this month.\n\n### Make the workspace yours\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/tabs_demo.mp4\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nWe recently [announced tabs on desktop](https://blog.replit.com/tabs). The same flexible system powers tabs on mobile too! \n\nOpen multiple files at once, switch between them easily, and access more tools without losing your place in code.\n\n## Challenges","metadata":{"id":501}}],["502",{"pageContent":"Open multiple files at once, switch between them easily, and access more tools without losing your place in code.\n\n## Challenges\n\nWhile building, we faced hard but interesting challenges at the core of interaction design. \n\nHow do we keep the user interface simple, elegant & performant, while surfacing the flexible & powerful capabilities of Replit? \n\nHow do we use screen space judiciously, and handle cross-platform differences with ease?\n\n### Behind smart suggestions\n\nOne area we paid special attention to is how we architect and surface auto-completion.\n\nCoding is hard on a mobile phone. Typing variable names, for example, is tricky on a mobile keyboard. The Replit app comes to the rescue by parsing your code and using it to generate suggestions.\n\nTo be useful, that parsing has to keep up with every keystroke. That's not easy - people type fast! That means we need to do the parsing right on your device, rather than consult a remote server. The Replit app uses the [Lezer Parser System](https://lezer.codemirror.net) from CodeMirror to do snappy incremental parsing in milliseconds. This lets us offer a smart keyboard that will grow increasingly helpful with time.\n\nIn some cases, we produce many suggestions, so we have a scoring system to ensure that we feature the most useful and frequently-used suggestions.\n\nIf you type the letter \"i\" in your Python Repl, you might be offered these auto-completion suggestions:\n\n* An `import` snippet that helps you fill in the module to import.\n* `if`, `if...else`, or `if...elif...else` snippets. These snippets include syntax, smart whitespace, etc.\n* `index`, a variable you've defined elsewhere that is in scope.\n\nWe offer a wide variety of suggestions that reflect the language or file format of your file and your content.\n\n## What’s next","metadata":{"id":502}}],["503",{"pageContent":"* `index`, a variable you've defined elsewhere that is in scope.\n\nWe offer a wide variety of suggestions that reflect the language or file format of your file and your content.\n\n## What’s next\n\nIf you’re familiar with Replit on web, you’ll notice that the app doesn’t have the same community features. Over the coming months, we’ll be rolling out more social and collaboration features, designed with mobile experiences and creation in mind.\n\nWe've only just scratched the surface on the core editing features we envisioned for the app. We’ll continue to ship improvements in code navigation and smart suggestions.\n\nBy this time next year, the Replit app will be even more powerful, fast, and educational. It will inspire you to create even more with ease. Join now and become a part of the journey.\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/mobile\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Download the App</a>\n</div>\n\n\nDoes the idea of bringing creation to the world excite you? [Apply to join the team](https://jobs.ashbyhq.com/replit/edec839f-d21d-4581-bd47-64ba6e06698b)!\n\n\n<script>\n  window.addEventListener('load', videoScroll);\nwindow.addEventListener('scroll', videoScroll);\n\nfunction videoScroll() {\n\n  if ( document.querySelectorAll('video[autoplay]').length > 0) {\n    var windowHeight = window.innerHeight,\n        videoEl = document.querySelectorAll('video[autoplay]');\n\n    for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;","metadata":{"id":503}}],["504",{"pageContent":"for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;\n\n      if ( videoClientRect <= ( (windowHeight) - (videoHeight*.5) ) && videoClientRect >= ( 0 - ( videoHeight*.5 ) ) ) {\n        thisVideoEl.play();\n      } else {\n        thisVideoEl.pause();\n      }\n\n    }\n  }\n\n}\n</script>","metadata":{"id":504}}],["505",{"pageContent":"---\ntitle: New and improved repls page\nauthor: Amjad Masad\ndate: 2018-02-26T08:00:00.000Z\ncategories: product\n---\n\nPeople use Repl.it in a variety of ways; some use it for building and shipping\napplications, while others use it for working on homework, and many others use\nit as a quick prototyping/experimentation tool. Supporting all these use cases\n(and more) is something we care a lot about, but up until now there wasn't an\neasy way to, for example, quickly go back to a project that you continue to work\non every day.\n\nToday we're excited to announce some of the changes that we've\nbeen testing for the past couple of weeks. Going to [\"my repls\"](https://repl.it/repls) the\nfirst thing you'll notice is a big \"Continue coding\" section with the projects\nthat we think you might want to go back and work on.\n\n![my repls](https://repl.it/public/images/blog/my_repls.png)\n\n## Starring\n\nAdditionally, you can now star repls, so it's easy to go back to them!\n\n<div style='position:relative;padding-bottom:73%'><iframe src='https://gfycat.com/ifr/FirstBlaringIguanodon' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Quick repl creation\n\nRepl.it users usually code in 1-3 languages, but up until now you had to go to\nthe full list of languages every time you wanted to create a new repl.\nFor that, we've added a button that expands to include your three top-most used\nlanguages.\n\n\n<div style='position:relative;padding-bottom:60%'><iframe src='https://gfycat.com/ifr/InsidiousUnawareBlackfish' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Infinite load\n\nPaging can be clunky and slow; it's much easier just to scroll.","metadata":{"id":505}}],["506",{"pageContent":"## Infinite load\n\nPaging can be clunky and slow; it's much easier just to scroll.\n\n<div style='position:relative;padding-bottom:73%'><iframe src='https://gfycat.com/ifr/GoodnaturedKaleidoscopicBluebottle' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Conclusion\n\nWe're not done yet; there's a lot more left to be desired. Look out for a new\nand improved search bar. But for now, if you have any feedback, we'd love to\n[hear it](https://repl.it/feedback)!","metadata":{"id":506}}],["507",{"pageContent":"---\ntitle: Native Graphics Love ❤️\nauthor: Luis Héctor Chávez\ndate: 2021-01-15T23:30:00.000Z\ncategories: product\n---\n\nWe have reimagined the native graphics experience on Replit. Our community of educators and hackers have given us [immense feedback on graphics performance and reliability](https://blog.repl.it/fix-gfx).\n\n<figure>\n    <video width=\"720\" height=\"480\" controls src=\"https://blog.repl.it/images/native-graphics-love/doom.m4v\"></video>\n    <figcaption>Yes, <a href=\"https://itrunsdoom.tumblr.com/\">It Runs DOOM!</a></figcaption>\n</figure>\n\nOur engineers have built a native graphics experience that is faster, more reliable, and elegant. Games and other native GUI applications launch quickly and reliably on our platform. Common issues like applications not launching and window resizing have been fixed. Among our most popular use cases is Pygame for beginner game programming and Java Swing for AP CSA students.\n\n## Engineering behind the scenes","metadata":{"id":507}}],["508",{"pageContent":"## Engineering behind the scenes\n\nBefore we take a peek behind the curtain, let's look at a very high-level view ofhow graphics work in practice. Like many Linux systems, Repl.it uses the [X Windows System](https://en.wikibooks.org/wiki/Guide_to_X11/Introduction) to display graphics. The X Windows System is natively a network-ready system: so there is one process that directly interacts with the hardware (the server), which doesn't need to be the on same machine where the program (the client) is being run. Nowadays, the networking capabilities of X are rarely used, since many optimizations rely on the fact that both the server and client processes run on the same machine and are able to share memory between them cheaply, to avoid having to move around massive amounts of graphics data through a narrow networking pipe. In order to support being able to view and interact with graphical user interfaces remotely other techologies are used, like [VNC](https://en.wikipedia.org/wiki/Virtual_Network_Computing). And just for completeness' sake, X is not the only solution for graphics in Linux, and [Wayland](https://wayland.freedesktop.org/) is slowly becoming the alternative of choice for X. Android users will be more familiar with [SurfaceFlinger](https://source.android.com/devices/graphics/surfaceflinger-windowmanager).","metadata":{"id":508}}],["509",{"pageContent":"With that bit of history and context out of the way, let's look at how the previous solution for graphics was implemented: We relied on running [the regular `Xorg` server](https://en.wikipedia.org/wiki/X.Org_Server) and a magic version of [`x11vnc`](https://github.com/LibVNC/x11vnc) that was able to talk the websocket protocol needed to be displayed from the client-side. This custom version of `x11vnc` was more than a year old and hard to update. Starting up the server in every Repl is too expensive, so we were relying on the [`LD_PRELOAD` trick](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/) by hooking invocations to [`XOpenDisplay()`](https://tronche.com/gui/x/xlib/display/opening.html) from `libX11.so`. This works well in _most_ cases, but not every single program that communicates with X uses this library, which causes it to not be ready under some circumstances. Two consequences of using the `LD_PRELOAD` trick: _every single_ process that's started will have an extra bit of code that needs to be loaded beforehand, making processes a few milliseconds slower to launch even if they don't end up using the hooked function; the other consequence is that if any process uses a custom environment (or relies on the `LD_PRELOAD` trick itself), this trick no longer works.\n\nIn order to avoid having disembodied windows floating around and not being able to close them, we also need to be running a [Window Manager](https://wiki.archlinux.org/index.php/window_manager). We chose to use [Fluxbox](http://fluxbox.org/) since it's fast and lean. One thing that happened every now and then was that the application startup and Fluxbox launch were running concurrently, so Fluxbox sometimes moved the window around to add the decorations, which caused applications to misbehave (the dreaded `X_SetInputFocus` error!) and prompty crash on first launch.","metadata":{"id":509}}],["510",{"pageContent":"The solution for the performance issue was to use a more modern, combined X server + VNC server. [TigerVNC](https://tigervnc.org/) was our first choice and we were happy with the improved performance and startup time. This also meant that we had one fewer process to take care of. In order to avoid using the `LD_PRELOAD` trick, we took a page out of [systemd's socket activation](http://0pointer.de/blog/projects/socket-activation.html) feature, so that we detect the intent of a repl wanting to communicate with X by opening the socket to the X server, and launch the server + Window Manager at that point in time.\n\nFinally, the solution for the crashes on launch was significantly simpler: just make sure that Fluxbox has finished initializing so that windows are not moved unintentionally and all the inputs are routed to the correct coordinates.\n\n## Improving the Java Swing experience\n\nAs part of this undertaking, we have boosted our Java repls to with more powerful virtual conatiners. Every Teams for Education user will now have 4x the power to compile and run *any* Java project. This was essential to ensure that the Java Swing experience could be quick and reliable for teachers and students. Chromebook users should now see a dramatic improvement for all new Java projects.\n\nCheckout Barb Ericson's AP CS PhotoLab from the [official CollegeBoard lab curriculum](https://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-compscia-picture-lab-student-guide.pdf):\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@demcrepl/PhotoLab?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Connect with us\n\nWe will continue to invest in an improved native graphics experience. Native audio integration is next. Stay tuned! Want to chat about the future of native graphics? Connect directly with [Luis](mailto:luis@repl.it).","metadata":{"id":510}}],["511",{"pageContent":"If building tools that redefine how people learn to code interests you, [join us](https://repl.it/site/careers).  \n\n## Giving Feedback Goes a Long Way\n\nTeachers continue to express their enthusiasm for multiplayer Repls, annotations, and group projects. We will continue to build on these new platform features to provide a seamless collaborative experience for project based learning.\n\nAre you dreaming of Repl.it features to make you a superhero in your classroom? We want to hear about it! Contact [Derrick McMillen](mailto:derrick@repl.it) directly via email. You can also leave feedback for us [via Canny](https://repl.it/feedback/p/improved-gfx-and-gui).\n\n\nLearn more about *Teams for Education* in our [documentation](https://docs.repl.it/Teams/).","metadata":{"id":511}}],["512",{"pageContent":"---\ntitle: \"New in Repls: autosave, custom urls, and more\"\nauthor: Haya Odeh\ndate: 2017-11-12T08:00:00.000Z\ncategories: product\n---\n\nWe are always excited about launching new features and sharing with you, our\ndear users, what we’ve been up to. For the past few months, Amjad, Mason and I\nhave been working hard and last night we quietly launched the new repl\nfeatures. These features required a lot of infrastructure and data changes which\nis always tricky to execute. We ran into some technical difficulties last night\nwith the data migration but was able to bring the site back up and things have\nbeen running relatively smoothly since then.\n\nHowever, since radical changes were required to get this out we’re still working\nthrough some of the issues. If you see a bug or if you have a repl that’s not\nworking please let us know and we’ll fix it. We hope we have your support as we\nwork through the issues. One thing we can promise you is that this change will\nunlock so many amazing features and long-term stability and reliability starting\ntoday.\n\n*Note that the classroom product is not affected by this at all. This is only a\n “repls” product change.*\n\nNow on to the new features 🥁🥁\n\n## Autosave\n\nWhen we promise we deliver. As of last night your code is autosaved by\ndefault. The new interface will include only two buttons: the run and the share\nbutton. You don’t need to worry about saving your code anymore, we’ll do it for\nyou, so no code is lost, all your work is saved in (**my repls**) .\n\n![autosave](/public/images/blog/autosave.png)\n\n\n## Name your Repl or we’ll name it for you 😊\n\nIf you have an existing untitled repl, or if you can’t be bothered to name your\nRepl -- guess what -- we’ll do it for you! You might end up with incredibly\nfunny names (thanks to the folks at\n[GfyCat](https://medium.com/@Gfycat/naming-conventions-97960fc40179) for\npioneering this). Personally I can’t wait to see what Repl.it will name my\nuntitled Repl! it’s so random! Here is what recent Repl looked like.","metadata":{"id":512}}],["513",{"pageContent":"pioneering this). Personally I can’t wait to see what Repl.it will name my\nuntitled Repl! it’s so random! Here is what recent Repl looked like.\n\n![repl name](/public/images/blog/repl_name.png)\n\n## Unified Repl URLS (no more janky revisions)\n\nOkay okay.. Before you freak out about lack of revisions.\n\n![freak out gif](https://media.giphy.com/media/13xHqoOQOdFu5a/giphy.gif)\n\nAll your code’s history is accessible under a new label called **History**.\n\nYour new Repl has but one URL, and that’s because it’s autosaved -- meaning\nevery time you change a file in your Repl, it will be automatically saved, and a\ncopy of that file before the change will be stored in your Repl History.\n\nIf you need to go back to one of your previous revisions, you can do that by\nclicking on the three dots menu on the right of the repl and click on\n**History**.\n\n![history](/public/images/blog/history.gif?123)\n\nRevisions are sorted by date, with the newest first. By default we show only the\nlatest from each day, but if you want to drill down each day you can. If you\nclick the **restore** button, the file will be restored to that revision. It’s\nokay if you did that by mistake because you can go back and restore the\npreviously latest revision which will now be just one record before the last\none.\n\nAs mentioned above, there is a lot more to this change that is more technical and\nwill allow us to ship more exciting features in the near future. We'll do a\ntechnical write up soon if you're interested.\n\nHope you like the new updates and, as always, we’d love to hear from you and if\nyou have any feedback let us know on our [feedback channel](https://repl.it/feedback).\n\nHappy weekend and happy repling!\n\nHaya & the Repl.it team","metadata":{"id":513}}],["514",{"pageContent":"---\ntitle: Replit's New Logomark\nauthor: Barron Webster\ndate: 2022-10-04T00:00:00.000Z\ncover: https://blog.replit.com/images/new_logo/logotype.png\ncategories: design\n---\n\n![Replit's new logomark](https://blog.replit.com/images/new_logo/logotype.png)\n\nYou may have noticed that Replit's logo looks a little different than it did last week. In summary: we're using what we call the \"prompt\" we already use elsewhere as our primary symbol. The prompt gives you an empty canvas, full of possibility, for you to start creating. We want Replit to be the same for your software creation journey! Let's dive in and learn why.\n\n![Our existing logomark (or, more accurately, both of our existing logomarks.)](https://blog.replit.com/images/new_logo/existing_logo.jpg)\n\n\nWe've had our old logo for a long time. The symbol (loopy, or hurricane, or ripple, or whatever else you call it) has served us well, but for a few reasons we wanted to simplify how Replit is represented:\n- It's hard to draw! Iconic logos you remember easily (Nike, Apple) are easy to reproduce. Even a five-year-old can draw the Nike logo.\n- It was unclear what it stood for.\n- It was originally drawn with imperfect geometry — look closely and you'll see that it's not actually symmetrical and the gaps between shapes are inconsistent.\n- Because of that, it doesn't render well at small scales.\n- We didn't do many checks before using it. It turns out a lot of existing logos are similar! Even in the coding tools market, others use similar symbols.\n\nPlus, to make matters more complicated, we've been using our \"prompt\" (the three yellow dots) in more places, sometimes alone. For example, we use it in our logotype, or our merch; so the question of \"Wait, what's the actual logo?\" came up often.\n\n![We often used the \"prompt\" as part of our logomark.](https://blog.replit.com/images/new_logo/existing_logo.jpg)\n![One of the mugs available in Repl shop](https://blog.replit.com/images/new_logo/mug.png)","metadata":{"id":514}}],["515",{"pageContent":"![One of the mugs available in Repl shop](https://blog.replit.com/images/new_logo/mug.png)\n\nThe prompt started in the Replit interface as the place where you start interacting with the Console or Shell; it's literally \"where you start creating\". Prompts look different across the computing ecosystem, and this is our take on it.\n\n![the three-dot prompt in the Replit console.](https://blog.replit.com/images/new_logo/prompt.png)\n\nWe also started using it in other places where someone might start typing a command, even if they weren't traditional consoles or shells, like our search/command bar:\n\n![the three-dot prompt in the Replit search/command bar.](https://blog.replit.com/images/new_logo/prompt_clui.png)\n\n\nAfter we introduced this prompt, interesting things happened. Some Replit users started using it to express themselves on Discord, Twitter, etc. (Most of them used a unicode character to simulate the prompt — U+2815, or \"[Braille Pattern Dots-135](https://www.compart.com/en/unicode/U+2815)\"). As any brand designer knows, if people pick up your symbol and start using it themselves, that's pretty remarkable.\n\n\n![Twitter users using the three-dot prompt in their usernames.](https://blog.replit.com/images/new_logo/social_use.png)\n\nWhen we decided to rip off the band-aid and retire the old logo, we explored far and wide. Working with [Mackey Saturday](https://mackeysaturday.com/) and our internal design team, we looked at ways computing has been represented visually, like Michael Beirut's [work for MIT Media Lab](https://www.pentagram.com/work/mit-media-lab/story) and Susan Kare's [original icon set for the Macintosh](https://qz.com/1666437/mac-icon-designer-susan-kare-explains-the-inspiration-for-her-designs/). We tried abstracting all sorts of ideas related to computing — keyboard keys, the \"run\" button in the Replit workspace, pixels, the cloud…\n\n![Screenshot of many different visual explorations the team did.](https://blog.replit.com/images/new_logo/exploration.png)","metadata":{"id":515}}],["516",{"pageContent":"![Screenshot of many different visual explorations the team did.](https://blog.replit.com/images/new_logo/exploration.png)\n\n…but in the end, we kept coming back to some version of the prompt. Why?\n- The prompt already has equity — people already know it and are using it\n- It's easy to draw\n- It scales down to small sizes really well\n- Its origin aligns really well with our goals. The prompt gives you an empty canvas, full of possibility, for you to start creating. We want Replit to be the same for your programming journey!\n- You can construct the symbol with simple building blocks — just three shapes! This makes it easy to remix and build visual systems around. Plus, it's a good reminder that we're in the building blocks (computing primitives) business.\n\n![Replit's new logotype](https://blog.replit.com/images/new_logo/logotype.png)\n\nThe logotype has also been cleaned up to feel much more computing-y — it's a monospace, which is the type of characters traditionally used in programming interfaces, and has some softer corners compared to our old logotype.\n\nWe also settled on a friendly orange for cases where the logo could use color. We drew inspiration from [stories of the advent of hacking culture](http://friendlyorangeglow.com/): the PLATO system and its early plasma displays. Computing has had enough blues and greens!\n\nSo, that's the story of why our logo looks different today. We hope you see it in the wild and think fondly back to these reasons when you do!\n\nThanks to Mackey Saturday, the Replit design team, and everyone else who contributed ideas — Haya, Tyler, Omar, Moudy, Joe, Tiga.\n\nIf you're interested in helping define the future of how computing looks (and works), come join us — [we're hiring!](https://replit.com/site/careers)","metadata":{"id":516}}],["517",{"pageContent":"---\ntitle: Announcing more power and changes to pricing\nauthor: Amjad Masad\ndate: 2023-01-17T17:15:00Z\ncover: https://blog.replit.com/images/rust_cover.png\ncategories: news\nprofiles: amasad\n---\n\n**Launching more power and upcoming changes to your Hacker benefits and individual powerups**   \n\nReplit has changed a lot since we launched in 2016 — evolving from a simple IDE to a place where you can learn, build, host, and share your software creations with millions around the world.\n\nToday, I'm excited to share we're launching new Boost levels that we hope will make your creation experience on Replit a lot more powerful. Replit has always been about software development - raising the ceiling of what you can build and share online instantly.\n\nWe've added a lot of power and value to Replit over the years and are launching more to help you unlock more value and power on Replit. We believe it's important to adjust our pricing to reflect these changes and ensure that we can continue to provide a first-class experience for those building on our platform. This is not a decision we made lightly.\n\n![replit-evolution](images/replit-evolution.png)\n\nIf you pay us for services on Replit, you'll receive an email detailing changes to prices and benefits specific to you. These updates will roll out over the next few weeks but we wanted to let you know as soon as possible.\n\nI want to make it clear for our current paying customers that your current plan and pricing **will not change immediately.**","metadata":{"id":517}}],["518",{"pageContent":"I want to make it clear for our current paying customers that your current plan and pricing **will not change immediately.** \n\nI also want to highlight that we are not making any changes to our free tier. Our mission is to bring the next billion software creators online so we're going continue to invest in making our free tier great even for folks who may be unable to pay. We've also been hard at work over the past few months to enable our users to earn on the platform by solving requests through [Bounties](https://blog.replit.com/bounties). This is only the first phase of what earning could look like and we're constantly iterating on how we can help you unlock greater power on our platform. \n\nThe key changes we're announcing today are:\n\n- Changes to the benefits provided as part of our Hacker Plan to reflect the additions and improvements we've made over the past 5 years. \n- An increase in prices for some of our individual powerups, such as Boosts, Always On and Private Repls. We believe that the new prices will be more aligned with the value and capabilities we provide. We're offering current pricing and benefits to our existing customers until April 3rd to make this transition easier. Keep reading for more about those changes below.\n- We're launching new levels of Boost (Up to 32x of the base offering!). Up until now, Repls could only reach up to 4vCPU & 4GB of RAM. These new levels of Boost gives you more power for resource-intensive applications that may require it. \n\n\n## Changes we're making to Hacker Plan benefits\nThe Hacker Plan has evolved a lot since we launched it in 2017 with the addition of Private Repls, Always On, Boosts, and providing more performance and compute. \n\n| Benefit                     | **Old**               | **New**                                                          |\n|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|","metadata":{"id":518}}],["519",{"pageContent":"|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|\n| **Unlimited private Repls** | Included              | Included                      |\n| **More [powerful machines](https://blog.replit.com/welcome-to-the-wonderful-world-of-clusters)**  | Included              | Included                      |\n| **Boost Power Ups**         | 5 (4 vCPUs + 4GB RAM) | 1 (2 vCPUs + 2GB RAM)         |\n| **Always On Power Ups**     | 5                     | 1                             |\n| **Default Hosted Repl RAM**        | 2GB                   | 0.5GB                         |\n| **Default Hosted Repl vCPUs**      | 2                     | 0.5\n| **Default Development Repl RAM**        | 2GB                   | 2GB                         |\n| **Default Development Repl vCPUs**      | 2                     | 2\n| **AI-powered helpers**      | Included              | Available via [Ghostwriter](https://replit.com/site/ghostwriter) |\n\nWe're also excited to add a Boost to your active coding session. This means that anytime you're actively coding in the workspace, your Repl's stats will automatically be boosted to have 2vCPU & 2GB of RAM!\n\n## Changes we're making to the pricing of Boosts and Always On\n\nIn spring 2021, we launched Boosts & Always On as a way to give you more power and resources for your Repls. We added these to the Hacker plan for no extra cost, and we later introduced Cycles and made it possible to buy them and private repls a la carte.\n\nWe know that you love using the Boosts and Always On Power Ups, and we want to continue providing you with the best possible experience. This will help us continue offering you the same great service you've come to expect from us, and we appreciate your understanding. \n\n| Benefit                     | **Old Price**               | **New Price**                                                          |","metadata":{"id":519}}],["520",{"pageContent":"| Benefit                     | **Old Price**               | **New Price**                                                          |\n|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|\n| **Boost @ 2vCPU & 2GB RAM**         | N/A | 20 cycles/day ($0.20)         |\n| **Boost @ 4vCPU & 4GB RAM**         | 2 cycles/day ($0.02) | 70 cycles/day ($0.70)         |\n| **Always On**     | 2 cycles/day ($0.02) | 20 cycles/day ($0.20)         |\n| **Private Repls**     | 150 cycles/month ($1.50) | 500 cycles/month ($5.00)         |\n\n## New boost levels for your Repls\n\nWe're excited to launch new levels of Boost so you can boost your Repl's specs all the way up to 32x (16 vCPU & 16 GB of RAM). As our creators build more advanced and powerful applications, we wanted to give them the power to run and host them on Replit.\n\n![car-game](https://replit.com/public/images/powerup-examples/boost-cloud-game-comparison.gif)\n\nWe're confident that the new boost levels will enable you to do things like host large scripts, handle large amounts of traffic for your bots, and run any graphics intensive Repls to name a few!\n\n**New Levels of Boost Pricing**\n\n| Boost Level                     | **Price**               |                                \n|:-----------------------------:|:-----------------------:|\n| **4vCPU & 4GB RAM**         |70 cycles/day ($0.7)         |\n| **8vCPU & 8GB RAM**     | 150 cycles/day ($1.50) | \n| **16vCPU & 16GB RAM** | 350 cycles/day ($3.50)\n\n\n## Grace periods for existing customers \n**This change won't happen immediately.**  \n\nWe know changes like these can be challenging. To ease the transition, we're automatically extending a grace period during which you'll be able to continue using the legacy Hacker benefits and the old pricing on individual Power Ups on your existing Repls using them until **April 3rd** while being able to take advantage of the new boost levels.","metadata":{"id":520}}],["521",{"pageContent":"For Hacker subscribers, this means you'll have the option to continue boosting your existing boosted Repls to 4vCPU & 4GB of RAM and keep your existing Always On Repls powered up until the grace period expires (After April 3rd).\n\nAfter that, you'll be able to boost 1 Repl to 2vCPU & 2GB RAM and keep 1 Repl Always On as part of your Hacker benefits.\n\nFor customers powering up their Repls using Cycles, you'll continue to have access to the old pricing on those Power Ups until you turn them off or until the notice expires (After April 3rd). New Power Ups except for Private Repls will be subject to the new pricing immediately; Private Repls new pricing will go into effect after April 3rd.\n\nWe'll switch you over automatically to the new benefits and pricing once the grace period elapses and send out another notice when your plan and pricing is about to transition.\n\nWe're committed to our mission of bringing the next billion software creators online, and we believe that these changes will help ensure that we can continue improving Replit for you for years to come.\n\nIf you have questions or need additional information, please contact our Support team at support@replit.com.","metadata":{"id":521}}],["522",{"pageContent":"---\ntitle: Building a web app with Nix (Because why not?)\nauthor: Guillaume St-Pierre\ndate: 2021-07-16\ncategories: projects\n---\n\nLearning a new programming language can be a very difficult task. Where should you start? How do I improve my skills from \"Hello, World!\" to building complete applications? It helps to have a starter project. One of my favourites is building a web app. I have been learning the Nix package manager for a few weeks now - [starting with creating a dynamic version system](https://blog.replit.com/nix_dynamic_version) - and I think its the perfect time to write a web application with it (Even though I probably shouldn't).\n\nBut wait, isn't Nix a package manager and reproducible build system? Am I going to write an entire post on how to package a PHP app with Nix and run it? Well, yes and no. Nix is indeed a build system, but Nix packages are configured using a functional programming language (also named Nix) created specifically for the Nix package manager. Since Nix is a complete programming language, this means we can execute it without building a package thanks to the interpreter built into the Nix package manager itself. Clearly, Nix was not built for web development, but let's see how far we can take it.\n\n## Hello, World!\nIn the long list of reasons why Nix was not created for building web applications, we have the reality that starting a web server that executes Nix code through Nix itself is not feasible at the moment. Nix is not the type of application that can be configured to wait for calls on some hostname/port and execute arbitrary code when a client connects. It is much easier to use something like `nix eval` through a more standard web server, so we'll do just that.\n\nLet's start by creating a mandatory \"Hello, World!\" example with Nix. For this post, I have created all the code inside of a [Nix repl on replit.com](https://replit.com/@replitguillaume/NixWebApp). Feel free to follow along in that repl or to create your own.","metadata":{"id":522}}],["523",{"pageContent":"Create a new repl using the **nix (beta)** language to get started, click on the three dots icon next to the Files header in the filetree and select \"Show config files\". Once the config files are visible, open the `replit.nix` file and replace `pkgs.cowsay` with `pkgs.python3`, we will need python later. Now that the repl is configured, create a `default.nix` file inside of a directory named `app` and write the following code in it.\n\n```nix\n# ./app/default.nix\n{ }:\nrec {\n  get = ''\n    <html>\n      <head>\n        <title>Nix web server - Home</title>\n      </head>\n      <body>\n        <h1>Hello from Nix!</h1>\n      </body>\n    </html>\n  '';\n}\n```\n\nThe code looks a lot like a standard derivation file. The basis of the `default.nix` file is a function (The signature for a Nix function is `arg: body`) that takes an attribute set as its single argument and should return __something_. Like most functional programming languages, Nix automatically uses the last statement of a function as the return value for that function. In fact, Nix only allows a single statement per function, purely functional. When executed, the code in this default file will return an attribute set with a single attribute: `get`. This get attribute contains our \"Hello, World!\" HTML code.\n\nNow, how do we run this code through a web server? For this post, we will be using a python web server, but you could use anything you like, even bash. Here is the code for our web server, paste it in a file named `server.py` in the repl root directory (not in `./app`).\n\n```python\n# ./server.py\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nimport subprocess\n\nhostName = \"0.0.0.0\"\nserverPort = 8080\n\nclass NixServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        command = 'nix eval --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)","metadata":{"id":523}}],["524",{"pageContent":"self.end_headers()\n\n        command = 'nix eval --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n\nif __name__ == \"__main__\":        \n    webServer = HTTPServer((hostName, serverPort), NixServer)\n    print(\"Server started http://%s:%s\" % (hostName, serverPort))\n\n    try:\n        webServer.serve_forever()\n    except KeyboardInterrupt:\n        pass\n\n    webServer.server_close()\n    print(\"Server stopped.\")\n```\n\nThe important part here is line 14: `command = 'nix eval --raw -f ./app get'`. Using the `subprocess` package, we trigger the `nix eval` command. The `--raw` option tells nix to return the result as an unquoted string, which makes things simpler for this server. We then use the `-f` option to tell Nix to use the `default.nix` file from the `app` directory. Finally, the last option tells nix which attribute from the returned attribute set to print. Combined, this will interpret our `./app/default.nix` file - thus executing the function in that file - and get the content of the `get` attribute, printing the HTML code as a raw string. Type `python ./server.py` in the repl console and wait for the web preview to appear, you should see the \"Hello, World!\" message displayed on screen.\n\n## Adding a router\nDisplaying HTML is all fine and good, but most web applications include more than a single page of content.  Nix can't access anything from the web server or the environment, it is fully isolated. We need to find some way to know which URL the user accessed in our web app to display the correct page. We could use the python server to handle calling different Nix files based on which path the user access, but we want to do as much as possible directly in Nix. Instead of trying to frontload all the work to the python server, let's get the path from the url in python and give it to Nix as an argument. Update the `do_GET` method with this new code.","metadata":{"id":524}}],["525",{"pageContent":"```python\n# ./server.py\ndef do_GET(self):\n\tself.send_response(200)\n\tself.send_header(\"Content-type\", \"text/html\")\n\tself.end_headers()\n\t\n\t# Update the command to add the --arg option\n\tcommand = f'nix eval --arg route \"{self.path}\" --raw -f ./app get'\n\t\n\t# Run nix\n\tprocess = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\t\n\toutput, _ = process.communicate()\n\tself.wfile.write(output)\n```\n\nWe can extend the `nix eval` command to pass arguments to Nix using the `--arg` option. Here, we pass a `route` attribute as the value of the path from the web server. Let's see how we can use this in the `default.nix` file.\n\n```nix\n# ./app/default.nix\n{ route ? \"/\" }:\nlet\n  routes = {\n    \"/\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Home</title>\n        </head>\n        <body>\n          <h1>Hello from Nix!</h1>\n          <ul>\n            <li><a href=\"/nix\">Nix info</a></li>\n            <li><a href=\"/404\">404</a></li>\n          </ul>\n        </body>\n      </html>\n    '';\n    \"/nix\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Nix</title>\n        </head>\n        <body>\n          <h1>Nix info</h1>\n          <p>\n            Nix is running on ${builtins.currentSystem}\n          <p>\n          </p>\n            <i>With the caveat that a python web server is serving everything...</i>\n          </p>\n        </body>\n      </html>\n    '';\n  };\nin rec {\n  get = if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\n}\n```","metadata":{"id":525}}],["526",{"pageContent":"<html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\n}\n```\n\nLet's unpack this. On line 2, we can see the `route` argument added as a key from the attribute set. Anything given to the `--arg` option of the `nix eval` command will be added here using the format `--arg key value`. On line 3, we create a `let..in` block that defines another attribute set with our possible routes, each returning some HTML. Remember when I said that Nix function could only contain one statement? The `let..in` block is a special expression that allows us to bypass this limitation by defining variables in this block and passing them to whatever statement follows the `in`. For example:\n\n```nix  \n{ entry ? 0 }:  \nlet\n\tfoo = \"bar\";\n\tbar = 1;\n\tfile = builtins.readFile ./some-file.txt;\nin if entry == 1 then foo else bar\n```\n\nThis statement defines three variables and uses two of them in an `if` statement. `If` statements must always have a `then` block and a `else` block. No single line `if` or `else if` here. We can do a lot more with the `let` statement, but the one thing we cannot do is to trigger side effects. Nix is incredibly lazy and does not allow code that does something without assigning it to a variable. Furthermore, it will not interpret unused code. For example, the `file` variable above will not be interpreted and the `some-file.txt` file will not be read, even though we assign its content to a variable. The `?` on line 1 character defines the default value of an attribute in an attribute set. If the `entry` key is not set when the function is called, it will default to `0`.","metadata":{"id":526}}],["527",{"pageContent":"To go back to our own code, the core of the router is on line 36 were we use an `if` statement to set the value of the `get` attribute. The condition checks if the `routes` set from line 4 has a key equal to the passed route using `builtins.hasAttr`. If yes, it fetches the value for that attribute with the `dot` operator and returns the HTML. If not, it will instead return the content of a 404 page. This is code acts as a sort of `switch` statement and is one of the best way to implement an `else if` statement in Nix.\n\nRestart the by typing CTRL+C then typing `python ./server.py`. You should now see the \"Hello, World!\" message printed on the web preview, with some links. Clicking on those links will route you to the pages we have defined.\n\n## Adding an API\nWe now have a very nice set of web pages, and it's still fairly fast considering how we're running it. Yet, it's all static content. No web application would be complete without some sort of data management! It is time to take our app to the next level by adding a TODO API.\n\nLet's start with some refactoring. Create a `./app/get.nix` file, we will move the code from `./app/default.nix` there with a few modifications.\n\n```nix\n# ./app/get.nix\n{ }:\nlet\n  routes = {\n    \"/\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Home</title>\n        </head>\n        <body>\n          <h1>Hello from Nix!</h1>\n          <ul>\n            <li><a href=\"/nix\">Nix info</a></li>\n            <li><a href=\"/404\">404</a></li>\n          </ul>\n        </body>\n      </html>\n    '';\n    \"/nix\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Nix</title>\n        </head>\n        <body>\n          <h1>Nix info</h1>\n          <p>\n            Nix is running on ${builtins.currentSystem}\n          <p>\n          </p>\n            <i>With the caveat that a python web server is serving everything...</i>\n          </p>\n        </body>\n      </html>\n    '';\n  };\n\n  getContent = route: if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>","metadata":{"id":527}}],["528",{"pageContent":"</p>\n        </body>\n      </html>\n    '';\n  };\n\n  getContent = route: if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\nin getContent\n```\n\nThe main difference here compared to `default.nix` is that we return a function for the router rather than call it through an attribute set.\n\nGoing back to `default.nix`, we can update the code there to `import` this function and use it rather than have the router live in the default file. It makes our code a little easier to manage and will keep the file size small as we add more code. `import` is a special keyword that will execute the function in the given file (hence why we give it an attribute set as its second argument) and return its return value. In this case, `./get.nix` returns the `getContent` function and that's what we receive from `import`.\n\n```\n# ./app/default.nix\n{ route ? \"/\" }:\nlet\n  getContent = import ./get.nix {};\nin rec {\n  get = getContent route;\n}\n```\n\nNow, let's add a `./app/post.nix` file and get started building a small API. We will be using the Replit database in this post, but feel free to use any database system you want.\n\n```nix\n# ./app/post.nix  \n{ pkgs ? import <nixpkgs>{}, replit_db_url ? \"\" }:\nlet\n  postApi = route: body: let\n    setTodos = builtins.readFile (pkgs.runCommand \"setTodos\" {\n      buildInputs = [ pkgs.cacert pkgs.curl ];\n    } ''\n      curl ${replit_db_url} -d 'todos=${body}' | tr -d '\\n' > $out\n    '');\n\n    routes = {\n      \"/api/todos\" = setTodos;\n    };\n  in if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      Not found\n  '';\nin postApi\n```","metadata":{"id":528}}],["529",{"pageContent":"'');\n\n    routes = {\n      \"/api/todos\" = setTodos;\n    };\n  in if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      Not found\n  '';\nin postApi\n```\n\nLet's go over this code. First, on line 2, we define our function with two attributes: the base nix packages and a `replit_db_url` string. We will get back to the `replit_db_url` attribute later. The nix packages include all the utility packages provided by Nix, which can be found in [their own repo](https://github.com/NixOS/nixpkgs). In the case of the `pkgs` attribute, it means Nix will automatically fetch all packages even if we do not pass it in the attribute set.\n\nIn the `let..in` block, we define our router function like in the `./app/get.nix` file with an added `body` parameter. The router only defines one route, which triggers a function called `setTodos` when the route is accessed. We define everything inside of the `postApi` function to make sure the `setTodos` function has access to the `body` attribute.\n\nThis `setTodos` function is where the magic happens. We use the `pkgs.runCommand` function to trigger a bash script on the server. This script will call the `curl` command and add data into the Replit database through its HTTP API. We then assign the result of this command, cleaned of all line breaks, to the magic `$out` variable. `runCommand` will write everything added to `$out` to its derivation file, which we then need to read using `builtins.readFile`. Since `runCommand` does not have anything installed by default, we also give it a few tools to make sure curl works.\n\nRemember when I said that Nix does not allow side effects? `runCommand` is the best way to work around that. Nix will still not execute the bash script if the result is not read through a variable, but, as long as we make sure it is, we can trigger any side effect we want in the bash script.\n\nWe can use the `runCommand` code to write a `GET` version of this as well, let's return to `./app/get.nix` and add a few more lines of code.\n\n```nix","metadata":{"id":529}}],["530",{"pageContent":"We can use the `runCommand` code to write a `GET` version of this as well, let's return to `./app/get.nix` and add a few more lines of code.\n\n```nix\n# ./app/get.nix\n{ pkgs ? import <nixpkgs>{}, replit_db_url ? \"\" }:\nlet\n  getTodos = builtins.readFile (pkgs.runCommand \"getTodos\" {\n      buildInputs = [ pkgs.cacert pkgs.curl ];\n      dummy = builtins.currentTime;\n    } ''\n      curl ${replit_db_url}/todos | tr -d '\\n' > $out\n  '');\n\n  routes = {\n  \t# Same routes, content cut for brevity\n    ...\n    \"/api/todos\" = getTodos;\n  };\n\n  getContent = ...; # Same code, content cut for brevity\nin getContent\n```\n\nThe code is very similar to the `./app/post.nix` code, but we fetch the todos data with curl rather than set them.\n\nYou may notice the `dummy = builtins.currentTime` line in `runCommand`, what's up with that? Nix is very good at avoiding unnecessary executions. It checks the content of the shell script and all the attributes given as the second parameter to determine if anything changes. If Nix decides the previous execution of `runCommand` has all the data needed already, it will not execute the bash script and instead resolve to the result of the previous execution. This was less of a problem with our `POST` code since Nix will always re-execute the code if its content changes (Which it will when the `POST` body data is different, unless the user adds the same TODO twice), but our `GET` code has no changing dependencies. We need to make sure to tell Nix to always rerun that script. The `dummy` attribute does so by creating a dependency to the current time, meaning it is sure to change between each execution.\n\nLet's update the `./app/default.nix` file to connect those changes and expose our API endpoints.\n\n```nix\n# ./app/default.nix\n{ pkgs ? import <nixpkgs>{}, route ? \"/\", body ? \"{}\", replit_db_url ? \"\" }:\nlet\n  getContent = import ./get.nix { inherit pkgs; inherit replit_db_url; };\n  postApi = import ./post.nix { inherit pkgs; inherit replit_db_url; };\nin rec {\n  get = getContent route;","metadata":{"id":530}}],["531",{"pageContent":"let\n  getContent = import ./get.nix { inherit pkgs; inherit replit_db_url; };\n  postApi = import ./post.nix { inherit pkgs; inherit replit_db_url; };\nin rec {\n  get = getContent route;\n  post = postApi route body;\n}\n```\n\nWe added a few attributes to the attribute set of our function and now expose a second attribute to our returned set for `POST` calls. We use the `inherit` keyword to pass attributes to our imported packages without having to type `pkgs = pkgs`, it is the equivalent of doing `{ foo: foo }` in an object in JavaScript for example. We need to also update the python web server to provide those as arguments, replace the `NixServer` class with the following code.\n\n```python\n# ./server.py\nclass NixServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        replit_db_url = os.getenv(\"REPLIT_DB_URL\")\n\n        command = f'nix eval --arg route \"{self.path}\" --arg replit_db_url \"{replit_db_url}\" --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        post_body = json.dumps(post_data.decode('utf-8'))\n        replit_db_url = os.getenv(\"REPLIT_DB_URL\")\n\n        command = [\n          \"nix\",\n          \"eval\",\n          \"--arg\",\n          \"route\",\n          f'\"{self.path}\"',\n          \"--arg\",\n          \"body\",\n          f'{post_body}',\n          \"--arg\",\n          \"replit_db_url\",\n          f'\"{replit_db_url}\"',\n          \"--raw\",\n          \"-f\",\n          \"./app\",\n          \"post\"\n        ]\n\n        # Run nix\n        process = subprocess.Popen(command, stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()","metadata":{"id":531}}],["532",{"pageContent":"\"-f\",\n          \"./app\",\n          \"post\"\n        ]\n\n        # Run nix\n        process = subprocess.Popen(command, stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n```\n\nThe URL for the Replit database is available as an environment variable for all repls. We can fetch it and pass it to the `nix eval` command using the `--arg` option. We also added a `do_POST` method to the class to process `POST` calls with the `post` attribute returned from Nix. This method will pass all the attributes we expect, plus the decoded body from the `POST` call. Remember that `pkgs` has a default value that sets it to a link to all Nix packages, so we can omit it from our `nix eval` call.\n\nRestart the server and try accessing these two endpoints using Curl or Postman with the repl URL (Available in the web preview). The `GET` endpoint should return the data saved by the `POST` endpoint!\n\n## Adding a web app\nWe now have static content and a dynamic API, all that's left for our TODO app is to connect to the two together! For this application, I decided to go framework-less and use a web component. A web component is a custom HTML element managed through JavaScript. Think React, but without all its JSX fancyness.\n\nCreate a `./app/app.js` file and copy the following code in there:\n\n```javascript\n// ./app/app.js\nclass TodoList extends HTMLElement {\n  constructor() {\n    super();\n    this.todos = null;\n  }\n\n  // Called when the component connects to the DOM. I.E. When it is rendered for the first time.\n  connectedCallback() {\n    this.render();\n    \n    this.fetchTodos();\n  }\n\n  fetchTodos() {\n    fetch('/api/todos').then(data => data.json()).then(result => {\n      this.todos = result;\n      this.render();\n    }).catch(() => {\n      // This block exist to handle cases were the API returns an empty string (no data)\n      this.todos = [];\n      this.render();\n    });\n  }\n\n  saveTodos(event) {\n  \t// Don't actually submit the form.\n    event.preventDefault();","metadata":{"id":532}}],["533",{"pageContent":"this.todos = [];\n      this.render();\n    });\n  }\n\n  saveTodos(event) {\n  \t// Don't actually submit the form.\n    event.preventDefault();\n\n    const newTodo = this.querySelector(\"#todo-form #new-todo\").value;\n\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify(this.todos.concat({ task: newTodo })),\n    }).then(() => {\n      this.fetchTodos();\n    });\n  }\n\n  render() {\n    if (!this.todos) {\n      this.innerHTML = '<i>Loading...</i>';\n      return;\n    }\n\n    this.innerHTML = `\n      <div>\n        <ul>\n          ${this.todos.map(todo => `\n            <li>\n              ${todo.task}\n            </li>\n          `).join('')}\n        </ul>\n        <form id=\"todo-form\">\n          <input placeholder=\"Add a task\" id=\"new-todo\" name=\"new-todo\" />\n          <button type=\"submit\">Add</button>\n        </form>\n      </div>\n    `;\n\n    this.querySelector(\"#todo-form\").addEventListener('submit', this.saveTodos.bind(this));\n  }\n}\n    \ncustomElements.define('todo-list', TodoList);\n```\n\nI won't go into too much details about web components in this article. What's important here is that `connectedCallback` is triggered when the component is picked up by the browser and rendered on screen. We tell that component to render a loading indicator and start fetching todos using our `GET` API from the previous section. Once fetched, we rerender and display the list of todos plus a small form instead of the loading indicator. Creating a todo using the form will call the `POST` API endpoint, then trigger a refetch of the `GET` endpoint, and finally a rerender.\n\nLet's update the `routes`set of our `./app/get.nix` file to use this component, replace the first route with the following code.\n\n```nix  \n\"/\" = ''\n  <html>\n    <head>\n      <title>Nix web server - Home</title>\n    </head>\n    <body>\n      <h1>Hello from Nix!</h1>\n      <ul>\n        <li><a href=\"/todos\">Todo list page</a></li>\n        <li><a href=\"/nix\">Nix info</a></li>\n      </ul>\n    </body>\n  </html>\n'';\n\"/todos\" = ''\n  <html>\n    <head>","metadata":{"id":533}}],["534",{"pageContent":"<ul>\n        <li><a href=\"/todos\">Todo list page</a></li>\n        <li><a href=\"/nix\">Nix info</a></li>\n      </ul>\n    </body>\n  </html>\n'';\n\"/todos\" = ''\n  <html>\n    <head>\n      <title>Nix web server - Todos</title>\n    </head>\n    <body>\n      <h1>Listing todos</h1>\n      <todo-list></todo-list>\n      <script>\n        ${builtins.readFile ./app.js}\n      </script>\n    </body>\n  </html>\n'';\n```\n\nWe added a link to the new `/todos` route in our home page. This `/todos` route adds the web component we created and copies the JavaScript code into a script tag by reading the JavaScript file. Nix knows to copy unquoted paths like these to its store and can access our JavaScript file no problem.\n\nRefresh the web preview (no need to reset the server since we didn't change any of the python code) and you should see the new link. Clicking on the todo list link will trigger the web component code and show you an empty list of todos. Try adding a new todo using the form, you'll see the list refreshing after around 5 seconds. Be patient, it is _very_ slow.\n\n## Conclusion\nWhat did we learn today? We learned the hard way that Nix isn't suited to web development - which was to be expected - but also that Nix can be very slow for what seems to be fairly basic operations. Nix is a build system first, while it has many optimizations (Which we had to work around) to make things faster, it's not made to provide the type of performance web applications need. The `runCommand` function creates a new build derivation that configures a _lot_ of things and creates new processes. It's meant to take some time as Nix figures out what it needs to do. `builtins.readFile` adds another layer of complexity as Nix creates yet another process to fetch and read the file.","metadata":{"id":534}}],["535",{"pageContent":"But what about `fetchUrl`? Could it be faster and simpler than `runCommand`? Unfortunately, `fetchUrl` uses a bash script and curl behind the scene, which ends up being very similar in structure and performance to our `runCommand` setup, but without our `dummy` attribute. This leads to caching issues where adding more than one todo won't change the result of the `GET` call. `fetchUrl` is meant to fetch and unpack archives for using them in build processes, not make `GET`/`POST` calls to an HTTP API.\n\nI think there might be some way to hack Nix a little bit more by making use of the `runCommand` cache we had to work around with the `dummy` attribute. There might be some way to use that to our advantage to always return the latest version of the saved data when calling the `GET` endpoint unless a `POST` call has happened. This could lead to a slow first `GET` call, but instant subsequent calls. Until a todo is added (Maybe we'll explore that in a part 2!).\n\nWhat I love about the Nix language is how simple it is. There is very little bloat and the core of the language can be learned really quickly (we only missed the `with` keyword in this post, we covered everything else!). There is definitely some potential for writing applications with this language. This was a fun adventure and a very good way to learn the Nix language, but it seems my dream of a Nix powered web application will have to wait until an interpreter makes its way on the Internets.","metadata":{"id":535}}],["536",{"pageContent":"---\ntitle: Revamping the GitHub Import Flow\nauthor: Victor Wang, Emilie Ma\ndate: 2022-07-21\ncover: https://blog-images.util.repl.co/nix-github-imports/nix-github-imports.png\ncategories: eng,product\nprofiles: VictorWang19,emilieatreplit\n---\n\nEarly last year, we made the [announcement that our infrastructure and Repls](https://blog.replit.com/nix) now had Nix baked in. Just a few months ago, we announced [all new Repls](https://blog.replit.com/powered-by-nix) would be Nix-based. And today, we're happy to announce that our GitHub imports flow is now also powered by Nix!\n\nFor a while now, the state of Git and GitHub integration within Replit has been a major pain point. One of the foremost problems was that while the rest of Replit jumped on the Nix train, repos imported from GitHub were still forced to use the old Bash style Repls. \n\nWe hear you: it's frustrating not to have the ability to use our [packager](https://docs.replit.com/programming-ide/installing-packages) or to go through a convoluted multi-step import experience. While many other parts of Replit have been getting frequent updates and reworks, the code powering everything Git was left behind. \n\nIt was thought that this change would be a rather significant and difficult change. The longer we pushed it off, the more adamant we became that we'd need to get it done right this time.\n\nWe finally decided that enough was enough - we dove deep into actually resolving this. And after some changes, we very quickly realised that the problem was not nearly as scary as we thought. After some tinkering, your GitHub imports should now be faster and more intuitive than ever!\n\nHere's a side-by-side comparison of the two flows:\n\n<video controls>\n    <source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.webm\" type=\"video/webm\">\n    <source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.mp4\" type=\"video/mp4\">\n</video>\n\n---","metadata":{"id":536}}],["537",{"pageContent":"<source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.mp4\" type=\"video/mp4\">\n</video>\n\n---\n\nWe originally thought we would have to do a significant amount of work to integrate Nix into existing language Repls. However, in reality, we realised we could actually do the opposite.\n\nWe would start with an existing Nix language template, clear out the unused files from within it that were associated with the template, then clone in the files from GitHub. In this manner, we could preserve the existing `.replit` and `replit.nix` files that were used by each language. And we could also preserve existing environment files that were necessary for certain languages (e.g. the `venv` folder for Python).\n\nFrom there, most of the existing work is already done. We then just needed a way to determine a language template to import into, which files from each template we could remove, and then finally perhaps some other small improvements to the GitHub import flow to make the user experience just a little bit nicer. \n\nTo figure out which language template to clone into, we originally considered looking into analyzing file extensions and content, but this quickly grew unfeasible as we realized the amount of edge cases that we'd have to handle. \n\nGitHub API to the rescue! The GitHub API exposes [an endpoint for the languages in a repository](https://docs.github.com/en/rest/repos/repos#list-repository-languages). We use this to automatically detect your repository's language to recommend the correct template.\n\nNext up, figuring out which files from each template to remove. We want to make sure any Repl-specific files in our templates would be overwritten by the repositories users imported. This meant getting rid of all the boilerplate files, like `index.html` in the HTML Template, and `main.py` in the Python Repl.","metadata":{"id":537}}],["538",{"pageContent":"As well, we wanted to make sure that users can work end-to-end with Replit and GitHub. This means that the experience from working in a Repl → pushing to GitHub → importing it back should be seamless. And now, it is! `.replit` and `replit.nix` configurations pushed to the repository are always reflected in the imported Repl. \n\nAmong our miscellaneous other improvements:\n- Revamped the styling of the configuration plugin\n  - More options to customize your run and compile commands, as well as an option to use our existing [Prybar](https://github.com/replit/prybar) interpreters\n- Detecting and recommending common run commands, like `npm run start` for Node.js projects\n\n---\n\nThis brings us one step closer to fully migrating Replit from our legacy [Polygott](https://github.com/replit/polygott) backend to a new Nix world. For more updates on our progress, check out [arewenixyet.com](https://arewenixyet.com/). \n\nWe hope unleashing the full power of Nix on repository imports gives users more power to fine-tune their development environment. We're excited to see what you create with this new flow!","metadata":{"id":538}}],["539",{"pageContent":"---\ntitle: Operating Principles\nauthor: Replit Team\ndate: 2022-03-22T00:00:00.000Z \ncover: https://art.replit.com/images/Random-artworkbots.png\ncategories: other\n\n---\n![replit robot artwork](https://art.replit.com/images/Random-artworkbots.png)\n\n## Mission first\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few–the professional software developer–can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people had to grow up with new skills, outlooks, and ways of learning and communicating.\n\nReplit exists to bring the next billion software creators online. Our bet is that if more people can get coding easily, more people will code. If more people code, more people will be able to independently create and generate wealth on the internet, regardless of their personal circumstances. We’re excited about what that would mean for not only Replit’s future (good for business!) but also the impact we expect it will have on humankind (good for people’s happiness!). \n\nWe don’t know exactly what we will have to build to help us get there—it’s still very early days for Replit—but everything we do, every day, should push us closer and closer towards that future. If we advance our mission, then the world will be a much better place. Anything that distracts us from our mission will be ruthlessly cut. \n\n\n## Think radical","metadata":{"id":539}}],["540",{"pageContent":"## Think radical\nWhen we first put coding in the browser, people said it was stupid, and that nobody wanted what we were building. When we first gave away cloud computing for free, they said we’ll go broke, and that there was no way we could secure it. When we said we wanted to blur the distinction between learning and building, no one wanted to fund us, they said it’s two different things. Every step of the way,  we’ve questioned norms, we’ve taken contrarian technology bets that paid off years in the future, and we’ve hired people no one wanted to hire who are now industry leaders. We’re going to keep doing it even when maybe especially when people tell us it sounds crazy. \n\nHow do we do that? Run towards the thing that’s lighting you up inside. Do something for no other reason than it seems like a fun or cool or weird way to advance our mission. Have a perspective. Make things with style. Give it swag. Turn it into a meme. Give it zing. Add a burp sound at the end of the video. Be snarky. Make someone laugh. When you feel strongly about something, don’t take no for an answer. Build it anyway and see what happens after a few users give it a try. Don’t just work on it. Play with it. Don’t wait for someone to tell you what they want. No one asked us to remove the save button on the code editor, but it seemed like a totally unnecessary extra step. And when we removed it, it made things just a little bit smoother.","metadata":{"id":540}}],["541",{"pageContent":"We need to help each other keep that spirit up, too. Growing our team can’t mean slowing down or making it hard for what’s weird or wacky to win. If you see someone get a twinkle in their eye about something, tell them to drop what they’re doing and follow it for a day. If you see a freak flag at half-mast, hoist it up where it can really fly. If someone shares an idea they’re passionate about, and you think it sounds totally wrong, tell them to prove you wrong. When someone suggests something absolutely bonkers, call them a weirdo and mean it in a good way. When someone asks you for feedback, don’t give them all the small ways it won’t work, give them all the big ways it could. Our users–current and future–depend on it.\n\n\n## Move with urgency and focus\nWe've been able to achieve so much with so little because everyone at Replit takes ownership over their work. While we don’t consider collaboration a burden, we do think people can move fastest by working on their own. This is a lot of responsibility and requires a lot of intrinsic motivation, but we find it infinitely more satisfying to work this way. We also believe this is the kind of organization the best people want to work in. \n\nBe reliable. Follow through. Take extreme ownership. Hold your work to a high standard. Find solutions to problems. Don’t make excuses. Bias towards action. Refuse to be blocked. Be decisive. Build the prototype. Schedule the demo. Work hard. Break it down into smaller pieces and ship it. Do it today, not tomorrow. If that seems hard, as U.S. Navy Seal, Jocko Willink puts it, “Relax. Look around. Make a call.” Remember, you have everything you need to get things done. And if you feel like you don’t, your bright and talented colleagues can help.\n\nWe’re all here to ship great things in pursuit of our mission. There will always be an infinite number of things to do, fix, tweak, or experiment with. Let’s be an organization full of people that get shit done without being asked or told.","metadata":{"id":541}}],["542",{"pageContent":"## Read-Eval-Print loop (how we build)\nWe get our name from \"REPL\", the Read Eval Print Loop, a magical tool that turns the computer up from a static machine into a conversational being. It’s one of the first tools in the history of computing that put humans first. Coders love REPLs because it gets them up close and personal with their program every step of the way.\n\nThis is how we aspire to build everything at Replit:\n\n- Read: Be inquisitive, talk to users, look at data, dogfood—do everything you need to do to immerse yourself in the world we’re building. Also, research and read. See how others do things and why. Engage with your colleagues in intellectual conversations about the future and read about the history of computing. \n- Evaluate: You can collect all the data in the world and not understand any of it. Even worse, you can confuse yourself. We turn data into knowledge by thinking and evaluating deeply. We seek truth over validation.\n- Print: You can think forever and not have any effect on the world. You need to act. A bias towards action generates better results in aggregate. Polish when it matters. \n- Loop: The faster everything happens, the faster you learn, the faster you improve, and the sooner our users get to take advantage of our work. Shipping incrementally, and evaluating how things are going every step of the way. And then, doing it all over again. And again, and again, and again!\n\nWe use this process because it’s how we’ll ship the best stuff. We don’t just get it done at Replit. We get it done right. Our users deserve to have that. You deserve to build it. Plus, it’s more fun that way. \n\n\n## Seek pain\nPeople in our industry love to say “find what works and pour gas on it.” It’s easy advice to take–people like being in the zone of what’s working where they feel safe and cozy. At Replit, we run towards the tough stuff. We know how much there is to learn there.","metadata":{"id":542}}],["543",{"pageContent":"When something seems off, start asking questions. When something is painful, get curious about why. When something’s uncomfortable, dive in. Don’t ignore it. Don’t get defensive. Get inquisitive. Look at the data with clear eyes. Accept nuance. Ask for feedback constantly. It’ll make all of our work and relationships better. \n\nBe willing to polish to a painstaking extent. Most people are satisfied with getting something 80% of the way there. We’d rather take it to 110%. Get excited about working really, really hard to make something great. Take pride in your work. Obsess about things. Ruminate on them. Love the feeling of working on your toes. Get comfortable making sharp turns. We’ve had a lot of them already (cough, enterprise), and we’re going to have more. Expect to change. Enjoy the evolution.\n\nGoing where others are scared to go is our competitive advantage. \n\n\n## Replit is for people \nMillions of people are already using Replit to explore their own curiosities, realize their own goals, make things that matter, and have fun. We hope that’ll be true for millions, tens of millions, maybe even billions more. That’s a whole lot of people! \n\nReplit will always be a place that anyone who wants to build can, so long as they are operating within the laws of their jurisdiction and productive members of our community. It’s true for our user base and it’s true for our company. We shouldn’t expect to agree with the values or objectives of every customer. We shouldn’t make alignment with our beliefs a requirement to use our product. Our company was started by Palestinians. Many of our first customers were Israeli. We’re proud of that.\n\nIf we’re going to realize our mission, we need to be a place where all kinds of people, with all kinds of backgrounds, experiences, ideologies, and values are warmly welcomed. We are inclusive because we work hard to see and understand the talent in each other. We focus on what brings us together, never on what divides us.","metadata":{"id":543}}],["544",{"pageContent":"Our goal is to build the most talented team in the world. We work hard to recruit the best, including those from underrepresented backgrounds who don't have equal access to opportunities. We will always be open-minded, and strive to widen (but never lower!) the bar to usher in new ideas, new perspectives, and new ways of working that help us advance our mission.\n\nWe are diverse, and that's because we focus on talent and hard work. We are not impressed by fancy college degrees or padded resumes. If someone is a Replit team member, it's because we're excited about them, their work, and their contributions to the ecosystem. There is no door that isn’t the front door. No one gets special access or rules or treatment on the basis of anything other than their contributions to the company and our mission. No one ever has to guess whether there are any other motivations or criteria at play. We’ve found this way of working is better for everyone involved, because it helps us start all of our work together with a default foundation of trust and confidence in each other.\n\nWe must always be kind, caring, and thoughtful with each other, our users, and our broader community. We must be open-minded listeners, empathetic collaborators, and excellent communicators. We should all be people other people love to work with. We should all be building a product people love using, no matter who they are.\n\n![replit robot artwork](https://art.replit.com/images/Random-artworkbots.png)","metadata":{"id":544}}],["545",{"pageContent":"---\ntitle: \"Repl.it: the IDE That Grows—from Playgrounds to Fullstack Apps\"\nauthor: Amjad Masad\ndate: 2018-03-13T07:00:00.000Z\ncategories: product\n---\n\nAt Repl.it we come to work every day to explore a single idea—what if\nprogramming just worked? What if instead of fiddling around with packages,\nconfigurations, and mismatching versions, you just open your IDE and start\ncoding. What if developers can go from an idea to coding and shipping software\nwith no time in between. What if teachers who want to teach programming don't\nhave to also work as IT administrators. What if students can just code their\nhomework without having to set up the development environment on every computer\nthey wanted to code on.\n\nThere exists an inverse relationship between developer tool sophistication and\nthe getting started step. In other words, the more sophisticated our tools are,\nthe harder it is to set up. Some would go as far as to say that programming is\ngetting [harder to\nlearn](http://allendowney.blogspot.com/2018/02/learning-to-program-is-getting-harder.html). Given\nthat progress in programming and developer tools will continue we have to\nactively fight back against the ever-increasing complexity of setting up the dev\nenvironment.\n\nOnline coding playgrounds solve part of the problem by getting people to code as\nsoon as possible. They're pre-setup environments that make a lot of decisions\nfor you. They make it easy to get started, to learn to code, and maybe even\nprototype simple apps. However, up until now, they lacked universality which is\nkey to computing. In other words, you can only use one language, maybe a few\nframeworks but you're often limited by what you can do.\n\nToday, we're changing this. We want the best of both worlds, an IDE that starts\nout looking like a playground but can grow with you as soon as you require the\nextra power. Here is how the IDE can grow from a simple\nRead-Eval-Print-Loop to a full-stack application development environment:","metadata":{"id":545}}],["546",{"pageContent":"extra power. Here is how the IDE can grow from a simple\nRead-Eval-Print-Loop to a full-stack application development environment:\n\n1. Repl.it will always start out as a simple REPL, with a single file editor and\na console. You hit run, a new environment is created, your editor script is\nevaluated, and then you can interact with the result in the console.\n\n2. If you want to use files, write to files, split your code into modules, etc.,\nyou just do that and behinds the scenes the environment will switch to one\nwhere you're interacting with the filesystem. Your code will start to compile\nand run as you'd expect it when you run a project.\n\n3. Say you need to use a third-party library, merely find it (through our\nwidget, or your favorite package registry search), require/import it, and we'll\ntake care of installing it for you.\n\n4. Say, for example, you were coding in NodeJS, and that package you just\nrequired was\nExpressJS. You use it to listen on a port, any port you'd like; we'll detect that,\nhost your server/repl on your Repl.it subdomain (forever!) and that's it you're\ndeveloping/deploying an application.\n\nHere is a gif of what the entire workflow could look like from interacting with\nthe repl to deploy a server:\n\n![server](/public/images/blog/server.gif)\n\nWe might've buried the lede here but it's worth repeating: __opening a port in the\nrepl is deploying!__ You can deploy microservices, full-stack applications, or\neven a background compute job.\n\nWe also know that not all applications will grow incrementally so in typical\nRepl.it one-click-start fashion we've pre-setup a Django, Rails, Express, and\nSinatra apps. You can get started on the [languages](/languages) page.\n\n<a target=\"_blank\" href=\"https://repl.it/languages\"><img src=\"/public/images/blog/rails.png\"/></a>\n\nThis will also work for other kinds of applications. You can start out by\nexperimenting in the repl and end up building and training a machine learning","metadata":{"id":546}}],["547",{"pageContent":"This will also work for other kinds of applications. You can start out by\nexperimenting in the repl and end up building and training a machine learning\nmodel. As an example, [here](https://repl.it/@Jae_DukDuk/Simple-GAN) is a simple Generative Adversarial Network by\n[@Jae_DukDuk](https://repl.it/@Jae_DukDuk) that uses\nthe MNIST database and scikit-learn python package:\n\n<a target=\"_blank\" href=\"https://repl.it/@Jae_DukDuk/Simple-GAN\"><img src=\"/public/images/blog/mnist.png\"/></a>\n\n\n## A new computing primitive?\n\nOne of the most exciting things about building a platform is watching all the\ncreative and unexpected ways people use it. Repl.it serverless apps are unique in\nthat they're stateful and that the same repl, same protocol, same everything,\nthat you use in development is deployed and running in production.\n\nWhat we're seeing with some of our users is that they split out their\napplications into multiple repls. They might develop their website on one repl\nand have another repl be their logs and administrator interface. One of the more\ninteresting applications we've seen recently is a repl as a client-interface to a chat\napplication. The 13-year-old [@pylieas](https://repl.it/@pyelias) built a repl that's a client chat\ninterface to the backend that he made separately (which is becoming the\nunofficial chat applications for some of the young Repl.it programmers):\n\n<a target=\"_blank\" href=\"https://repl.it/@pyelias/Chatroom\"><img alt=\"replit chat client\" src=\"/public/images/blog/chat.png\"/></a>\n\nAfter getting [user-interest](https://repl.it/ibuiltthis/p/working-chatroom) @pyelias is starting to explore building a full\nstack application using Django.\n\nWe're excited to see where where our users will take this. If you have any\nfeedback for us, we'd love to [hear](/feedback) it.","metadata":{"id":547}}],["548",{"pageContent":"---\ntitle: PostgreSQL Database Preview Now Available On Replit\nauthor: Lincoln Bergeson, Xiaoyi Chen\ndate: 2023-01-23T17:15:00Z\ncover: https://blog.replit.com/images/postgres-launch/Postgres_Header_image.png\ncategories: product\n---\n![Header Image](https://blog.replit.com/images/postgres-launch/Postgres_Header_image.png)\n\nDatabases and web apps go together like peanut butter and jelly. In a word, they're inseparable. And despite all the amazing innovations in NoSQL data stores, often a good old relational database is the most reliable tool for the job.\n\nWe want to make it completely seamless to develop applications that need databases on Replit. Starting today, you can create and instantly begin to use PostgreSQL databases from within the Replit workspace.\n\nHere's how you use it. First, click the PostgreSQL icon in the Tools pane on the lower left hand side of the workspace.\n\n![DB_Image_1](https://blog.replit.com/images/postgres-launch/DB_Image_1.png)\n\nOr, you can open a new tab and select PostgreSQL from there.\n\n![DB_Image_2](https://blog.replit.com/images/postgres-launch/DB_Image_2.png)\n\nFrom this pane, you can provision a PostgreSQL database. Compared to most SQL offerings which can take several minutes, your database on Replit will be available within just a few seconds.\n\n![DB_Image_3](https://blog.replit.com/images/postgres-launch/DB_Image_3.png)\n\nFor now we are only offering one size of database: 100 cycles per day for 10GB. The database has 1 dedicated CPU and 4 GB of RAM to process your queries. \n\nOnce you've created the database, you can start using it! The `DATABASE_URL` environment variable will have your connection string. To connect to your database with NodeJS using the `pg` package, you might use a code snippet like this:\n\n```js\nconst { Client } = require('pg')\nconst client = new Client(process.env.DATABASE_URL)\n \nclient.connect()\n \nclient.query('SELECT $1::text as message', ['Hello world!'], (err, res) => {\n  console.log(err ? err.stack : res.rows[0].message) // Hello World!","metadata":{"id":548}}],["549",{"pageContent":"client.connect()\n \nclient.query('SELECT $1::text as message', ['Hello world!'], (err, res) => {\n  console.log(err ? err.stack : res.rows[0].message) // Hello World!\n  client.end()\n})\n```\n\nWe've also created a SQL explorer that you can use to write SQL statements and see the contents of your database.\n\n![Recap Header Image](https://blog.replit.com/images/postgres-launch/DB_SQL_Explorer.mp4)\n\nIf you've purchased Ghostwriter, AI-based code completion for SQL will be available in the statement editor.\n\nFor more information on your PostgreSQL database, check out:\n- [The docs](https://docs.replit.com/neon-database/intro)\n- [Learn how to use the database](https://replit.com/learn/intro-to-postgresql)\n- [Try building a Discord Bot with sentiment analysis](https://replit.com/@DavidAtReplit/Discord-Bot-for-Sentiment-Analysis)\n\nUnder the hood, this product is powered by our friends at [Neon](https://neon.tech/) who have created a lightning-fast serverless database. The database will go to sleep after 5 minutes of inactivity. Most clients should handle the reconnection seamlessly.\n\nIn the near future we plan to offer much more flexibility and customizability in your database options. You'll be able to choose variable amounts of storage, different compute configurations, and even usage-based pricing, where you only pay for what you actually use.\n\nIf you experience any issues with your database at all, please post in [the forum](https://ask.replit.com/) and we will get back to you as quickly as possible. Let us know what you think!","metadata":{"id":549}}],["550",{"pageContent":"---\ntitle: \"Your New Replit Profile\"\nauthor: \"Søren Rood and Omar Abdul-Rahim\"\ndate: 2022-04-18\ncover: https://blog.repl.it/images/profile2.png\ncategories: product\n---\n\nYou may have noticed that the \"My Repls\" and \"profile\" pages look different. We decided to combine these surfaces into one unified page. The new profiles are fresh, more social, and more customizable than ever before.\n\nGo take a second and customize your profile! Add links, a banner, and pin your favorite Repl.\n\n### What changed?\n\nWe combined the My Repls and profile pages\n\n<iframe src=\"https://www.youtube.com/embed/LmnrvYP9ivU\" title=\"Profile 1\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nLive presence\n\n<iframe src=\"https://www.youtube.com/embed/X2XkNhsVgxo\" title=\"Profile 2\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nRead and leave comments straight from the profile\n\n<iframe src=\"https://www.youtube.com/embed/pEtkgq8SR2A\" title=\"Profile 3\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nPublishing to the community is only a few clicks away\n\n<iframe src=\"https://www.youtube.com/embed/9bkQIXbVY5s\" title=\"Profile 4\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nAdd your social links (and your discord username) so people know where else to find you\n\n<iframe src=\"https://www.youtube.com/embed/UnVdBPCq--I\" title=\"Profile 5\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nSet a profile banner\n\n<iframe src=\"https://www.youtube.com/embed/hHnIlpoyU6Q\" title=\"Profile 6\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\n### What's next?\n\nOn April 1st, we launched the new profile to 100% of users.\n\nWe'll continue to iterate and make the experience better throughout the year. Some related features/ideas that are on our mind include:\n\n1. Letting you follow other users.","metadata":{"id":550}}],["551",{"pageContent":"We'll continue to iterate and make the experience better throughout the year. Some related features/ideas that are on our mind include:\n\n1. Letting you follow other users.\n2. We'd like to add more Repl sorting and filtering features. We want it to be really easy to find things that you make. Adding sorting and filtering would also make the experience better for others who are viewing content on your profile.\n3. We want to make the pinned Repl area more customizable. That could look like: resizable showcase/pinned Repl area, automatically starting the repl when people visit your profile (so they don't have to click \"run\"), etc.\n\nIf you helped with any early prototypes, participated in any user interviews, or were a part of the explorer beta, we want to say thank you! We could not have made it this far without your help.\n\nIf this project seems interesting to you, consider checking out our [careers](https://replit.com/site/careers) page. :)\n\n### Some profiles from our community!\n\n- [@Bookie0](https://replit.com/@Bookie0)\n- [@UltimateCoder40](https://replit.com/@UltimateCoder40)\n- [@NathanNat](https://replit.com/@NathanNat)\n- [@MrVoo](https://replit.com/@MrVoo)\n- [@VapWasTaken](https://replit.com/@VapWasTaken)\n- [@HyperAlternative](https://replit.com/@HyperAlternative)\n- [@RandomCodingBoy](https://replit.com/@RandomCodingBoy)\n- [@CodingMaster398](https://replit.com/@codingMASTER398)\n- [@LilyanaGipe](https://replit.com/@LilyanaGipe)\n- [@IcemasterEric](https://replit.com/@IcemasterEric)\n- [@GunesSunar](https://replit.com/@GunesSunar)\n- [@CoolCoderSJ](https://replit.com/@CoolCoderSJ)\n- [@CodingCactus](https://replit.com/@CodingCactus)\n- [@JDOG787](https://replit.com/@JDOG787)\n- [@MUHAMMEDATIF1](https://replit.com/@MUHAMMEDATIF1)\n- [@TheOceanFace](https://replit.com/@TheOceanFace)","metadata":{"id":551}}],["552",{"pageContent":"---\ntitle: The New Publish Flow\nauthor: Søren Rood\ndate: 2022-06-02\ncover: https://blog.repl.it/images/publishing/new.png\ncategories: product\n---\n\n**TL;DR - sharing stuff you make on Replit is now easier than ever.**\n\nReplit has the most powerful primitive of any social platform that has ever existed. On Twitter, Instagram, Facebook, and many others, you only have the option of sharing text, images, and videos.\n\nOn Replit, the core primitive is a computer. The _thing_ that's actually shared on the Replit social network is a runnable machine.\n\nWe've had users build and share games, personal websites, trading bots, password crackers, operating systems, and even MacOS clones.\n\nIn the past, the process of sharing your work on Replit has been buggy and confusing. The old publish flow didn't make much sense, especially to new users. It used to be unclear what \"publishing\" really even did.\n\nI'm excited to share that we've completely revamped the publish flow. Not only is the sharing experience more streamlined, but creators have more control over how people actually consume their work.\n\n### New flow in action\n\n<iframe src=\"https://www.youtube.com/embed/3D3AItsaFPQ\" title=\"Publishing Flow Demo Video\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\n### Cover page options\nOne new feature we added to the publish flow is the ability to customize the cover page. Creators can now choose between a photo and a file to display on their Repl's cover page. Here are examples of both options:\n\nPhoto:\n<img src=\"https://blog.repl.it/images/publishing/photo.png\" alt=\"Cover Photo Example\" width=\"100%\" style=\"width:100%\"/>\n\nFile:\n<img src=\"https://blog.repl.it/images/publishing/file.png\" alt=\"Default File Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Sharing updates","metadata":{"id":552}}],["553",{"pageContent":"File:\n<img src=\"https://blog.repl.it/images/publishing/file.png\" alt=\"Default File Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Sharing updates\nWe also added the ability to share updates. If you publish something and decide to change it in any way, you now can \"share an update\" to tell your viewers what changed. Creators can share updates from the workspace and the Repl's cover page. This is what a cover page update looks like:\n\n<img src=\"https://blog.repl.it/images/publishing/update.png\" alt=\"Update Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Templates\nOne more thing -- now _anyone_ (yes, anyone) can publish templates! In the last slide of the publish flow, you can tick a checkbox called \"publish as template\".\n\nWhen you do this, your Repl will be published to https://replit.com/templates where anyone can use it as a starting point for their next project.\n\nIf you want to make money for creating templates on Replit, check out our [template jam](https://blog.replit.com/template-jam)!\n\n---\n\nIf you have any questions, please feel free to reach out to [Søren](https://twitter.com/roodsoren) on Twitter.","metadata":{"id":553}}],["554",{"pageContent":"---\ntitle: Introducing Step Debugging for Python\nauthor: Amjad Masad\ndate: 2016-11-28T08:00:00.000Z\ncategories: product\n---\n\n## Debug your Python3 programs from your browser\n\nAt Repl.it, our goal is to make programming more accessible, and as part of this\nwe aim to provide the full power of popular programming environments with no\nsetup time. And I don't think it's an understatement to say that debugging is\nthe majority of what we, as programmers, do. [](preview end)\n\nThat's why today we're making it possible to step-debug through your Python 3\ncode right from the browser. We've built a new debug pane that makes it easy\nstep in, out, over, and resume your code. All the common operations a typical\ndebugger would do.\n\n![debugger](https://i.imgur.com/oerWaQR.gif)\n\nTo get started:\n\n* write your code\n* click the \"debug\" button on the top right corner of the editor\n* a debug pane will pop-up underneath the console\n* this allows you step through your code\n\nNote that this is still in Beta and we have a lot we want to improve on it. The\nobvious thing that we'll be adding shortly is support for breakpoints. But\nthat's not all, we want this to be on parity with the best debuggers in\nindustry:\n\n1. Add breakpoint support.\n2. Add a scope pane to see what variables are in scope and what are their values.\n3. Evaluate expressions in context.\n4. Add watch expressions.\n\nGive it a spin on this recursive [factorial program](https://repl.it/E9oT).\n\nLet us know if you hit any bugs or if you have any feature requests. Happy debugging!\n\np.s. [we're hiring!](/site/jobs)\n\n_Thanks to [Thomas Ballinger](https://twitter.com/ballingt) for his help in designing and implementing the\nremote Python debugger service._","metadata":{"id":554}}],["555",{"pageContent":"---\ntitle: \"Python for Beginners: Interpreting My Amazon Spending with a Repl, Part Three\"\nauthor: Brittany Pirkle\ndate: 2022-\ncategories: edu\n---\n\nI know you have been on the edge of your seats wondering why in the world a repl is better than a spreadsheet to calculate so much data?! In case you need a refresher, I analyzed my Amazon spending for 2021 using a [Python repl](https://blog.replit.com/python-for-beginners) and with just a few lines of code I could discern a variety of answers about my spending. Not only did I find out that I am spending *way* too much money on Amazon, but I also came to the conclusion of *why* a repl is better than a spreadsheet (read to the bottom to find out).\n\nJust to recap, I used Pandas as the [package manager](https://docs.replit.com/programming-ide/installing-packages) to easily import a csv file and analyze the data on a myriad of data points. The last component to evaluate is spending over time by analyzing how much money was spent on a given day through a bar graph. The bar graph will show the amount spent and the corresponding order date. First, the order dates need to be converted (from my csv) into a format that Python can recognize. Once again, Pandas makes this easy.\n\nFirst, write `.pd.to_datetime()` and then add the column to be modified. In this case, 'order date.'\n\n\n'Order Date' is now in a format compatible with Python. However, I noticed that the time stamp was also included. For this purpose, I do not want the timestamp. I need to convert ‘datetime’ to ‘date' using `.dt.date`.\n\n\nNext is writing the code that creates the bar graph with a simple `df.plot.bar` and setting the x (horizontal) and y (vertical) coordinates. The ‘x’ is the date the order was placed and ‘y’ is the amount spent. I also want to ensure I have the rotation set to 90.\n\n`df.plot.bar(x='Order Date', y='Item Total', rot=90,)`","metadata":{"id":555}}],["556",{"pageContent":"`df.plot.bar(x='Order Date', y='Item Total', rot=90,)`\n\nHowever, the graph is very small and essentially illegible. This can be fixed by adding a figure size that will adjust the width and height of the graph with `figsize()`.  I started with 10 as the width and 20 as the height and then did some trial and error to determine `figsize=(14,30)` was the best size for this data set.\n\n\n\nThe final step to add more organization is to group the orders that were purchased on the same day into one data point. Remember, the goal is to map how much money was spent each *day*. Once again, Pandas is perfect for this with the built-in function: `df.groupby()`. I want to group all data from the ‘Order Date’ into a single column on the bar graph. To do this, I find the sum of the `Item Total` for each `Order Date`. For example, if I purchased three items on August 23, I can group all three item totals into a single value to display on the graph. I am grouping the data by ‘Order Date’ so I will write `df.groupby('Order Date')`. Next, find the sum of the ‘Item Total’ by writing `.sum()[\"Item Total\"]`. Of course, add a variable. ‘Daily_Orders.df’ works fine.\n\n\n\nWith the dates correctly reflected without the timestamp and the orders grouped by day, the graph can be re-created by changing `df.plot.bar` to `daily_orders.plot.bar` to depict a much cleaner graph that can be used for data interpretation.\n\n## Lessons Learned:\n\nAt the beginning of this project, I posed the question that most people are probably thinking. **“That seems like too much work. Why not just use a spreadsheet?”** \n\nHere is why I think a repl is a better option for data analysis:","metadata":{"id":556}}],["557",{"pageContent":"Here is why I think a repl is a better option for data analysis:\n\n\n- **Coding is more powerful**: Excel formulas can easily become overwhelming and convoluted. Most of the time, I am not sure what the formulas mean and am mindlessly typing numbers and symbols. With coding, I can see the patterns and easily decipher the data as “if/then” statements, instead of random formulas. I actually know what I am looking at and what the code is expected to do to the data set.\n\n- **Coding is transferable**: Now that I have created this project, I can use the code as a template for other data sets. And of course, the beauty of Replit allows me to fork this repl. I can easily upload a different .csv file and now this code can be transferred to the new data set. I could analyze my grocery spending or water bill with little changes to the code.\n\n- **Coding is better for multiple data sets**: There is no need to copy/paste and merge various spreadsheets into one or have multiple tabs and data sheets. Information can easily get misconstrued, omitted, or duplicated. Imagine the headache that comes with trying to merge multiple data sets into one graph?!\n\n- **Coding is quicker**. Obviously, the first time around takes longer, but now I can easily use this same process with other data.\n\n- **Coding is more intuitive**: There is way less opportunity for human error with a repl. If there is a syntax error (caused by my human error), I am alerted. If my code is written incorrectly, my repl will not run. Yes, you can also get error messages with formulas within a spreadsheet, but it is much more difficult to pinpoint where the error is and what is wrong.","metadata":{"id":557}}],["558",{"pageContent":"- **Coding is way more fun**: Have you had flashbacks to computer class in school where you had to merge data, use formulas, create graphs, etc. and it all seemed so confusing, dull, and pointless?! Replit takes away the confusion and with each new line of code you can easily track your progress. And isn't it much more fun to brag about lines of code you wrote instead of a boring spreadsheet. \n\n\nWhat other projects would you like to see to help you develop coding superpowers?","metadata":{"id":558}}],["559",{"pageContent":"---\ntitle: Introducing the Python package cache\nauthor: Luis Héctor Chávez\ndate: 2021-03-19T19:45:00.000Z\ncategories: infra\n---\n\nFiguring out how to install third-party libraries can derail people from learning to code or starting a new side project. We built the [Universal Package Manager](https://blog.replit.com/upm) (UPM for short) to save people from having to think about package installation at all. Just import the library, press run, and UPM will install it into your repl!\n\nEvery time you run a repl or a repl wakes up, UPM checks to see if it needs to download and install any dependencies. This is handy (no matter what's gone inside your repl, it will always have the dependencies it needs) but slow: UPM needs to download typically tens of megabytes worth of packages, extract them on the local filesystem, and sometimes also pre-compile them for better runtime performance.\n\nOr at least it used to be slow until yesterday when we enabled the Python package cache, so now the most popular Python packages are pre-populated in pip's cache (`/home/runner/.cache/pip`), so the download step is going to be mostly gone for the _vast_ majority of Python repls! It also uses pre-built wheels as much as possible to avoid even having to pre-compile code.\n\n## How does it work?\n\nWe had two goals in mind when we started designing this:\n\n1. it should be as transparent as possible, which meant that users would still be able to add packages to the local cache while avoiding copying files around (which would have defeated the purpose of using a cache in the first place), and\n2. each repl's cache should be independent of each other, to prevent cross-repl cache attacks (pollution, poisoning, etc.).","metadata":{"id":559}}],["560",{"pageContent":"2. each repl's cache should be independent of each other, to prevent cross-repl cache attacks (pollution, poisoning, etc.).\n\nTo achieve both goals, we are using the same technique that Docker uses to be able to share files between images: the [Overlay Filesystem](https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html). On each machine that [runs repls](https://blog.replit.com/killing-containers-at-scale#replit-architecture), we have a read-only snapshot of the contents of the cache after installing the most popular packages. The snapshot is read-only bind-mounted into each repl into `/mnt/cacache`. We then perform an Overlay-mount into the directory where the cache expects it to be (`/home/runner/.cache/pip`), using `/mnt/cacache/pip` as the \"lower\" directory and  `/mnt/scratch/cacache_pip/upper` (a user-writable directory) as the \"upper\" directory. This means that the shared files cannot be modified, and each repl has a [copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write) view of the cache.\n\nIn order to keep the cache contents fresh, we gather stats about packages being downloaded from [PyPI](https://pypi.org/), and every week we'll rebuild the cache with the list of most popular pip packages.\n\nThanks to this, the average time to install packages has gone down ~40% across all [Always On](https://blog.replit.com/alwayson) repls.\n\n![Always-on package time-to-install](https://blog.replit.com/images/python-package-cache/packages-time-to-install.png \"The cardinal sin of data visualization: unmarked axes\")\n\n### \"cacache\"?","metadata":{"id":560}}],["561",{"pageContent":"![Always-on package time-to-install](https://blog.replit.com/images/python-package-cache/packages-time-to-install.png \"The cardinal sin of data visualization: unmarked axes\")\n\n### \"cacache\"?\n\nThe name is derived from [**C**ontent-**A**ddressable storage](https://en.wikipedia.org/wiki/Content-addressable_storage) (plus \"cache\"). One of the properties that is needed for all this to work is that when a package is installed into the system, it is placed in a stable location in the filesystem that depends on the _contents_ of the package (typically the hash of the contents). Every time a package is going to be installed, the package installer (`pip` in the case of Python) asks the package server for the metadata about the package, which includes the hash of the package. This hash is used to find whether the file is already in the cache, and the local copy is used instead of downloading a new one. Furthermore, since the hash of the contents of the package is already available, the contents can be checked for integrity by comparing the hash of the local copy with the expected one!\n\n[pip](https://pip.pypa.io/en/stable/) (for Python), [npm](https://www.npmjs.com/) (for Node.js), and [Maven](https://maven.apache.org/) (for Java) all use content-addressable caches.\n\n## What's next?\n\nWe're going to give the same treatment to Java (Maven packages) and JavaScript (npm packages) repls in the next couple of weeks to complete the three most popular languages. Plus a mysterious \"language\" that will be unveiled soon.\n\nHappy (Python) repling!","metadata":{"id":561}}],["562",{"pageContent":"---\ntitle: Introducing Turtle Graphics For Python\nauthor: Amjad Masad\ndate: 2016-10-04T07:00:00.000Z\ncategories: product\n---\n\nEver since the [LOGO programming\nlanguage](https://en.wikipedia.org/wiki/Logo_programming_language) educators\nhave been using [Turtle Graphics](https://en.wikipedia.org/wiki/Turtle_graphics)\nto demonstrate the power of programming to their students while making it fun and\ninteresting.[](preview end)\n\nIn fact, my first real programming experience was when I was 6 years old\nlearning LOGO at school. I learned how to program the turtle to draw a square\nand a triangle which I then put together to create a house. However, I was frustrated\nthat I had to keep repeating the code to create a village made from\nmultiple houses -- and that's how discovered loops! It's a natural way for\nchildren to learn programming. Here is an [example turtle graphic house](https://repl.it/DoYJ/1) in\nrepl.it :)\n\n![python turtle](https://i.imgur.com/1hG5cuf.gif)\n\nSo far, we've been focused on what we think was largely missing from the web:\nrunning programs that typically require installing a compiler or an interpreter\non your computer. However, now that we've\nbuilt [tools](https://repl.it/classroom) for teachers to bring programming to\ntheir classroom, many want to use turtle graphics as part of their\ncirriculum. And that's why we're excited to introduce [Turtle Graphics](https://docs.python.org/2/library/turtle.html)\nsupport for Python.\n\nTo get started just select [`Python (with Turtle)`](https://repl.it/languages/python_turtle) from the list of languages,\nimport the `turtle` module and start drawing!\n\n_The Python Turtle implementation is powered by the [Skulpt open source project](http://skulpt.org)._","metadata":{"id":562}}],["563",{"pageContent":"---\ntitle: Rails in 30 seconds\nauthor: Amjad Masad\ndate: 1-30-2021\ncover: https://rubyonrails.org/images/rails-logo.svg\ncategories: product\n---\n\nPhilosophically, Replit and Rails are incredibly aligned. We both exist to remove excessive configuration and complexity that stands in the way of building things. However, for a long time, it bothered me that Replit didn't work well with Rails because we focus on small and lightweight projects. Recently, our infrastructure has gotten much more powerful, and I decided to give Rails another spin. It turns out it's not only possible to do Rails on Replit; it's quite a delightful experience. It takes less than 30 seconds from starting a project to seeing the welcome screen:\n\n<video controls webkit-playsinline=\"true\" playsinline=\"\" src=\"/images/rails/rails.mp4\"></video>\n\nThere is no magic under the hood. You can view the [template here](https://repl.it/@templates/Rails). I merely followed the getting started guide on the rails site and had to do only a couple of modifications to make the development website show up in the iframe on Replit (detailed in the readme file).\n\nGive it a spin, and let me know what you think!","metadata":{"id":563}}],["564",{"pageContent":"---\ntitle: Repl History\nauthor: Amjad & Faris Masad\ndate: 2017-12-11T08:00:00.000Z\ncategories: product\n---\n\nAt Repl.it we focus on simplicity, speed, and, most importantly,\nreliability. If you're using Repl.it as your primary or secondary IDE we want\nyou to be confident that the time you invest working on your code will never go\nto waste.\n\nBuilding on our [autosave feature](new_repls), the underlying infrastructure --\nevery repl has its own filesystem now -- we've built an automatic revision\nsystem that keeps every revision of code you've ever written stored. The trouble\nwas, as many of you pointed out, there was no easy way to manage it. That's why\ntoday we're excited to introduce Repl History, a page where you can view files,\ndrill down to view old revisions by day or by change, diff them against latest,\nand finally easily restore them.\n\nHere is a quick gif walkthrough:\n\n![history](/public/images/blog/history.gif?123)\n\nYou can access this from your repls dashboard or from individual repls by\nclicking on the saved/history button.","metadata":{"id":564}}],["565",{"pageContent":"---\ntitle: Making Repl Identity More Accessible\nauthor: Matt Iselin\ncategories: eng\ncover: https://blog.replit.com/images/rust_cover.png\nprofiles: mattiselin\ndate: 2023-01-10T22:00:00Z\n---\n\nIn August last year, we announced [Repl Identity](https://blog.replit.com/repl-identity), a signed identity for every Repl that your code can use to authenticate other Repls when communicating with your APIs and services.\n\nFor a quick refresher, you can try out the [demo](https://replit.com/@mattiselin/repl-identity#main.go) that decodes the identity token and outputs it to the shell.\n\nWe have a [Go package](https://github.com/replit/go-replidentity) for this already ([docs here](https://pkg.go.dev/github.com/replit/go-replidentity)), but there's a limited selection of bindings for other languages. To that end, we're rolling out a command-line tool in every Repl that allows you to use features like Repl Identity in any language that can run a subprocess.\n\nHere's a quick demo that you can try in our own Repls:\n```shell\n$ TOKEN=$($REPLIT_CLI identity create -audience=\"the target repl id\")\n$ $REPLIT_CLI identity verify -audience=\"the target repl id\" -token=\"${TOKEN}\" -json\n{\n  \"replid\": \"ff2d906a-0a47-482b-9067-1ac0a078c394\",\n  \"user\": \"mattiselin\",\n  \"slug\": \"replit-cli\",\n  \"aud\": \"the target repl id\"\n}\n```\n\nCheck out this example [Python Repl](https://replit.com/@mattiselin/repl-identity-cli#main.py) that creates and verifies a Repl Identity token:\n\n<iframe frameborder=\"0\" width=\"100%\" height=\"500px\" src=\"https://replit.com/@mattiselin/repl-identity-cli?embed=true#main.py\"></iframe>\n\nYou can wrap this command in your code to do token creation and verification without needing a direct language binding.\n\nEnjoy!","metadata":{"id":565}}],["566",{"pageContent":"---\ntitle: Understanding Repl Resource Utilization\nauthor: Lincoln Bergeson\ncategories: eng\ndate: 2022-1-31T20:00:00Z\ncover: https://blog.replit.com/images/rust_cover.png\n---\n\nEvery computer on earth needs these three essential resources in some form:\n\n1. Processor\n2. Memory\n3. Storage\n\nThe computers we provide for Replit users, or Repls, have access to a virtual CPU, an allocation of RAM, and a virtualized filesystem.\n\nIt’s important to understand resource utilization within the context of the software that you’re writing. To this end, we have started rolling out a new component in the file tree to make this more transparent and visible to all of our users.\n\n<div class=\"max-width-75\">\n\n![example of the repl resource component in action](https://blog.replit.com/images/repl-resources.png)\n\n</div>\n\nThis component can help you figure out why your repl is running slowly or otherwise misbehaving.\n\nBut what do the numbers actually mean?\n\n## CPU\n\nThere are many different types of processors, including GPUs, TPUs, microcontrollers, and more. These are specialized devices that serve distinct purposes, such as displaying graphics, machine learning, and powering smart devices.\n\nIn addition to any other processors they may have, all modern personal computers have a CPU, or central processing unit. The CPU is responsible for executing instructions and running programs. In a sense, it is the brain of the computer.\n\nToday, repls run on Google Cloud Platform and use Intel-compatible CPUs. For security and economic reasons, we don't give users access to the entire CPU. Instead, we host repls inside sandboxed Linux containers running on virtual machines that partition the CPU into virtual CPUs, or vCPUs.\n\n### What does it mean to \"use\" the CPU?\n\nThe CPU operates by executing machine instructions via the [fetch-execute cycle](https://en.wikipedia.org/wiki/Instruction_cycle).","metadata":{"id":566}}],["567",{"pageContent":"### What does it mean to \"use\" the CPU?\n\nThe CPU operates by executing machine instructions via the [fetch-execute cycle](https://en.wikipedia.org/wiki/Instruction_cycle).\n\nModern computers are highly complex and typically need to run more than one program at a time. To accomplish this, the computer runs an operating system which has exclusive control over how all of the applications on a computer share the CPU. The code within the OS that is responsible for allocating CPU time to user applications is known as the [process scheduler](https://en.wikipedia.org/wiki/Completely_Fair_Scheduler).\n\nThe details of process scheduling are complex, but the beauty of an operating system is that a user, you don't need to know how it all works under the hood. All you need to know to get started is that the program you're trying to run will get its fair share of the underlying processor, just like everyone else.\n\n### Ok, so what's CPU \"utilization\"?\n\nLinux tracks the total CPU time used by the entire system in nanoseconds in a file in the [sysfs pseudo-filesystem](https://en.wikipedia.org/wiki/Sysfs). Try reading this file in a shell with `cat /sys/fs/cgroup/cpu/cpuacct.usage`.\n\nThe calculation for utilization simply takes the difference in time spent executing instructions by the CPU, or CPU time, over a given interval and divides it by the actual time that passed, or wall time, over that same interval.\n\nYou also need to divide this number by the CPU cores that are available on the system. This way, you won't have percentages over 100%, and if your CPU utilization is at 100%, it reflects your intuition that the system is as busy as it can possibly be.\n\nIn addition to the resource monitoring component in the file tree, you can run programs such as `top`, `htop`, `mpstat`, and `sar`, all of which you can install in a Nix repl.\n\n### How many CPU cores do I get on Replit?\n\nFree plans get 0.5 vCPUs allocated to their Repls. Hacker repls get 2 vCPUs, and Boosted repls are allocated 4 vCPUs.","metadata":{"id":567}}],["568",{"pageContent":"### How many CPU cores do I get on Replit?\n\nFree plans get 0.5 vCPUs allocated to their Repls. Hacker repls get 2 vCPUs, and Boosted repls are allocated 4 vCPUs.\n\nIf you find yourself running up against resource limits frequently as a free user, consider [purchasing Cycles](https://replit.com/cycles) and adding a Boost to your Repl for 8x more CPU to work with. If you're ready for Hacker, [subscribing to Hacker](https://replit.com/pricing) will instantly upgrade all your programs to have 4x as much CPU and you'll have 5 Boosts to add to any Repl.\n\n## RAM\n\nRAM stands for Random Access Memory.\n\nIn the old days, you might have used a clunky device such as a [magnetic drum](https://en.wikipedia.org/wiki/Drum_memory), and it would have to literally spin a metal cylinder around in order to access a memory location. Today, we use lightweight sticks of [DRAM](https://en.wikipedia.org/wiki/Dynamic_random-access_memory), or Dynamic RAM, that can read or write to any memory location instantly with a tiny electronic signal.\n\nMemory is used to store any values that a program needs access to at runtime. For example, a file that is currently open in a text editor is stored in memory.\n\nHere are some more examples:\n- This website is being stored in your computer's RAM right now\n- If you're playing music, it is buffering through your system's memory\n- Any currently running programs have access to RAM to store whatever they need\n\nRAM is a lot easier to understand than CPU. To put it simply, the more programs you run, the more RAM your system will need. However, some programs (*cough* [Google Chrome](https://c.tenor.com/ma0A_HhmKhEAAAAM/chrome-ram.gif) *cough*) use more memory than others. Unfortunately as a user, you have limited control over how much memory your applications use.\n\n### How much memory do I get on Replit?\n\nAll free repls are allocated 1 GiB of memory. Hacker repls have 2 GB by default, and 4 GB when boosted.","metadata":{"id":568}}],["569",{"pageContent":"### How much memory do I get on Replit?\n\nAll free repls are allocated 1 GiB of memory. Hacker repls have 2 GB by default, and 4 GB when boosted.\n\nIf you try to use more memory than you have available, the application using too much memory will be terminated. You can test this by running the following program in a C repl:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n  for (int i = 0; i < 1000000; i++) {\n    malloc(1024 * 1024);\n  }\n  return 0;\n}\n```\n\nThis is a simple loop that tries to allocate a large amount of memory. If you run this, you'll see output such as the following:\n\n    $ ./main\n    signal: killed\n\nThe new resource monitoring component will help you see how much memory your repl is using. The free tier of 1 GB is enough for most basic programs, but power users may want to consider [purchasing Cycles](https://replit.com/cycles) for Boosts or [upgrading to Hacker](https://replit.com/pricing) to run into these resource limits less frequently.\n\n## Storage\n\nStorage is the easiest resource to understand. Each repl gets a 1 GB filesystem on an SSD, or Solid State Drive. SSDs are becoming the default in nearly all laptops and personal computers because they are so much faster than traditional hard drives, or HDDs.\n\nYou can view how much total storage you're using in the new resource monitoring component. You can also type the command `du -sh ~/$REPL_SLUG` in the shell of any repl and see how much space your files are taking up.\n\nTo see how much space an individual file may be using, you can use the `ls` command. Navigate to any folder with `cd`, and type `ls -lh` in the shell:\n\n    $ ls -lh\n    total 152K\n    -rw-r--r-- 1 runner runner 132K Apr 12  2021 db.sqlite3\n    -rw-r--r-- 1 runner runner  647 Jan 27  2020 manage.py\n    drwxr-xr-x 1 runner runner  108 Apr 12  2021 mysite\n    -rw-r--r-- 1 runner runner 2.1K Jan 14  2021 poetry.lock\n    drwxr-xr-x 1 runner runner   46 Jan 27  2020 __pycache__\n    -rw-r--r-- 1 runner runner  294 Jan 14  2021 pyproject.toml","metadata":{"id":569}}],["570",{"pageContent":"-rw-r--r-- 1 runner runner 2.1K Jan 14  2021 poetry.lock\n    drwxr-xr-x 1 runner runner   46 Jan 27  2020 __pycache__\n    -rw-r--r-- 1 runner runner  294 Jan 14  2021 pyproject.toml\n    -rw-r--r-- 1 runner runner 1.3K Apr 12  2021 README.md\n    -rw-r--r-- 1 runner runner    7 Jan 27  2020 requirements.txt\n    drwxr-xr-x 1 runner runner   20 Apr 12  2021 templates\n    drwxr-xr-x 1 runner runner  158 Apr 12  2021 todo\n\nYou can see that db.sqlite3 is taking up 132 KB of space, manage.py is using 647 bytes, the folder as a whole is using 152 KB, and so on.\n\nDue to some limitations in our platform, we are unable to provide more than 1 GB of storage in any repl. We are actively working on improvements that will allow us to give users arbitrarily large filesystems to work with.\n\nIf you're running out of storage space in your repl, you can delete some files or use an external storage provider such as [GCS](https://cloud.google.com/storage).\n\n## Conclusion\n\nIf you made it the end of this post, congratulations! You are well on your way to understanding how the system works under the hood.\n\nWe're always trying to find ways to give people as many resources as possible, for as inexpensively as possible. In one sense, allocating resources to users in an efficient and accessible way is the core problem we are solving as a company.\n\nThe new resource utilization component gives users a better window into how their repl is operating under the hood. There's so much more work like this to do -- if this post interested you, [consider joining us](https://replit.com/site/careers)!","metadata":{"id":570}}],["571",{"pageContent":"---\ntitle: See Your Currently Running Repls\nauthor: Joe Thom, Lincoln Bergeson\ndate: 2022-11-11T12:00:00Z\ncover: https://blog.replit.com/images/analytics/thumbnail.jpg\ncategories: product,infra\n---\n\nHave you ever wondered which of your repls are running at a given time? Do you know which ones are currently serving traffic, and which ones need to be woken up? Do you wish you had more visibility into when your repls have stopped in the past and when they've been restarted?\n\nIf any of the above describe you, we have just launched a new feature made especially for you: the Repl Status Manager.\n\n![](/public/images/status-overview.png)\n\nTo use it, go to the Status tab on the My Repls page.\n\nWhen you get there, you'll see a list of all the repls you've ever run in your account, sorted by recent activity -- including the ones that are currently running!\n\nIf you expand one of the Repl entries on that page, you'll see the status history for that Repl.\n\n![](/public/images/status-history.png)\n\nUnless you've purchased an \"Always On\" power up, websites hosted on Replit fall asleep when they're not in use. From this secondary view, you're able to see exactly when your repl fell asleep and when it woke back up again.\n\nAdditionally, you are able to stop repls and prevent them from being woken up by pingers by hitting the \"Stop\" button in the status view.\n\nHappy coding!","metadata":{"id":571}}],["572",{"pageContent":"---\ntitle: Building Alexa Skills On Replit\nauthor: Søren Rood\ndate: 2021-08-02\ncover: https://blog.repl.it/images/replexa-tutorial/carbon.png\ncategories: projects\n---\n\nAt Replit, we want to give everyone in the world **computer superpowers**.\n\nWe’re making it easy for anyone with a Replit account to seamlessly build and host [Amazon Alexa Skills](https://www.amazon.com/b?node=21576558011) on Replit.\n\nThis blogpost is a start-to-finish tutorial on making Alexa skills on Replit. Something important to note is that you don't need to have a physical Alexa-enabled device to build this. There is a great simulator in the developer console and a downloadable app on your phone.\n\n### Overview\n1. Configure the Alexa skill in the Amazon Developer console\n2. Clone the [\"Replexa\"](https://replit.com/@soren/replexa) template\n3. Define your own intent\n4. Test your skill\n\n### How does it work?\nAs an example, what happens when we say: \"Alexa, ask Replit about the most recent blogpost\"?\n\n1. The Alexa unit sends the message to the Alexa cloud and uses natural language processing to figure out the \"intent\" of the message. In this case, I'm trying to get information about the most recent Replit blog posts.\n2. Once Alexa knows the intent of the user, it sends a post request with the intent to the webserver that's hosted in Replit.\n3. The Replit webserver handles the request. It sends the information back to the Alexa cloud.\n4. Alexa cloud sends the message back to the physical unit to be spoken back to the user.\n\n### Creating the skill\nThe first thing to do is create a new Alexa skill in the Amazon Developer Console. You can do this by navigating to https://developer.amazon.com and pressing \"developer console\" near the top right.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_1.png\" alt=\"amazon developer console\" width=\"100%\" style=\"width:100%\"/>\n\nFrom here, you're going to click \"Alexa Skills Kit\" to bring you to the Alexa dashboard. Click \"Create Skill\" to start the process of creating a new skill.","metadata":{"id":572}}],["573",{"pageContent":"From here, you're going to click \"Alexa Skills Kit\" to bring you to the Alexa dashboard. Click \"Create Skill\" to start the process of creating a new skill.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_2.png\" alt=\"alex skills\" width=\"100%\" style=\"width:100%\"/>\n\nOnce you name your skill and select your language, click \"Custom model\" and then select \"Provision your own\" for the backend. Finally press \"Create skill\" at the top right of the page.\n\nAfter this it's going to ask about templates, just click \"Start from scratch\" then go onto the next page. Eventually you'll see the following page - this means your skill has been created!\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_3.png\" alt=\"alexa developer console\" width=\"100%\" style=\"width:100%\"/>\n\n### Invocation\nNext, we will set our invocation. On the left of the screen, click the invocation tab. Invocation is how you'll start your skill from your Alexa. For example, if your skill invocation name is \"Replit blog reader\", to open your skill you would say something like \"Alexa, open the Replit blog reader skill\". Once you have entered your skill's invocation name, click \"save model\" and \"build model\" at the top. This can take up to 30 seconds.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_4.png\" alt=\"alexa interaction model\" width=\"100%\" style=\"width:100%\"/>\n\n### Interaction Model\nClick \"interaction model\" and click \"intents\" from the left bar. According to the [official Alexa documentation](https://developer.amazon.com/en-US/docs/alexa/custom-skills/create-intents-utterances-and-slots.html), \"An intent represents an action that fulfills a user's spoken request\". In this case, we want to build a skill that gets a summary of the most recent blogpost on the [Replit blog](https://blog.replit.com).","metadata":{"id":573}}],["574",{"pageContent":"Each intent has its own set of \"utterances\". Utterances are spoken phrases that could trigger an intent. \"Get the most recent Replit blogpost\" and \"Get the Replit blog\" should trigger the same intent.\n\nCreate a new intent called `GetBlogIntent` and add the following utterances:\n- Get the most Recent Replit blog\n- Show me the Replit blog\n- Get the Replit blog\n- Replit blog\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_5.png\" alt=\"alexa GetBlogIntent\" width=\"100%\" style=\"width:100%\"/>\n\nMake sure to click \"save model\" and \"build model\" after you've added the intent.\n\n### Hosting in Replit\nTraditionally, if you want to create an Alexa skill, you have to host the code in an AWS Lambda. While this is an amazing service, Amazon also gives you the option to host your skill using your own webserver. We've found that it's incredibly easy to host Alexa Skills in Replit. You also get the benefits as Replit, such as ReplDB, always-on, and multiplayer. \n\nFirst, clone the [Replexa](https://replit.com/@soren/replexa) template in Replit.\n\nOnce you have the code open, you're going to want to grab your skill id from your list of Alexa skills. (Get to this menu by clicking \"your skills\" at the top right of the developer console.)\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_6.png\" alt=\"Alexa custom skill\" width=\"100%\" style=\"width:100%\"/>\n\nCopy that and paste it into the template where it says `YOUR_SKILL_ID`.\n\nThe last step in connecting your repl to your skill is getting the domain. You can copy it by running the repl and copying the domain.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_7.png\" alt=\"repl.co domain\" width=\"100%\" style=\"width:100%\"/>\n\nNow that you have your repl's domain, go to the \"endpoint\" tab in the amazon developer console. Change the service endpoint type from \"AWS Lambda ARN\" to \"HTTPS\". Paste your repl's domain into the default region.","metadata":{"id":574}}],["575",{"pageContent":"In the drop-down menu, select \"My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority\".\n(This is important)\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_8.png\" alt=\"service endpoint type\" width=\"100%\" style=\"width:100%\"/>\n\n### Add GetBlogIntent\nSince we added the `GetBlogIntent` in the developer console, we have to add an intent handler in our code. Navigate to the `intents.py` file. Each intent inherits from the `AbstractRequestHandler`. You must define both the `can_handle()` and `handle()` methods for every intent. Our new class will look something like this:\n\n```python\n# intents.py\n\nclass GetBlogIntentHandler(AbstractRequestHandler):\n  \"\"\"Handler for the get blog intent\"\"\"\n  def can_handle(self, handler_input):\n    return ask_utils.is_intent_name(\"GetBlogIntent\")(handler_input)\n  \n  def handle(self, handler_input):\n    # This is where we define the intent\n\n```\n\nIn addition to defining the intent, we also have to register the intent with the `SkillBuilder` object in `main.py`. Add the following line to main.py:\n\n`sb.add_request_handler(intents.GetBlogIntentHandler())`. \n\n`main.py` should now look something like this:\n\n```python\n# main.py\n\nfrom flask import Flask\nfrom ask_sdk_core.skill_builder import SkillBuilder\nfrom flask_ask_sdk.skill_adapter import SkillAdapter\nimport intents\n\nsb = SkillBuilder()\nsb.add_request_handler(intents.LaunchRequestHandler())\nsb.add_request_handler(intents.HelpIntentHandler())\nsb.add_request_handler(intents.CancelOrStopIntentHandler())\nsb.add_request_handler(intents.HelloWorldIntentHandler())\nsb.add_request_handler(intents.SessionEndedRequestHandler())\nsb.add_request_handler(intents.GetBlogIntentHandler()) # This is the one we just added!\nsb.add_request_handler(intents.IntentReflectorHandler()) # Register this intent last.\n\napp = Flask(__name__)\nskill_id = 'YOUR_SKILL_ID'\n\nskill_adapter = SkillAdapter(\n  skill=sb.create(), \n  skill_id=skill_id, app=app\n  )\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])","metadata":{"id":575}}],["576",{"pageContent":"app = Flask(__name__)\nskill_id = 'YOUR_SKILL_ID'\n\nskill_adapter = SkillAdapter(\n  skill=sb.create(), \n  skill_id=skill_id, app=app\n  )\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef invoke_skill():\n    return skill_adapter.dispatch_request()\n\napp.run('0.0.0.0', port=443)\n```\n\n### Implementing our new intent\nTo get the most recent blogpost, we'll use the `feedparser` library. Here's the code to get the most recent Replit blog:\n\n```python\n#intents.py\n\nimport feedparser\n\nclass GetBlogIntentHandler(AbstractRequestHandler):\n  \"\"\"Handler for the get blog intent\"\"\"\n  def can_handle(self, handler_input):\n    return ask_utils.is_intent_name(\"GetBlogIntent\")(handler_input)\n  \n  def handle(self, handler_input):\n    feed = feedparser.parse('https://blog.replit.com/feed.xml')\n    title = feed['entries'][0]['title']\n    summary = feed['entries'][0]['summary']\n    speak_output = f'The title of this blogpost is {title}. {summary}'\n\n    return (\n      handler_input.response_builder\n          .speak(speak_output)\n          .response\n    )\n```\n\n### Testing\nTesting Alexa skills is easy! Once you have navigated to your Skill in the Amazon Developer Console, click the \"testing\" tab. What you see now is an Alexa simulator pre-loaded with your skill. You can type into the console on the left, and it will respond exactly as an Alexa unit would.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/demo.gif\" alt=\"alexa demo gif\" width=\"100%\" style=\"width:100%\"/>\n\nYou can also check out [this](https://youtu.be/rN5e9Po4gHc) youtube video for a quick demo!\n\n### If you need help\nYou can reach out to me (Søren) on [Twitter](https://twitter.com/roodsoren) or shoot an email to soren@replit.com. I'll do my best to respond quickly!","metadata":{"id":576}}],["577",{"pageContent":"---\ntitle: \"Replit in Review: A Recap of What We Shipped in 2022\"\nauthor: The Replit Team\ndate: 2023-01-03\ncover: https://blog.replit.com/images/Replit-recap-header.png\ncategories: news\n---\n\n![Recap Header Image](https://blog.replit.com/images/Replit-recap-header.png)\n\nAs we work on game-changing features for 2023, we wanted to take a look back at the major things we shipped in 2022. Here are some highlights!\n\n## Shipping SZN 2022\n\n### Product\n\n[**(1/19) Teams Pro**](https://blog.replit.com/teamspro) - The Replit solution for companies and organizations. Private Repls. Team collaboration. Boosted performance. The future of cloud-based development. More to come in 2023.\n\n[**(2/28) Kaboom Draw**](https://blog.replit.com/kaboomdraw) - Kaboomjs, our innovative gaming programming language, is already surging in popularity, but we are constantly improving it. With Kaboom Draw, developers can now adjust images with a click & drag in Bret Victor style.\n\n[**(3/31) Search Replit**](https://blog.replit.com/search) - The scale of Replit is amazing. +100M Repls... and growing rapidly. What's even more amazing? Being able to search through ALL of them.\n\n[**(4/18) New Replit Profiles**](https://blog.replit.com/profile2) - Community is a core part of Replit. Developers all around the world, of all experiences, connecting over a common passion for building. Now, with profiles, you can add social, showcase your work, see who else is online, and much more.\n\n[**(6/1) Generate Code**](https://blog.replit.com/generate-code) - Tell the computer what you want. Have it generate code for you. A big step towards some of the amazing AI tools we're continuing to build. \n\n[**(6/2) New publish flow**](https://blog.replit.com/publishing) - We empower creators to build. We also empower creators to share. Replit is magical because you instantly have a group of developers to share your project with, that they can run in their browser. The new publish flow gives you more options in how you share your projects.","metadata":{"id":577}}],["578",{"pageContent":"[**(6/23) Replit Ventures**](https://blog.replit.com/RV1-Teams) - $10k for 12 teams. 5+ countries. Access to great mentors from other companies in Silicon Valley. Ending with a huge demo day to investors. An opportunity x`to help developers around the world build a business.\n\n[**(7/4) Domain Linking improvements**](https://blog.replit.com/improved-domain-linking) - Build and host your project on Replit immediately. Connect your custom domain to your project even faster. \n\n[**(7/15) Webview DevTools**](https://blog.replit.com/devtools) - A new Replit-native way to inspect and debug webpages from the Workspace.\n\n[**(7/27) Company Profiles**](https://blog.replit.com/company-profiles) - With new templates, profiles, Teams Pro, and the Community feed, Replit became an even better place for developer advocates to engage their audience. We launched with 19 verified company partners, including Twitter and Stripe.\n\n[**(7/29) Following Feed**](https://blog.replit.com/replit-famous) - Get Replit Famous. Gain followers and engage with your audience. Follow others and see what they build. The Creator's timeline.\n\n[**(8/2) Repl Identity**](https://twitter.com/amasad/status/1554590054537781250?s=20&t=Rs4baHGWWE4DvPBVDjU4WQ) - On Replit, you can build a project and immediately launch it to a community. But let's say you want to track high scores and get feedback from your users? Repl Identity lets creators offer their users 0-click authentication.\n\n[**(8/11) Tabs**](https://blog.replit.com/tabs) - With Tabs, you can open two files side-by-side, hide unused tools, or even open 10 different shells. Another step towards full Workspace customization. Your customizable computer in the cloud.\n\n[**(8/30) Heroku import flow**](https://replit.com/heroku) - Heroku removed their free tier this year (BOO!). So we made it easy for developers to migrate over. With just a few clicks you can bring your project to Replit.","metadata":{"id":578}}],["579",{"pageContent":"[**(9/15) History 2**](https://blog.replit.com/history2-release) - Version control changed forever. Rather than a series of versions, click and drag through file history to revert to any point in time and see who wrote what.\n\n[**(9/20) 100 Days of Code**](https://blog.replit.com/100-days-of-code) - Whether you've never written a line of code or you are just trying to polish your skills, Replit 100 Days of Code offers a free course to go from print(\"Hello World\") to dynamic Flask web apps. All of this teaching exists directly in the Workspace, so you do not even need to switch tabs!\n\n[**(9/21) Revamped GitHub import flow**](https://blog.replit.com/nix-github-imports) - GitHub is widely used, but files and templates on GitHub are static. In just a few clicks, you can import them to Replit and run them from your browser.\n\n[**(9/28) Splits**](https://blog.replit.com/splits) - With pane splits, you can completely customize your Workspace. Drag. Drop. Float. Whatever you want.\n\n[**(10/4) New logo**](https://blog.replit.com/new-logo) - New year. New look. We unveiled our new logo focusing more on the \"prompt.\" The prompt is a sign of an blank canvas and an opportunity to start creating.\n\n[**(10/13) Threads**](https://blog.replit.com/threads-v2) - Replit is the #1 place to collaborate with Teams. Threads allow for inline commenting like what you come to expect from Google Docs. But now you can do it in code!\n\n[**(10/13) Analytics**](https://blog.replit.com/repl-analytics) - Ever wonder how many people are accessing your project? Now you can check with Repl Analytics. Just add `/analytics` to your Repl's URL.\n\n[**(10/19) Mobile app**](https://blog.replit.com/mobile-app) - Coding should be available to everyone, everywhere. Many don't have access to a desktop computer. With the Replit Mobile App, millions globally can now code from their phone with the most powerful mobile coding environment known to date.","metadata":{"id":579}}],["580",{"pageContent":"[**(10/31) Ghostwriter**](https://blog.replit.com/ghostwriter) - Meet Ghostwriter. Your partner in code. We built and launched a full suite of AI tools, including Complete, Generate, Transform, and Explain Code.\n\n[**(11/6) Attach a GPU**](https://twitter.com/amasad/status/1589287339553357824?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - Using GPUs can be quite challenging. Now, you can one-click attach a GPU to a project in Replit! Currently available only to Explorers.\n\n[**(11/14) Status Manager**](https://blog.replit.com/repl-status) - Ever wondering which of your Repls are running at a given time? Now you can with the Replit Status Manager.\n\n[**(11/15) Bounties**](https://blog.replit.com/bounties) - Ever have an idea that either A) you do not have time to build or B) you may not know how to build? With Bounties, you can now hire a developer from the Replit community to build your project. Write your project specs and you'll get a Repl with the project in a runnable state.\n\n[**(11/17) Filetree**](https://twitter.com/Replit/status/1593293647344123904?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - The filetree is hugely important to the development process, so we shipped updates that 10x the experience!\n\n[**(11/30) New sidebar design**](https://twitter.com/amasad/status/1598104781678993409?s=20&t=Vrc68r898eg0Ab4hDw4w8A) - As we grow the suite of Replit features rapidly, we still want the Workspace to continue to be simple and accessible. The new sidebar design has more room for tools, apps, and soon, extensions.\n\n[**(12/12) Tipping**](https://twitter.com/giansegato/status/1602318257846947842?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - The Replit Community builds incredibly projects. Now you can show your appreciation by tipping these projects' creators!","metadata":{"id":580}}],["581",{"pageContent":"[**(12/22) Custom Themes**](https://twitter.com/Replit/status/1605957893106253824?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - One of our most requested features of all-time shipped a week ago: Custom Themes. Create a theme that fits your exact taste, or choose a fly design from fellow community members.\n\n[**(12/23) Cycles transaction history**](https://blog.replit.com/cycles-transaction-history) - Cycles allow you to quickly and seamlessly power up your projects. We wanted the billing experience to be completely transparent as well. The new transaction history gives you full visibility into what you spent your Cycles on and when.\n\n[**(12/23) SSH into Replit**](https://twitter.com/amasad/status/1606429084363665408?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - Work with Replit from your local environment. SSH into it from anywhere. This feature is in Beta, so stay tuned for more!\n\n\n### Infrastructure\n\n[**(1/11) Migrating from Heroku to GCP**](https://blog.replit.com/heroku2gcp) - It's not easy running 1M concurrent Repls across the globe. Now imagine migrating that entire infrastructure! To bring the next billion software creators online, this was something we needed to do to serve even more developers.\n\n[**(2/4) New Python Repl updates**](https://blog.replit.com/python-new-template) - Python is the most popular programming language on Replit. We changed the way we cache packages, making it way faster to boot any Python-based Repl.\n\n[**(2/11) File persistence**](https://blog.replit.com/filesystem-persistence-for-all) - In 2021, we offered file persistence for Hacker users only; this year, we expanded this to ALL hosted apps on Replit.\n\n[**(2/23) Powered by Nix**](https://blog.replit.com/powered-by-nix) - After a year of hard work, we fully integrated Nix into our platform. This was a critical migration, allowing Replit to support any and every programming language, and unlocking the ability for the community to create and manage templates for popular languages and configurations.","metadata":{"id":581}}],["582",{"pageContent":"[**(3/10) CodeMirror Migration**](https://blog.replit.com/codemirror) - To make Replit more extensible, we migrated our code editor from Monaco to CodeMirror. This contrarian bet has already paid dividends to the open-source community as we've built and open-sourced several CodeMirror extensions like Vim keybindings and Solidity language support. And its opened the door for community-built extensions in the future.\n\n[**(7/8) Controlplane**](https://blog.replit.com/geo-part-1-controlplane) - The Replit developer base is global. As a result, we are geo-distributing our infrastructure, so performance can improve for international developers. The first step to this was Control Plane. We landed (get it?) it mid-year, setting us up to build out a globally distributed network.\n\n[**(9/26) Load Balancer**](https://blog.replit.com/geo-part-2-loadbalancing) - In July, we landed (get it again?) Control Plane. That was Part 1 of geo-distribution. The Google Cloud load balancer, however, did not quite fit our needs... so we built our own! This dramatically improved machine utilization and Replit performance.","metadata":{"id":582}}],["583",{"pageContent":"---\ntitle: A Better Way to Search Your Repls\nauthor: Tim Chen\ndate: 2018-03-19T00:00:00.000Z\ncategories: product\n---\n\nAlong with the ability to star repls and tag repls, we now take repl organization one step further with the ability to search through your repls.\n\nYou can use the search function in your repls dashboard in a few ways:\n* by keyword\n* by title\n* by tag\n* by language\n\nPlease refer to the [search docs](/site/docs/repls-search) for detailed instructions on how to use it.\n\n![animation of searching repls](/public/images/blog/repl-search.gif)","metadata":{"id":583}}],["584",{"pageContent":"---\ntitle: Require Ruby Gems\nauthor: Amjad Masad\ndate: 2018-03-08T08:00:00.000Z\ncategories: product\n---\n\nOn the heels of our Node.js npm support [announcement](node_modules), we're pleased to announce that we now\nsupport Ruby [Gems](https://rubygems.org/) too. We're excited to have the Ruby\ncommunity join the fun.\n\nThe way it works is slightly different from our Node or Python\nimplementations. In Node or Python you simple require/import the module you'd\nlike to use, and we'll automagically install the package for you. In Ruby,\nunfortunately, we couldn't find a reliable way to map requires to Gems so we had\nto go with a neat feature of Bundler:\n[bundler/inline](https://gist.github.com/chrisroos/0ddf618ac711abe0f465) where\nyou can define your gemspec in the code. This works well for Repl.it because\nwe'd like to make it easy for people to use the repl without having to add files.\n\nHere is an example, this uses the gem `colorlize` to print an ascii drawing of the\nAmerican flag:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@amasad/Murica?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nWe're still working on improving this, look forward to the following the coming\ndays:\n\n- Per repl caching: install once, there forever\n- Gemfile support\n\n[Feedback](/feedback) welcome!","metadata":{"id":584}}],["585",{"pageContent":"---\ntitle: Our First Replit Ventures\nauthor: Søren Rood\ndate: 2021-07-06\ncover: https://blog.repl.it/images/rv0/cover.png\ncategories: ventures\n---\n\nOur first [Replit Ventures](https://blog.replit.com/ventures) was a tremendous success. \n\nSome of our teams were accepted into the best startup accelerators in the world while others had $1mm+ funding offers from top VCs.\n\n### Before The Program\nBefore joining Replit, [I](https://twitter.com/roodsoren) was working on [my fintech startup](https://blog.replit.com/blubbr), Blubbr. After a few small successes, Amjad reached out and asked me to write a guest blogpost (our product was built on Replit).\n\n<img src=\"https://blog.repl.it/images/rv0/image_1.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nWe then started brainstorming ideas about how we can help other startups on Replit. After I told him I wanted to take a gap quarter (I hated online school), he asked me if I wanted to join the team and help other startups go to market. This is how Replit Ventures was born.\n\n### Launch\nMy first day at Replit was April 5, 2021. We launched Replit Ventures on April 13th. I wrote a [blogpost](https://blog.replit.com/ventures) detailing the program and our [launch Tweet](https://twitter.com/Replit/status/1382015913394724864?s=20) went viral (Thanks Jack Dorsey for the RT).\n\n<img src=\"https://blog.repl.it/images/rv0/image_2.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nPeople were applying within minutes of the launch. Our application deadline was set for April 23rd. In only 10 days, over 400 teams had applied to the program.\n\n### Application Pool Diversity","metadata":{"id":585}}],["586",{"pageContent":"People were applying within minutes of the launch. Our application deadline was set for April 23rd. In only 10 days, over 400 teams had applied to the program.\n\n### Application Pool Diversity\nWe opened our application up _globally_. There were no limits on age, location, or timezone. (Bitcoin enables borderless and frictionless payments). Because of this, I think it's safe to say that we had one of the most diverse application pools ever seen in an incubator. Our applicants included both teenage hackers in India and Senior SWE's at FANG companies. (The younger entrepreneurs were always more innovative btw)\n\n<img src=\"https://blog.repl.it/images/rv0/submissions.gif\" alt=\"submissions\" width=\"100%\" style=\"width:100%\"/>\n\n### Picking Teams\nWe spent a lot of time picking the teams. This is one of those things that's \"more of an art than a science\". HUGE shoutout to [YK](https://twitter.com/ykdojo) for helping me go through all of the applications - this took a really long time. We selected 6 teams to join us: 5 startups and 1 nonprofit.\n\n- [Slip](https://slip.so) - Platform for building and selling programming courses\n- [Kobra](https://blog.replit.com/kobra) - Visual programming language for machine learning\n- [PetCode](https://blog.replit.com/petcode) - Smart pet tag for smarter pet care\n- [Nisawa](https://blog.replit.com/nisawa) - Fast and reliable delivery service platform based in Rwanda, Africa\n- [Execute Big](https://blog.replit.com/executebig) - Computer science education non-profit that makes learning fun\n- DogeMail - Innovative email client that uses Replit authentication (still building)\n\n### The Program Starts\nAfter our kick-off call, the teams got to work right away. We paired each team with 1-2 mentors and hosted weekly meetings with some incredibly inspiring people:\n\n- Tabish Gilani: Ex-Growth @ Google, Growth PM @ Replit\n- Sergei Chestakov: Ex-SWE @ Google, SWE @ Replit\n- Haya Odeh: Co-founder @ Replit\n- Austen Allred: Founder @ [LambdaSchool](https://lambdaschool.com)","metadata":{"id":586}}],["587",{"pageContent":"- Sergei Chestakov: Ex-SWE @ Google, SWE @ Replit\n- Haya Odeh: Co-founder @ Replit\n- Austen Allred: Founder @ [LambdaSchool](https://lambdaschool.com)\n- Roy Bahat: Head of [BloomBerg Beta](https://www.bloombergbeta.com)\n\n<img src=\"https://blog.repl.it/images/rv0/image_3.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nTeams usually met with their mentors once a week to discuss progress and go over any goals that they had.\n\n### Launch Week\nAfter only a month of hard work, some of the teams decided to launch their products to the world. Here are links to some of the launches:\n\n- [Kobra](https://www.producthunt.com/posts/kobra)\n- [Execute Big](https://www.producthunt.com/posts/tech-roulette)\n- [PetCode](https://www.producthunt.com/posts/petcode)\n- [Nisawa](https://blog.replit.com/nisawa)\n\n### Some Highlights\nWe can't share _all_ of the highlights just yet. There are a few VC deals still being worked out. ;)\n\n- [I tweeted about Kobra](https://twitter.com/roodsoren/status/1392247909874159617?s=20) on May 11th. The tweet performed well and the ML community got pretty excited. On the 13th, someone [posted about Kobra](https://news.ycombinator.com/item?id=27135573) on Hacker News and it was at the top all day.\n\n- During our program, PetCode was featured on [Forbes](https://www.forbes.com/sites/maryjuetten/2021/05/13/managing-pets-with-tech-crowdfunding-petcode/?sh=3007565978ce).\n\n- [Nisawa Blogpost](https://blog.replit.com/nisawa): \"Our set goal coming into Replit Ventures was to grow our weekly deliveries at 15% week over week i.e. from 96 to 167 weekly deliveries after four weeks. In the end, **we grew our weekly deliveries to 251 with an average weekly growth rate of 27.2% entirely through word of mouth.**\"\n\n- PetCode launched a brand new premium plan. 50% of their customers converted to paid subscription increasing lifetime customer value as well as average order value.","metadata":{"id":587}}],["588",{"pageContent":"- PetCode launched a brand new premium plan. 50% of their customers converted to paid subscription increasing lifetime customer value as well as average order value.\n\n- More than 800 participants signed up for Execute Big's [Tech Roulette](https://techroulette.xyz) (and rolling!), and among them 450+ are under 21. They come from 60+ countries around the world and covered 35+ states in the U.S.\n\n### What Now?\nBecause of the program's success, VC firms have reached out wanting to invest in the ventures program alone. It is possible that the next iteration of Replit Ventures is _very_ different. (more $ involved)\n\nWe're taking a short break to make the program better and work on other partnerships. Stay tuned for more details soon.\n\nIn the meantime, if you have any questions about how you can make your application as strong as possible for the next cohort, reach out to [Søren](https://twitter.com/roodsoren) on Twitter or email soren@replit.com. I'm always happy to chat and answer questions.","metadata":{"id":588}}],["589",{"pageContent":"---\ntitle: \"We Built a Search Engine\"\nauthor: \"Søren Rood and Lincoln Bergeson\"\ndate: 2022-03-31\ncover: https://blog.repl.it/images/search/results_page.png\ncategories: product, infra, eng\n---\n\nFor the past few months, we have been building a Replit-native search engine. It is remarkably powerful, and we are really excited for you all to try it out. **We believe that you should be able to find anything on Replit in less than 30 seconds.**\n\nThis might sound simple, but when you have 100 million+ Repls, it becomes complicated. :)\n\nWhen you search for something on Replit today, you'll see a page with relevant results from the following categories:\n- Repls\n- Templates\n- Code (yes, code)\n- Users\n- Community content (published repls, posts)\n- Our docs\n- Community tags\n\n<img src=\"https://blog.repl.it/images/search/results_page.png\" alt=\"search\" width=\"100%\" style=\"width:100%\"/>\n\n### Why we built it\n\nWe think that being able to search for stuff is important. Searching can help you find inspiration, discover other users, and even learn how to code.\n\nPrior to this update, there was no effective way for users to find anything on Replit. You could only search through the names of Repls that you owned. Even then, you had to type the exact string match to get any results.\n\nWe have known for a while that the search experience needed to be updated, but for much of last year we focused on more critical projects. (Workspace stability, abuse, etc.)\n\nAside from our team's general dissatisfaction, there were a few other signals that prompted us to fix the search experience:\n\n1. qualitatively, people complained about the lack of functionality in surveys and interviews.\n2. quantitatively, 80%~ of users that navigated to search ended up dropping off entirely. They weren't able to find what they were looking for. Retention for this feature was also significantly lower than other features.\n\nIn building this, we hope to give everyone tools for the self-led discovery of all different types of content on Replit.","metadata":{"id":589}}],["590",{"pageContent":"In building this, we hope to give everyone tools for the self-led discovery of all different types of content on Replit.\n\n### How we built it\n\nA search engine has a few different components:\n\n- A web frontend where users type their queries and see results\n- A server backend that receives requests from the frontend and serves responses\n- The actual search engine that indexes documents and executes search queries\n- Data pipelines for creating and updating search indexes\n\nThe first two were relatively straightforward. We built the search page like we build every other page on Replit: in Typescript, with a Next.js (React) frontend and an Express backend, with GraphQL as the API layer in between.\n\nThe other components were a little more complicated, since we haven't done anything like this at scale before.\n\nA few other small search features on the site such as the community search box were built with [the Sphinx library](http://sphinxsearch.com/). This was simple to set up at the time with some custom infrastructure to support indexing and executing queries. However, this setup hasn't aged well, and we weren't comfortable expanding it to vastly larger datasets.\n\nAfter looking through our options, we settled on Elasticsearch because of its stability, supporting libraries for big data ingestion, and the large community that has battle-tested it in production setups over the years.\n\nFor the data pipelines we use Apache Spark. These are high-throughput jobs that run on clusters of many machines at once. The details of how these jobs work is worth a post on its own, but broadly speaking they take data from other locations (the BigQuery data warehouse, Google Cloud Storage, etc), process them into search documents, and bulk upload to the Elasticsearch cluster.","metadata":{"id":590}}],["591",{"pageContent":"We're working on scaling these big data jobs even further. For example, our code search supports searching through the contents of published repls. In the future, we'll expand this to every file in every repl. You'll be able to find even more working code results and sample code to learn from.\n\n### What's next?\n\nOn March 31st, we released search to 100% of users.\n\nIf you helped with any early prototypes, participated in any user interviews, or were a part of the explorer beta, we want to say thank you! We could not have made it this far without your help.\n\nIf you'd like to leave feedback on the new search experience, please leave a comment on [this](https://replit.com/@util/Search-20-Feedback?c=212850) Repl. We're open to any and all types of feedback.\n\nIf this project seems interesting to you, consider checking out our [careers](https://replit.com/site/careers) page. :)","metadata":{"id":591}}],["592",{"pageContent":"---\ntitle: \"Fluid layout customization with Splits\"\nauthor: Tyler Angert and Moudy Elkammash\ncategories: product\ncover: \"https://blog.replit.com/images/splits/cover.jpg\"\ndate: 2022-09-28T19:06:40.000Z\n---\n\nA few weeks ago we released [Tabs](https://blog.replit.com/tabs), which allowed people to open up different files and tools you want, side by side. But the Workspace’s overall layout was still pretty static: you can *only* open things side by side, with no way to remove panes or quickly rearrange what you're focused on. That's changing today!\n\nWith **splits**, you can completely customize the layout of the Replit Workspace. This might not seem like a big deal, but it unlocks a lot of new possibilities for templates and makes Replit more accessible for both novices and experts.\n\n![Splits demo](images/splits/main-demo.gif)\n\n## How it works\n\nWhen you drag and drop a tab or pane over another pane, you have **five** primary hit areas: The header of every pane, and the top, right, bottom, and left \"quadrants\" of the pane. Our drag and drop logic actually uses conical sections to make dragging more ergonomic.\n\n![Drag and Drop area diagram](images/splits/drop-area-diagram.jpg)\n\nDropping directly onto one of the primary quadrants will split the pane, and dragging tabs or panes into the header will merge their tabs together into one large pane.\n\nIf you click the `...` menu in the corner of any pane, you'll see all of these options available here:\n\n![Context menu](images/splits/context-menu.jpg)\n\nYou'll also see `Maximize` which makes the pane take up the entire size of the Workspace, and `Float` which lets you move around a pane completely freely. To get back, you can click `Unfloat`.\n\n### Dragging tabs\n\n![Dragging tabs](images/splits/drag-tab.gif)\n\nWhen you drag a tab, only the tab itself is moved. When dropped onto a quadrant of another pane, that tab becomes its own pane as well.\n\n\n### Dragging panes\n\n![Dragging tabs](images/splits/drag-pane.gif)","metadata":{"id":592}}],["593",{"pageContent":"When you drag a tab, only the tab itself is moved. When dropped onto a quadrant of another pane, that tab becomes its own pane as well.\n\n\n### Dragging panes\n\n![Dragging tabs](images/splits/drag-pane.gif)\n\nYou can move entire panes around at once, not just tabs. This should feel pretty similar to how browser tabs and windows feel.\n\nWhen you have one tab left in a pane, that tab is treated like a handle for the entire pane. Dragging the tab will move the entire pane.\n\nDeleting the last tab will also remove the pane from layout.\n\nThere's a minimum drag radius of 50px to detach a pane \"out\" of the layout so you can rearrange it.\n\n![Dragging tabs](images/splits/drag-radius.gif)\n\nThis is useful for a few reasons. Mainly, it helps you understand exactly how the layout will change with the pane you're dragging.\n\nSecondly, it makes dragging mistakes easy to reverse: since other panes automatically fill up the remaining space in layout once a pane is removed, \"undoing\" an accidental drag means just dropping that pane right where you left off.\n\n\nThis also means switching two panes is as easy as picking one up and moving it to the other side.\n\n\n### Dragging from the filetree\n\n![Dragging tabs](images/splits/drag-filetree.gif)\n\nYou can also drag files from the filetree directly onto panes or headers. They share the same behavior as tabs.\n\n### Floating panes\n\nLastly, you can actually escape splits entirely and \"float\" panes if you want to.\n\n![Splits demo](images/splits/float-pane.gif)\n\n### Adding new panes\n\nYou can also add new panes to the workspace in other ways, without explicitly dragging and dropping.\n\n- Files context menu: if you click on the `...` menu on files, you can either open them in a `open tab`, which will add a tab to your last focused file pane, or you can press `open pane`, which will add a completely new pane from the left with that file loaded.\n\n- Filetree context menu: you can add new, empty panes from the `...` menu in the filetree.","metadata":{"id":593}}],["594",{"pageContent":"- Filetree context menu: you can add new, empty panes from the `...` menu in the filetree.\n\n- Tabs: you can also just create a new tab on any existing pane and then drag and drop it wherever you want.\n\n----\n\n## Motivation and Design Principles\n\nThe motivation for extremely flexible layout customization is simple: **people think and work in different ways**, and their working styles are often reflected in how they organize their screen.\n\nConcretely, we had two core constraints that helped guide our design process:\n\n**1. Keep the novice experience simple** while opening up customization for power users.\n\nThe great part about this update is that our default layout is still simple and made for beginners. Most apps negatively impact the novice exprience with extra customizablity, and conversely, negatively impact power users by oversimplifying.\n\nBefore we had splits, we had to hard-code specific layout configurations for different templates and use cases and they'd be incredibly hard to change. Now, any layout configuration can be setup in Replit itself, and we can just publish and update new templates. Easy peasy.\n\nFor example, we can more easily launch design bespoke environments, like our [100 Days of Code](https://blog.replit.com/100-days-of-code) setup that uses the new floating panes for a picture-in-picture tutorial. We can make a Kaboom game development environment with multiple files and debugging panes open, or a Next.js template with multiple routes preloaded.\n\nFurther, this makes it much easier to experiment with different features inside the Workspace. You can open up any tools, anywhere, and remove things you don’t need when you need to focus.\n\n**2. Innovate on top of existing patterns**","metadata":{"id":594}}],["595",{"pageContent":"**2. Innovate on top of existing patterns**\n\nThis is easier said than done. We made a lot of prototypes, but ultimately we landed on a variation of traditional [tile-based windowing](https://en.wikipedia.org/wiki/Tiling_window_manager). We wanted to make something that felt familiar to existing programming environments but improved significantly on core interaction details. \n\n---\n\n**So, what makes this better than other window management systems and IDEs?**\n\nWell, we are obviously standing on the shoulders of giants, inspired by everything from freeform canvas apps like [Figma](https://help.figma.com/hc/en-us/articles/360041064814-Explore-the-canvas), to [notebooks](https://jupyter-notebook.readthedocs.io/en/stable/ui_components.html), and, of course, the humble [floating window](https://en.wikipedia.org/wiki/Stacking_window_manager). If you want a good overview of the primary flavors of window managers, check out this [wikipedia page](https://en.wikipedia.org/wiki/Window_manager).\n\nBut we think this is signifcantly easier to use than traditional floating systems and most tiling window managers because, at the end of the day, it just **feels really fast and easy**. There's less busy work to actually get to the layout you want than most tools. We emphasized the following concepts during our process:\n\n**Predictablity**\n\nMaking a system predictable means you can, well, easily predict what it'll do. But how do you actually do that? \n\n*Focus on explicit state visualization.*\n\n- Wherever your mouse is, you should always know what \"state\" you are in– are you dragging? Did you just stop dragging? Are you about to drag?\n- Whatever “hidden” rules there are– show them. For example, the \"detach preview\" shows you how far you need to drag a pane to detach it and place it somewhere else.\n\n*Have as few special cases as possible.*\n- All tabs and panes share the same core layout behaviors, no matter what.","metadata":{"id":595}}],["596",{"pageContent":"*Have as few special cases as possible.*\n- All tabs and panes share the same core layout behaviors, no matter what.\n- Whenever a webview or VNC viewer is created automatically, they'll get placed into the `top-right` corner of the workspace, no matter what. This makes any kind of dynamic behavior predictable without messing up the primary panes in your layout.\n- This is part of one of our principles that \"explainable > magical\".\n\n*Provide immediate visual feedback.*\n- All panes immediately start changing size as you drag them and all drop target areas are clearly highlighted.\n\n*Make actions easily reversible.*\n- We're still working on complete undo/redo, but it's still easy enough to rearrange panes that making mistakes is low-stakes.\n\n*Use direct manipulation.*\n- It should feel like you are actually moving the parts of the workspace around. When you're dragging a pane around, you are doing just that– dragging the pane. It isn't a preview.\n\n**Learnability**\n\nGreat interfaces are *learnable.* You either recognize how to use them based on other interfaces you're familiar with (pattern matching), or you can easily learn new interactions by playing around (discovery). You want enough familiar behavior that you can hook people into trying something new, but you also want to innovate and create new ways of working.\n\nJust like how babies play with toys and blocks to gather an intuitive sense for real world physics, we should expect people to play and poke around with the Workspace UI to figure out how it works. Of course, some information dense features will need explicit guides and docs, but we should never rely primarily on textual descriptions (like tours) to explain how the Workspace works.","metadata":{"id":596}}],["597",{"pageContent":"We specifically didn’t focus on intuition as a goal because it’s vague and non-descriptive. How do you measure \"intuition\"? Usually when people say an app is intuitive, they talk about it \"just working\" or \"making sense\". But how does it make sense? Usually because it works just like other interfaces they’re familiar with, or it's easy to learn. Familiarity and learnability, however, are more easily measurable and comparable. Ultimately, *intuition is a function of learnability*.\n\n**Fluidity**\n\nOur drag and drop behavior is fluid and interruptible. If you start dragging a pane around, you can always let go and it’ll return to either its original position, or dropped over its new target. As you drag panes, they continuously shrink until they are detached from the layout.  Once you drag a pane outside of the minimum drag radius, the radius visualization transforms into the drop preview. When panes automatically resize or insert, they animate into place. When put together, these things might not even be noticable, but that's the point: make it feel like the Workspace understands your intent, and lets you easily change your mind. We were heavily inspired by Apple's WWDC talk on [Fluid Interfaces](https://developer.apple.com/videos/play/wwdc2018/803/).\n\nAnother key part of fluid interfaces is how fun it is to play around with, or its **[fidget factor](https://twitter.com/tylerangert/status/1544401943417716737)**. High fidget-factors (HFF) reward play: not only is it fun, but its a core part of *discovery*. The more you just poke around the Replit UI because its fun to see things move on your screen, the more you'll discover about Replit's features along the way.\n\nIn a way, creating this sytem was a lot like figuring out the “physics” of the workspace. It's the behavior of our core objects on screen. And just like the physical world, as mentioned, play and experimentation are extremely important for learning how systems work. Fluidity is a prerequsite for learnability.","metadata":{"id":597}}],["598",{"pageContent":"## Engineering Challenges\n\nThe main issue here is that we are ultimately building on the web, which means we have to work within the constraints of the DOM and React, more specifically. React isn't optimized for smooth, continuous interactions that you'd expect from touchscreen devices, so a lot of extra work was put into managing the rendering life cycle to make sure we could get fluid transitions between states (like starting to drag, dragging, and ending a drag).\n\nWe use [jotai](https://jotai.org/), which lets us deliberately ignore  rerenders while updating dragging state, for example. We also did *not* use any predefined window-tiling libraries or grid systems, and instead wrote custom, low-level mouse-event handler logic to make sure we could have full control over the sensitivity of mouse movement, like visualizing the minimum drag radius.\n\nWe also had to do a large refactor of our core data structure for storing and serializing layout. Under the hood, Splits are represented as a Multi-Node tree. This is important to understand how panes are grouped together because it has a direct influence on resizing UX. Think of it like this: if you keep splitting panes in the *same direction*, those newly added panes will be added as children. The moment you create a split on one of those children in the *opposite direction*, a split is added as a child.\n\n```typescript\ninterface Split {\n  stacked: boolean;\n  children: Array<PaneGroup | Split>;\n}\n\ninterface PaneGroup {\n  panes: Array<PaneId>;\n  percent: number;\n  activeIndex: number;\n}\n```\n\n\nThis data structure refactor also made it easier to create simple heuristics for dynamic panes, like: **always put a webview in the top right corner**. We can search for the top-right most node in the tree. This algorithm will always add webviews to the layout like this:\n\n![Top-right rule](images/splits/top-right-rule.jpg)","metadata":{"id":598}}],["599",{"pageContent":"![Top-right rule](images/splits/top-right-rule.jpg)\n\n\nTo read more about our choice of data structure and its influence on UX, please check out [Faris’s article on Leaky UIs](https://blog.replit.com/leaky-uis).\n\n## Future improvements and research\n\nThis is just the first major release and many more features are coming soon, which include but aren't limited to:\n\n- [Natural language interaction](https://twitter.com/amasad/status/1574426676477452288): integrating layout customization and Workspace automation with our [productionalized LLMs](https://blog.replit.com/llms).\n- A layout query API to automate actions\n- Keyboard shortcuts\n- Shared layouts: being able to observe someone else's full workspace movements, not just their cursor in a file.\n- Layout undo / redo\n- Layout copy and paste: being able to \"copy\" a bunch of tabs or panes and paste them into other panes to merge.\n- Layout deeplinks\n- Better and more deeply integrated floating-pane support\n- Exploration of freeform, canvas based coding\n- Replit native notebooks\n- Saved layouts\n- Integration of layouts into history\n- Sound effects, obviously\n\nThere's a lot to explore here, but hopefully this first release makes Replit feel more powerful and useful to you.\n\n<style type=\"text/css\" rel=\"stylesheet\">\n\timg {\n\t\tborder-radius: 8px !important;\n\t}\n</style>","metadata":{"id":599}}],["600",{"pageContent":"---\ntitle: A Swift REPL\nauthor: Amjad Masad\ndate: 2016-06-14T07:00:00.000Z\ncategories: product\n---\n\nIn this age of containers it's much easier to run arbitrary code\nin the cloud. The harder parts are scaling the service, making it reliable, and\n—as in this case— creating cool and useful experiences. When we looked at\nexisting Swift REPL implementations on the web we found that none\ndelivered a stateful and interactive environment. Just an editor with a run\nbutton.[](preview end)\n\nAs for us, as much as possible, we try to create an environment similar to\nthe original inspiration for our website: DrScheme (now [DrRacket](https://racket-lang.org)).\n\n![racket](https://i.imgur.com/dQZ0Jxk.png)\n\n![repl.it](https://i.imgur.com/xRLWGYy.png)\n\n_(I cheated a little bit to make them seem more similar by using repl.it's\npreferences (⋮) to make the environment stacked as opposed to the default which is side-by-side)_\n\nYou code in the editor, hit run, and the\ninterpreter will run your code, and then drop you in the console to interact with\nthe resulting environment. The next time you hit run your code will be evaluated in a fresh\nenvironment.\n\nToday we're excited to announce the beta release for our Swift REPL that we're\nhoping will work in the same way we outlined above.\n\n![swift](https://i.imgur.com/JthbWsS.gif)\n\nTry it here: [repl.it/languages/swift](https://repl.it/languages/swift)\n\nExecute your code, and then you get to interact with it in the console. Call\nfunctions you defined, change variables, and do as you please. Next time you\nhit run you're loaded with a fresh environment.\n\nWe hope you find this useful. Let us know what you think and follow us on [twitter](https://twitter.com/replit)!","metadata":{"id":600}}],["601",{"pageContent":"---\ntitle: Replit Teams for Education is Leaving Beta!\nauthor: Patrick Coleman\ncover: https://blog.repl.it/images/teams_edu/teamscover.png\ndate: 2021-03-02\ncategories: edu\n---\n\n**Edit: As of March 2022, Teams for Education is free for all educators. You can gain access [here](https://replit.com/teams-for-education).*\n\nAt Replit we believe that computers give people superpowers. With computers, anyone who's willing to learn can spend more of their time on creative invention rather than tedious drudgery. They help us automate repetitive tasks and build on the collective knowledge of all the great thinkers, inventors, artists, and teachers who came before us. \n\nComputer science teachers around the world are bestowing these superpowers upon the next generation of creators and builders. We built [Replit Teams for Education](https://repl.it/teams-for-education) for them, and today we're officially taking Teams for Education out of beta. \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/wgl_ERg23O4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Sign up for a free trial](https://repl.it/teams-for-education) if you haven't already!*\n\nThank you teachers for beta testing Teams, for giving us invaluable product feedback, for helping one another out as part of a vibrant and diverse community of Replers, and for being a part of the history of computers.","metadata":{"id":601}}],["602",{"pageContent":"William Gibson is famous for saying way back in 1992, that \"the future is already here – it's just not evenly distributed.\" If we asked you a year ago, you may have said we were already living in the computer age, or even that we had been for decades. But then in early 2020 COVID-19 happened and everything went \"remote\" and we all took a collective leap even further into the future. Today it's more obvious than ever that for children (and adults!) to participate in the riches of the new economy, they need to be able to design, control, and program the machines that we all use all day, every day.\n\nOn this vision to build powerful & approachable tools that expand access to computing superpowers, Replit raised a [$20 million Series A](https://blog.repl.it/seriesa) at the start of 2020. We're using the funds both to make learning more engaging for teachers and students and also to make work more fun and creative for professional software developers. We believe that the same things that make programming easier for beginners will also unlock productivity for experts. And when students know that they aren't just in a sandboxed, toy environment, but instead can use real-world tools and collaborate in real-time with their peers, they'll learn better.\n\n![replit multiplayer art](https://blog.repl.it/images/teams_edu/multiplayerart.png)\n\nWe've been working towards this vision since Amjad and Haya started Replit in 2016. And the initial beta release of Teams for Education over the summer of 2020 was a major step forward in that direction. From the start, early adopters like Toni loved the real-time multiplayer collaboration with their students, seeing how Replit could transform their classrooms.","metadata":{"id":602}}],["603",{"pageContent":"<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@replit</a> absolute game changer for coding. Supports so many languages, easy to use. My favourite feature is multiplayer option! My must have tool for coding.</p>&mdash; Toni Scullion (@ScullionToni) <a href=\"https://twitter.com/ScullionToni/status/1328364755657121794?ref_src=twsrc%5Etfw\">November 16, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\nBut there was much more to do before Teams would be ready to graduate from beta. We listened to our teachers. Then we rolled up our sleeves and started building fast:\n- [privacy compliance](https://blog.repl.it/education-privacy) (FERPA, COPPA, GDPR, and more)\n- [code annotations for feedback](https://blog.repl.it/annotations-for-education)\n- [group projects](https://blog.repl.it/group-projects-teams-education)\n- simplified pricing\n- [feedback workflow improvements](https://blog.repl.it/teams-for-edu-fall-2020-improvements)\n- [stability improvements](https://blog.repl.it/how-far)\n- [input/output autograding](https://blog.repl.it/input-output-tests)\n- [graphics improvements](https://blog.repl.it/fix-gfx)\n- [better project organization](https://blog.repl.it/teams-education-january-update)\n- [project sharing](https://blog.repl.it/teamsforedu-01-22-2021) \n- [built-in unit tests for Java, Python, and Javascript](https://blog.repl.it/unit-tests)\n- project overview and reporting\n\nAnd we're going to keep on shipping! In the coming days and weeks, look out for live handraising to get help, project due dates, easier billing and team organization, major updates to annotations (now called threads), and more. If there's something else you want us to build, [let us know](https://replit.canny.io/teams-for-education)!\n\n![threads](https://blog.repl.it/images/teams_edu/threads.png)","metadata":{"id":603}}],["604",{"pageContent":"![threads](https://blog.repl.it/images/teams_edu/threads.png)\n\nThanks again to everyone who's been teaching with Teams for helping us set the product direction. There's still more to do, but Teams for Education has finally reached a point where we're proud to officially release it. We're excited to keep hearing success stories from teachers like Michele and Pete.\n\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">It. Will. Change. Your. Life. Teams allows you to create a repl, automatically forks it for each student or group, and you never lose access. In breakout rooms or the classroom, I can see what each kid/group is working on in real time and pop in when I need to</p>&mdash; MicheleLombardi (@Lombardi_M_) <a href=\"https://twitter.com/Lombardi_M_/status/1362464185842618370?ref_src=twsrc%5Etfw\">February 18, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">I have been using teams with my 9 Higher pupils this week and it is a game changer - especially when remote coding. The ability to drop in and out of their projects is a game changer. I have also bought my own personal sub to be able to keep projects private.</p>&mdash; Pete Graham (@Petergra) <a href=\"https://twitter.com/Petergra/status/1358117048505802758?ref_src=twsrc%5Etfw\">February 6, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":604}}],["605",{"pageContent":"But it's not just these couple teachers. In the past 7 months of the beta, we've reached ~1,000 paying Teams customers (and thousands more currently on free trials). We're serving elementary schools, high schools, colleges and universities, bootcamps, nonprofits, and every type of educational institution. And the schools using Replit are incredibly diverse with over 30% majority minority and over half with >45% of their students on free or reduced-price lunch.\n\nWith so much collective brainpower and experience across our community, we're working hard to connect teachers to one another to share best practices. If you haven't already, [join Repl talk](https://repl.it/talk/all) and [our teachers' group on Facebook](https://www.facebook.com/groups/replitforcseducation). We'll be attending the [SIGCSE conference](https://sigcse2021.sigcse.org/) in March and would love to see you at [our presentation](https://repl.it/sigcse2021). We'll be at [CSTA](https://www.csteachers.org/page/csta-2021) over the summer as well. More details to come. We'll be resuming \"office hours\" (video call sessions with our team) in the coming weeks and sending a survey to ask your time preferences. And to help us out on all these fronts, we'll soon be adding another teacher from the community to our team. \n\nFinally, the Replit team is doing a book club, and we'd love to have you join. We're reading [\"The Friendly Orange Glow\"](http://friendlyorangeglow.com/), which tells the story of programming education and early cyberculture from the 1960s through the early 90s. If you'd like to read the book and join our next conversation, just email patrick@repl.it and I'll send you the details!\n\nIt's been an exciting journey building Teams for Education, and there's so much more to come. You can [learn more and sign up for a free trial here](https://repl.it/teams-for-education). Happy coding!","metadata":{"id":605}}],["606",{"pageContent":"---\ntitle: Teams for Education, Fall 2020 Updates\nauthor: Arnav Bansal and Derrick McMillen\ncover: https://blog.repl.it/images/teams_edu/replitroom.png\ndate: 2020-11-19\ncategories: edu\n---\n\n**Edit: As of March 2022, Teams for Education is free for all educators. You can gain access [here](https://replit.com/teams-for-education).*\n\nThis Fall we will be shipping a series of small and large improvements to the Teams for Education product. We are laser-focused on making Repl.it the best solution for learning how to code; especially during extended periods of distance learning.\n\n## Easy Grading and Feeback Using Project Switcher\n![Teams for Education Editor Pane](https://blog.repl.it/images/teams_edu/edu_pane.gif)\n\nGrade projects faster with our new Project Switcher! Instead of tediously clicking \"View Submission\" for every student, you may now view, leave feedback, and annotate student project submissions without leaving your workspace. \n\nYou can also use the Project Switcher to seamlessly navigate between Projects. We hope this helps relieve some anxiety while rushing to submit grades before the end of the semester!\n\n\n## Bulk Invite Students via CSV File\n\n![CSV file upload](https://blog.repl.it/images/teams_edu/csv_invites.gif)\nInvite all of your students to your Team at once by uploading a single CSV file. No need for students to have a Repl.it account beforehand - just provide their email addresses.\n\n\n\n## Student Project Perma-Links\n![student project perma-links](https://blog.repl.it/images/teams_edu/stu_perma_links.gif)\nAssign projects quickly using permanent student links to Team Projects. Only students who are part of your Team will be able to use your project perma-link. This improvement will make it more efficient to share links within your existing LMS.\n\n\n\n## Looking Ahead\n\nThat's not all! We have several exciting things arriving before the end of 2020:\n\n- Code-free input/output test authoring and autograding\n- A better onboarding experience for teachers","metadata":{"id":606}}],["607",{"pageContent":"## Looking Ahead\n\nThat's not all! We have several exciting things arriving before the end of 2020:\n\n- Code-free input/output test authoring and autograding\n- A better onboarding experience for teachers \n- Webinars and training on Teams for Education\n- Snazzy new Teams profiles\n\n\n## Giving Feedback Goes a Long Way\n\nTeachers continue to express their enthusiasm for multiplayer Repls, annotations, and group projects. We will continue to build on these new platform features to provide a seamless collaborative experience for project based learning. \n\nAre you dreaming of Repl.it features to make you a superhero in your classroom? We want to hear about it! Contact [Derrick McMillen](mailto:derrick@repl.it) directly via email. You can also leave feedback for us [via Canny](https://replit.canny.io/feedback/p/teams-beta-feedback).\n\n![dreaming](https://media.giphy.com/media/fgopKB1UvEA/giphy.gif)\n\nLearn more about *Teams for Education* in our [documentation](https://docs.repl.it/Teams/Projects).","metadata":{"id":607}}],["608",{"pageContent":"---\ntitle: Classroom is Transitioning to Teams for Education\nauthor: Patrick Coleman\ndate: 2020-09-29T07:00:00.000Z\ncover: https://blog.repl.it/images/teams_edu/replitroom.png\ncategories: edu\n---\n\n*Edit on Thursday, November 12:*\n*We've prolonged the Classroom deprecation date to 1/31/2021 to give teachers whose fall classes carry over into the new year extra time to transition.*\n\n*Edit on Friday, October 2:*\n*You can now ***migrate your Classroom assignments to a free Team*** by [clicking on this link](https://repl.it/classroom-migration) and choosing which Classrooms to migrate. [Check out these helpful resources](https://teamsforeducationresources.obaidaa.repl.co/) to get the most out of Teams.*\n\n*Unit tests, matching tests, model solutions, submissions, students, and TAs will not being migrated at this time. You can easily reinvite students in a FERPA/COPPA/privacy compliant way by [following these steps](https://docs.repl.it/Teams/privacyFAQs). The new Team will be free for 4 months and soon we’ll be sharing “financial aid” (i.e. free team) options for the spring for those with budget difficulties as well. Those who can pay now will be able to lock in a lower rate. [Student data and work can also be exported](https://docs.repl.it/classrooms/exports) from your Classroom by following these steps.*\n\nToday our legacy Classroom product experienced an outage, and there were multiple outages last week as well. We have been working incredibly hard, missing sleep and working weekends trying to keep the Classroom product up, but we are realizing now that we won’t be able to maintain smooth service on Classroom moving forward.","metadata":{"id":608}}],["609",{"pageContent":"We have not been marketing or promoting Classroom, but it has been growing on word of mouth alone. Classroom and the core Repl.it platform are on separate codebases. We have not actively improved Classroom since 2017. Since then, we have been continually improving the core Repl.it platform. Although we have been planning the transition for a long time, we have spent millions of dollars in hosting and maintenance costs keeping Classroom up to not disrupt students and teachers who depend on it. We won’t be able to keep doing this.\n\nIn June, we [announced that we were going to release Teams](https://blog.repl.it/teams-for-education), a new product built on top of the core Repl.it platform, so educators can take advantage of everything we have built since 2017.\n\nWith Teams, you can use [live multiplayer repls](https://repl.it/site/multiplayer) with Zoom breakout rooms. You can grade your students’ work with automated unit tests (right now you can build/fork [simple](https://docs.repl.it/Teams/SimpleAutograding) & [fully automated](https://docs.repl.it/Teams/CentralizedAutograder) autograders, and autograding should get easier in the future with product updates). You can leave feedback with [Google docs-style comments](https://blog.repl.it/annotations-for-education) directly in-line in your students’ code. You can add PDF, markdown, or other files to repls to give students instructions. You can still [embed repls](https://docs.repl.it/repls/embed) in your LMS. And support for group projects is also coming very soon.\n\nPlease [answer this 1-question survey](https://docs.google.com/forms/d/e/1FAIpQLSfDJu85xxaZWUPdYTPNkNDTTOv8SwUkxp3iN0Bno1k8yXRAgg/viewform) to let us know what else you'd like to see in Teams.\n\nWe've also simplified Teams pricing to $35/team/month or $350/team/year (2 months free) with an unlimited number of students. And there are more billing improvements on the roadmap.","metadata":{"id":609}}],["610",{"pageContent":"We've also simplified Teams pricing to $35/team/month or $350/team/year (2 months free) with an unlimited number of students. And there are more billing improvements on the roadmap.\n\nWe had planned to slowly phase out Classroom this academic year while giving teachers ample time to transition to Teams or other services. In retrospect, that was a mistake. We knew that Classroom was not in the best shape, and we had a sneaking suspicion that it might not scale well. Nevertheless, we decided to do our best to keep the product up-and-running. \n\nUnfortunately and despite not accepting new Classroom customers since August, Classroom grew past our projections, past a breaking point where it’s now bringing down the whole site. This is due to flaws in the legacy code that will not impact the core Repl.it platform once we have transitioned. Classroom makes up less than 5% of our active user-base, yet it’s disrupting Repl.it for everyone. \n\nHere’s what we are planning to do:\n\n**We will give you the product for free** for the remainder of the semester because the last thing we want to do is to add unnecessary stress to find a new solution when so much else is changing in the world. There will be options for “financial aid” (i.e. free/reduced pricing) after this semester.\n\nWe are planning to release migration tools tomorrow (or as soon as we possibly can) and we encourage everyone to migrate. Right now, it’s best to assume that Classroom won’t return to running smoothly, but we will do our absolute best to keep it floating, if only to migrate your materials.\n\nThese are not easy times to be teaching, and the work all of you are doing is essential and valuable. Once again, thanks for using Repl.it and sticking with us through this transition. And thanks for educating the next generation of coders!\n\nAmjad\nCEO & Founder\ncontact@repl.it \n\nP.S. Here is a [growing list of resources](https://teamsforeducationresources.obaidaa.repl.co/) to get the most out of Teams.","metadata":{"id":610}}],["611",{"pageContent":"---\ntitle: Template Jam 2022\nauthor: Replit Team\ndate: 2022-05-16\ncover: https://blog.repl.it/images/template-jam/cover.jpg\ncategories: events \n---\n\nSince we introduced [templates](http://replit.com/templates), many of you have asked to get in on the action. We have some amazing community templates already, but we want to get everyone involved.\n\nWe've been hard at work revamping both the templates page and publishing flow so that everyone can create and publish a template. We're rolling this out over the next week, so keep your eyes peeled!\n\nTo celebrate this new release, on May 23rd, we're bringing Template Jam [back](https://replit.com/talk/announcements/template_jam-EXTENDED/33491). This time there will be $10,000 USD in prizes and you'll have the power of [Nix](https://blog.replit.com/nix) behind you. \n\nWe're excited to see all the wonderful templates you create, and brand new ways for people to create on Replit.\n\n<img src=\"https://blog.repl.it/images/template-jam/squareish.jpg\" alt=\"Template Jam Cover Art\" width=\"100%\" style=\"width:100%\"/> \n\n### What are templates and how do I make one?\n\nTemplates are repls that serve as a starting point for others to build on top of. \n\nTemplates can be blank repls with support for a single language like many of the official templates are. Or they can be [portfolio website starter kits](https://replit.com/@templates/Portfolio-Site-Template?v=1) or [PyPi package templates](https://replit.com/@frissyn/PyPI-Package-Template?v=1). They can also be tutorials for languages or frameworks. The possibilities are endless, really.\n\nCheck out [these docs](https://docs.replit.com/programming-ide/configuring-repl) on how to configure a repl to get your template working with any language or framework.\n\n### What kind of templates should I make?\n\nIt's up to you! Our community has some ideas on what templates they'd like to see if you want some inspiration:\n- A [Flutter](https://flutter.dev/) starter\n- The [Rustlings](https://github.com/rust-lang/rustlings) exercises","metadata":{"id":611}}],["612",{"pageContent":"- A [Flutter](https://flutter.dev/) starter\n- The [Rustlings](https://github.com/rust-lang/rustlings) exercises\n- A [React Native](https://reactnative.dev/docs/getting-started) starter\n- A [Chrome extension](https://developer.chrome.com/docs/extensions/mv3/getstarted/)\n\nAnd our team has some ideas on things we'd like to see as well:\n\n- A simple static hosted blog without a framework—like [Replit's own](https://blog.replit.com/__repl)\n- [Figma Plugins](https://www.figma.com/plugin-docs/intro/)\n- A [Shopify theme](https://www.shopify.com/partners/blog/topics/shopify-theme-development)\n- [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/installation.html)\n- An [Oculus app starter](https://developers.google.com/assistant)\n- [Sonic Pi](https://sonic-pi.net)\n\n### How can I submit my template for Template Jam?\n\nPublish a repl to the community as a template and add the tag `#templatejam`. It's that simple!\n\nWe will start collecting submissions May 23rd at 12:00 AM PST, and stop collecting submissions June 23rd at 11:59 PM PST. \n\n### How are winners decided?\n\nYou'll have two ways to win!\n\nThe first $5,000 in prizes will be awarded by a panel of judges reviewing templates based on several criteria. This panel will include some Replit team members and a couple of guest judges. When reviewing, we'll be asking ourselves questions like:\n- How useful is it? _Does it extend the capabilities of what people can build on Replit?_\n- How easy is it to use? _Can a beginner press run and it just works?_\n- How well does it make use of Replit's features? (i.e. Replit DB, Kaboom.js, Repl Auth, LSP, packager, debugger, etc.)\n - Is it well-documented? _Is it easy to understand what's going on?_\n\nThe second $5,000 in prizes will be awarded based on a secret formula that will measure community reception of the templates in the month following the end of submission.\n\n### How much can I win?\n\nYou can win anywhere from $50 USD up to $5,000 USD.\n\n### How many templates can I submit ?","metadata":{"id":612}}],["613",{"pageContent":"### How much can I win?\n\nYou can win anywhere from $50 USD up to $5,000 USD.\n\n### How many templates can I submit ?\n\nYou can submit as many templates as you like! There is no limit.\n\n### Can I remix existing templates?\n\nYes, as long as you're adding original ideas and putting an effort to meaningfully change or improve the template.\n\n---\nIf you have any other questions, feel free to reach out to us on [Twitter](https://twitter.com/Replit), or [contact support](https://replit.com/support).\n\n[Rules and conditions apply](https://replit.com/@replit/Template-Jam-Rules#README.md)","metadata":{"id":613}}],["614",{"pageContent":"---\ntitle: How to Turn on Dark Mode and Switch Themes on Replit\nauthor: Piero Maddaleni\ndate: 2021-11-23\ncategories: product \ncover: https://blog.replit.com/images/theme-how-to/themeheader.png\n---\nWe recently changed how you change themes on Replit, and since people have been asking, we'll show you how it's done in this short blogpost. Start off by clicking on the hamburger button in the top right corner to open up the sidebar: \n\n![Opening Hamburger Menu](https://blog.replit.com/images/theme-how-to/hamburger.webp)\n\nNext, simply click on the moon or sun at the bottom of the menu to switch between light and dark theme:\n![Pressing the Theme Button](https://blog.replit.com/images/theme-how-to/lebutton.webp)\n\n---\nWe're working on adding themes besides light and dark currntly, such as the spooky theme. Changing to these themes is easy as well! Start out by clicking your username on the aforementioned sidebar, then click on Account:\n![Going to the Account Page](https://blog.replit.com/images/theme-how-to/account.webp)\n\nScroll down until you get to the Preferences section, and use the dropdown menu to change your theme:\n![Changing the Theme with the Dropdown Menu](https://blog.replit.com/images/theme-how-to/spooky.webp)\n\nThere ya have it, easy theme changing on Replit!","metadata":{"id":614}}],["615",{"pageContent":"If you've been using Replit for a while you might have noticed our multiplayer feature has gone through quite a few iterations. As it has evolved the infrastructure making it all work has been along for the ride. Each implementation unlocked important capabilities and pushed our infrastructure to be better.\n\nOur very first implementation of multiplayer was intentionally kept simple. We reached for what we deemed well established and supported libraries in the community. This lead us to a stack with [our editor](linktomonacoblogpost) talking [operational transform](yep) to [sharejs](yep) backed by [mongodb](yep) to coordinate edits between clients. This meant supporting additional infrastructure but required very little code and no changes to what we were already running. There were some significant downsides though. Being purely client based multiplayer sessions would rely on the host for coordination and thus only live as long as the host. Clients needed to send file contents to their repls when they run. Lots of scaling issues. We wanted to preserve OT history efficiently. Probably more. Shit on mongo db a lil, i hear that's hot. It wasn't very stable right guys?\n\nWe were surprised to find what looked to be the state of the art open source collaborative editing appeared to have many serious flaws. After beginning to roll out multiplayer we found a myriad of bugs stemming from libraries we depended on. *talk a lil shit about sharejs n friends*! i forget what the issues were but we diverged and had catch up problems iirc?","metadata":{"id":615}}],["616",{"pageContent":"To move forward we wanted to dramatically simplify the inner workings of multiplayer and own much more of the vertical. Although this meant more work up front, having simpler code we understood sounded a lot better than gluing together libraries we didn't. After surveying the existing technology we settle on a very simple version of unicode text based operational transform. OT, we found, was well understood, simpler than any alternatives, and most importantly we could wrap our heads around it. Collaborative editing was redesigned more like a regular desktop application to on top of our existing code evaluation infrastructure.\n\nSome major protocol changes later making [natively concurrent and mutliseat](link to that blog post) and this was decidedly the way multiplayer should work.\n\nBut first you probably want some background on our code evaluation infrastructure. We call it Goval internally and it's awesome. It starts up hundreds of repls every second all day every day. But to be this awesome it has an important caveat: it can kill your repl at any time for any reason. If you decide you want to keep repling you'll have to boot the repl up from scratch and start again at the last checkpoint. This takes lots of careful consideration from the client to keep things moving along smoothly. Although a tricky trade off we've decided it's worth it.\n\nCollaborative editing is build right in to your repl (actually packed into the init process), running right next to your `main.py` and [language server](yep). This poses some interesting technical problems as we need to follow the rules of userland. The trade-offs are easily worth it, the code is exceedingly simple and focused only on the task at hand. Code that runs in a repl needn't worry about scaling, servers, routing, or any other craziness the web often entails. That's already handled by our infrastructure for free. Once you get right down to it we're just dealing with a good ol' [unix system](memes).","metadata":{"id":616}}],["617",{"pageContent":"When setting out on this journey we needed to face some unfortunate truths.  Writing correct code is hard. Writing correct code to do operation transform is *really* hard. To balance with human fallibility we put significant effort into error detection, reporting, and recovery. When things go wrong we try to crash as fast and loud as we can. This might not always lead to the best user experience \n\nAlthough we trusted our OT test suite was good, we also trusted our users to fuzz the shit out of us bro.\n\nBefore making any attempts to change stuff we've put a lot of work.\n\nno multiplayer -> going live -> always multiplayer -> multiplayer native\n\ncoming soon: multiplayer native aka product catches up with infra\n\n# NOOOTES\n\n- everything was on the client, life was easy\n- went multiplayer. read all about it here https://blog.repl.it/multi \n- life got a lot harder\n- should we mention?: we regressed\n- our infra is based on ephemeral stuff, we need to be highly crash recoverable\n- scaling was $0\n- ![ot ops graph](images/ot_ops_graph.png)\n- ot in an ephemeral world is kinda tricky\n- checksuming, sometimes you find bugs in you libs\n- ot history mayb\n- chipping away at all the possible states\n  - ![crc32 mismatches](images/crc32_mismatch.png)\n  - ![prompted percent](images/prompted_percent.png)\n  - we found lots of dumb bugs\n    - https://github.com/josephg/unicount/pull/1\n    - https://github.com/protobufjs/protobuf.js/pull/1486\n    - monaco's newline fuckery\n      - monaco reports it as one character even on windows\n      - the offsets are messed up!\n      - monaco normalizes the buffer into a single type of newline\n      - theycan say  the line endings are\n      - user file content can container a mix\n      - we need to report hte right \n      - we store the actual characters\n      - when we see monacdo's characters we walk the characters to get the real offset\n      - change monaco to always use \\n\n      - if the file actually was","metadata":{"id":617}}],["618",{"pageContent":"---\n    title: Those W\n    author: Amjad Masad\n    date: (Leaving this field empty will keep it \"unpublished\")\n    cover: (This is what you want the cover picture to be. It is required. Make sure it is showing up correctly here: https://cards-dev.twitter.com/validator)\n\t  categories: Comma separated list of categories, like: news,eng,infra\n    profiles: Comma separated list of Replit usernames of the authors, like: bardia,amasad,CeeZee22,replitjeremy\n    ---\n\nGiving learners a space to navigate the world of coding in small, digestable bites, while also being a part of the Replit Community is one way we are bringing the next billion software creators online! But, there is another, much bigger, way to do this. Let Community lead the way with a Tutorial Jam....\n\n## Why Tutorials?\nReplit has always been a place for creators, educators, and learners. Recently, learners of all levels have been requesting more educational content. \n![Content feedback](https://blog.repl.it/images/100days_feedback1.png)\n![Content feedback 2](https://blog.repl.it/images/100days_feedback2.png)\n\nOur recent [Curriculum Jam winners](https://www.youtube.com/watch?v=AOGs2oEyP4I) are a pair of teenagers running their own start up, [Mission Encodable](https://missionencodeable.com/about), determined to bring better content and learning tools to their school. Users from all coding backgrounds are learning along with [Replit's 100 Days of Code](https://twitter.com/search?q=replit100daysofcode&src=typed_query). We have the [Curriculum Hub](https://replit.com/curriculum) for educators, but we want *more* for *more* users. Allowing everyone to add tutorials gives greater equity of access and ability to meet the needs of the versatile Replit Community.\n\n## How Do I Create Tutorials?","metadata":{"id":618}}],["619",{"pageContent":"## How Do I Create Tutorials?\nThe [Tutorial Pane](https://www.youtube.com/watch?v=l650luzyQGs) made its debut with [100 Days of Code](https://replit.com/learn). The best part about this simple feature is it's available to everyone in a regular repl and is super easy to set up with just a few steps:\n\n⏮ Inside any repl, create a fdolder called `.tutorial`.\n\n⏮ Within this folder, create as many markdown files as you like. They will automatically sort alphabetically (so add numbers to sort the order). \n\n⏮ The level one heading on each markdown file will be the title that appears in the table of contents and the progress indicator. \n\n⏮ Add a file called `video.json` within the `.tutorial` folder. \n\n⏮ Embed a video with `{ \"embedUrl\": \"https://www.youtube.com/embed/uniquevideocode\"}` The embed link needs to be a YouTube video. \n\n⏮ Reload the repl. \n\nNeed extra help? Follow along with this [video](https://www.youtube.com/watch?v=l650luzyQGs) and see the tool in action in [this documentation](https://building-templates.davidatreplit.repl.co/)!\n\n## What Can I Create?\n*Everyone* is an educator. Yes, you heard that correctly! Anyone who has something to share that will help other Replers learn *is* an educator. What can you share? Show off your skills by particpating in our upcoming [Tutorial Jam](https://tutorial-jam.replit-community.repl.co/). Our [live kick-off party](https://www.youtube.com/watch?v=HEPDZzArTQ0) is October 29. The winners of this Jam will be among the first to have their content showcased on Replit.\n\n## Did you say Tutorial Jam?\n\nWe did. Get all the details [here](https://tutorial-jam.replit-community.repl.co/.).\n\n✅ This Jam is for anyone who wants to teach a new concept, skill or game development. As we said, those who can, teach! So, feel free to share it with your students!\n\n✅ You need to use the new tutorial feature that debuted in 💯 Days of Code.","metadata":{"id":619}}],["620",{"pageContent":"✅ You need to use the new tutorial feature that debuted in 💯 Days of Code.\n\n✅ Your completed tutorial needs to be published to the community with #TutorialJam2022 and [submitted here](https://tutorial-jam.replit-community.repl.co/) between October 29 and November 5.\n\nWhat will you teach us? Remember, those who *can*, teach!","metadata":{"id":620}}],["621",{"pageContent":"---\ntitle: Open-Sourcing the Universal Package Manager\nauthor: Radon Rosborough\ndate: 2019-10-30T00:00:00.000Z\ncategories: product\n---\n\n<img src=\"/images/upm_cover_small.png\" alt=\"universal package manager\"/>\n\nOn Repl.it, working with packages is made easy. You can simply type `import flask` in your Python code, and [Flask](https://palletsprojects.com/p/flask/) will automatically be installed for you. Or, if you’re more the browsing type, you can search for packages and install them through a graphical interface.\n\nIn Repl.it tradition, once you know how to do package management in one language, you know how to do it in every language. You can use the same interface to install packages in Node.js, simply type `require(“express”)` to get [Express](https://expressjs.com/) up and running and so on.\n\n<div style='position:relative; padding-bottom:calc(64.48% + 44px)'><iframe src='https://gfycat.com/ifr/SecondFarawayBird?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\nToday we’re excited to release several months of work on improving the package management experience. Here are the highlights:\n\n* **Reproducible package management.** We’ll still look at your code and install packages automatically, but now we’ll remember exactly which versions to use, so your code will keep working no matter how many package updates are published.\n* **Modern tooling and best practices.** We now use the modern dependency manager [Poetry](https://poetry.eustace.io/) to manage your Python packages. Poetry improves on Pip in its security, consistency, usability, and flexibility. We believe tools like Poetry are the future, and we are migrating to them to do our part in improving the ecosystem for developers everywhere.","metadata":{"id":621}}],["622",{"pageContent":"* **Giving back to the community.** The core of our language-agnostic package management is now [open-source on GitHub](https://github.com/replit/upm). UPM, the Universal Package Manager, is a manager for your package managers: it knows all of their features, best practices, and quirks so that you don’t have to. UPM provides a unified set of abstractions (adding, removing, and listing project packages, searching for packages online, and guessing what packages need to be installed for your project to run) and a consistent, scriptable command-line interface that you can use to manage packages for every language the same way, just like we do on Repl.it. If you want to get your favorite package manager on Repl.it, all you need to do is submit a pull request to UPM. Supporting a new language now only takes about 300 lines of code!\n* **More language support.** Splitting out package management into a project which abstracts over language-specific differences makes adding package management to more languages much easier. In fact, we’ve already received a contribution from the [DartLang](https://dart.dev/) team, and also [added](https://github.com/replit/upm/commit/e5b9ee58afc1044bcfbeda3a9f4f00ce40d475fc) package management to [Emacs Lisp](https://repl.it/site/blog/elisp) – check it out [here](https://repl.it/l/elisp)! \n\nYou can take out UPM on your computer. Check out the [Installation](https://github.com/replit/upm#installation) section on GitHub for full instructions for your system. \n\nHere is a quick demo of the CLI on Repl.it. (You can open a shell in the workspace with `ctrl-shift-s` on mac `command-shift-s`).\n\n<div style='position:relative; padding-bottom:calc(41.51% + 44px)'><iframe src='https://gfycat.com/ifr/WigglyKeyBubblefish?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\nLet’s dive into some of the technical aspects of UPM and Repl.it’s new package management.","metadata":{"id":622}}],["623",{"pageContent":"Let’s dive into some of the technical aspects of UPM and Repl.it’s new package management.\n\n## Different kinds of package managers\n\nThere’s more than one kind of package manager. Broadly speaking, I like to define two categories: *system* package managers, and *project* package managers.\n\nSystem package managers:\n* include [Homebrew](https://brew.sh/), [APT](https://en.wikipedia.org/wiki/APT_%28Package_Manager%29), [RPM](https://rpm.org/), [Pacman](https://wiki.archlinux.org/index.php/pacman), and [Chocolatey](https://chocolatey.org/).\n* generally install only the latest versions of all software.\n* install software globally, for everyone (or in some cases for a single user).\n* often have guarantees by package repository maintainers that the software they install will work together.\n* can install anything that’s packaged, regardless of the language it’s written in.\n\nProject package managers:\n* include [Pipenv](https://github.com/pypa/pipenv), [Poetry](https://poetry.eustace.io/), [NPM](https://www.npmjs.com/get-npm), [Yarn](https://yarnpkg.com/en/), [Bundler](https://bundler.io/), [Stack](https://docs.haskellstack.org/en/stable/README/), and [Cask](https://cask.readthedocs.io/en/latest/).\n* can generally install any versions of available packages, and generally include dependency resolution algorithms that can compute solutions to a large set of package version constraints.\n* install packages into an isolated environment for every project, so that they aren’t available (and can’t conflict) globally.\n* usually don’t have any guarantee about the quality, compatibility, or even safety of the packages that are installed.\n* are almost always limited to one specific language.\n\nIn other words, system package managers are meant to administrate your system and install the tools that you use everywhere on your machine, whereas project package managers are meant to help develop and package new software. These are very different use cases, and so the resulting package managers are very different.","metadata":{"id":623}}],["624",{"pageContent":"You might ask, what about tools like [Pip](https://pypi.org/project/pip/), [RubyGems](https://rubygems.org/pages/download), and [cabal-install](http://hackage.haskell.org/package/cabal-install)? These tools occupy a middle ground: by default, they install packages globally (making them unsuitable for project package management); yet they are also limited to a specific programming language (making them also unsuitable for system package management). As package management ecosystems evolved, using these tools directly is no longer recommended; rather, for system package management you should use a system package manager which packages the software you want to install globally, and for project package management you should use a tool which wraps Pip (e.g. Pipenv or Poetry), RubyGems (Bundler), or cabal-install (Stack) to provide isolation and reproducibility.\n\n## How should project package managers behave?\n\n<div style='position:relative; padding-bottom:calc(80.14% + 44px)'><iframe src='https://gfycat.com/ifr/ThatAthleticIsopod?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div><p>\n\nHere’s how we visualize project package management as working in an ideal world: *source → specfile → lockfile → installed packages*. Let’s break that down in detail:\n\n* The *source* code is what really defines a project's dependencies. Although often imprecise and implicit through importing and usage of packages, when possible the source should be used as a basis. For example `upm add --guess` will add any packages it think are being used to the specfile.","metadata":{"id":624}}],["625",{"pageContent":"* The *specfile* describes project dependencies in a human-and-machine-readable format. For example, your specfile might say: “This is a Python project. It needs [Flask](https://pypi.org/project/Flask/) (at least version 1.1, but not 2.0 or anything later) as well as [Selenium](https://pypi.org/project/selenium/) (any version) to run.” For [Poetry](https://poetry.eustace.io/), this file is called `pyproject.toml`. Typically you edit the specfile either by hand or by using a command-line interface (or both). For example, you could create the specfile I described above by running `poetry add “flask ^1.1” “selenium *”`.\n* The *lockfile* is a file that describes project dependencies *exactly*, in a machine-readable format. This means that it includes *transitive dependencies* (dependencies of your dependencies), and it has exact versions for every package, rather than the version *constraints* (at least 1.1, less than 2.0) that are found in the specfile. The lockfile is automatically generated from the specfile by the project package manager via *dependency resolution*. Why is it important? If you have a lockfile, then it ensures that every developer working on your library or application will use exactly the same versions of its dependencies. This is very important for reproducibility! Typically, lockfiles also include some checksums or hashes to improve security (if someone has replaced a dependency on PyPI with malware, then the build will fail). For Poetry, the lockfile is called `poetry.lock`.\n* The *packages* are installed based on what is listed in the lockfile. Typically, they will be installed into an isolated per-project directory (like `node_modules` or a Python virtualenv).\n\nThis one-directional information flow from source to specfile to lockfile to installed packages neatly separates the different functions of a project package manager. Each stage having less human involvement than the last.\n\n## How do project package managers actually behave?","metadata":{"id":625}}],["626",{"pageContent":"## How do project package managers actually behave?\n\nNot well, it turns out. While building the package management infrastructure at Repl.it, we discovered a laundry list of language-specific limitations, quirks, and design mistakes. This is what inspired us to create UPM: we want to make package management as easy as it should be.\n\nHere are some of our favorite quirks:\n* Bundler, despite using a project-local specfile and lockfile, installs dependencies *system-globally* by default. You can configure this, but there’s no standard project-local location to use.\n* When you run `pip search Flask`, the package named `Flask` does not appear in the search results. As of yet, I’ve been unable to determine why. Also, you can’t compare Python package names using string equality because they are case insensitive and hyphens and underscores are equivalent. (But nonetheless there *is* a canonical format for each package name, which cannot be determined without network access and which is used in some contexts but not others.)\n* The lockfile format used by Yarn is *almost* YAML, but not quite. [Yes, really.](https://github.com/yarnpkg/yarn/issues/5629)\n* The command-line option to make Bundler produce machine-parseable output is “documented” only by virtue of existing in the source code. Reading Bundler specfiles and lockfiles from an external tool is also only possible by threading together a bunch of internal functions from the Bundler source code.\n* There’s no reasonable way in Poetry to discover where dependencies are going to be installed. You have to either create a virtual environment and then ask where the Python binary was installed, or manually reimplement the algorithm, which includes checking environment variables, reading two different configuration variables, parsing an optional TOML file, looking up the Python version, and lowercasing the project name.","metadata":{"id":626}}],["627",{"pageContent":"* Given a Python import, the best way to determine which package provides it is apparently to look it up in a big list that is generated by [people manually adding packages one at a time](https://github.com/bndr/pipreqs/commits/master/pipreqs/mapping).\n* For some packages, the NPM Registry API returns a URL for the package homepage in search results but *not* when you look up details for the package individually.\n* The standard Emacs package manager has literally no support for installing anything but the latest version of a package.\n\nIf you use UPM, you don’t have to worry about any of this!\n\n## UPM abstractions\n\nThe basic principle of UPM is to define [a sensible internal API](https://github.com/replit/upm/blob/c81fda15dfb2cda4cf345911a2c369ed060dde0c/internal/api/types.go#L116-L309) which can be implemented for each language, and then define the user-facing command-line interface in terms of this API. This way, all of the business logic of UPM is guaranteed to be language-independent.\n\nSome parts of the API are simple constants: the names of the specfile and lockfile, and what filenames correspond to the language. These are used for project language autodetection. Other parts implement the core UPM operations: add or remove packages, list the specfile or lockfile, search project source code for possible dependencies to install. In addition to guaranteeing language-independence, this API/CLI split makes it easier to implement language backends. For example, ‘upm add flask’ will first list the specfile and filter out Flask if it’s already been added. This means the implementation of `LanguageBackend.Add` for the Python backend of UPM can just invoke `poetry add`, without needing to worry about the fact that Poetry throws an error if you try to add the same package twice.","metadata":{"id":627}}],["628",{"pageContent":"One of the main challenges in designing UPM’s language backend API was the fact that different package managers act quite differently. In an ideal world, each package manager would implement three separate operations: add to or remove from the specfile, generate the lockfile from the specfile, and install packages from the lockfile. In reality, some package managers force you to do two or even three steps at once. In UPM, we deal with this by having each language backend declare a set of “quirks”, like `AddRemoveAlsoLocks` and `LockAlsoInstalls`. The implementation of `upm add` will run the `Add` backend method, and will then follow it up with the `Lock` backend method *unless* `AddRemoveAlsoLocks` is included in the backend’s quirks configuration (indicating that the lockfile was already generated in addition to the specfile being modified).\n\nEven worse than some package managers combining steps, some package managers don’t have any concept of a lockfile at all! For example, the standard package manager for Emacs Lisp ([`package.el`](https://wikemacs.org/wiki/Package.el), wrapped by [Cask](https://cask.readthedocs.io/en/latest/)) has no support at all for installing a specific version of a package, so the idea of a lockfile is really a non-starter. (Aside: this annoyed me so much that I wrote [my own package manager for Emacs](https://github.com/raxod502/straight.el), which was part of the reason I got hired to improve the package management infrastructure at Repl.it!)\n\nThe approach of UPM to this problem is to preserve the spirit of the specfile/lockfile abstraction as much as possible. For Emacs Lisp, UPM will install directly from the specfile, then generate a lockfile from what is installed (listing exact versions and transitive dependencies, of course).\n\n## Caching and dependency guessing","metadata":{"id":628}}],["629",{"pageContent":"## Caching and dependency guessing\n\nAt Repl.it, we care about performance, because nobody wants to wait for their code to run. That means our package management needs to be as fast as possible, especially when there isn’t actually anything that needs to be installed. Since we want UPM to be as useful a standalone tool as possible, we opted to implement all of the performance optimizations directly in UPM. All of the package management code in Repl.it is essentially just a wrapper around UPM:\n\n* when you add a package through the interface, Repl.it calls `upm add`\n* when you remove a package through the interface, Repl.it calls `upm remove`\n* when you run your code, Repl.it calls `upm add --guess` (which searches your code for `import` or `require` statements and installs any missing packages)\n\nYou might ask how it isn’t incredibly slow to do a code search on every run. (Not to mention making sure the lockfile and installed packages are up to date, since you’re allowed to edit the specfile directly at any time if you want to!)\n\nThe answer is that UPM transparently keeps track of some information in a hidden JSON file behind the scenes. It looks something like this:\n\n```json\n{\n  \"version\": 2,\n  \"languages\": {\n    \"python-python3-poetry\": {\n      \"specfileHash\": \"361e6bddc6a34f1696e71227be88b4b4\",\n      \"lockfileHash\": \"f208ad0efc93d51f52e04326406816cf\",\n      \"guessedImports\": [\n        \"Flask\",\n        \"selenium\"\n      ],\n      \"guessedImportsHash\": \"8952e87cf73e21ef3313c4e9c98718a7\"\n    }\n  }\n}\n```\n\nAfter a successful operation, UPM will automatically record [hashes](https://en.wikipedia.org/wiki/Hash_function) of the specfile and lockfile. That way, it can tell if the specfile has changed since the last time the lockfile was generated. If it hasn’t, then `upm lock` is a very fast no-op. Similarly, if the lockfile hasn’t been changed since the last time packages were installed, then `upm install` can be optimized away.","metadata":{"id":629}}],["630",{"pageContent":"UPM also optimizes dependency guessing by means of a two-step search. First, it uses a fast [regexp](https://en.wikipedia.org/wiki/Regular_expression) match to heuristically find things that **might** be `import` or `require` statements. Then it converts the deterministically generated sequence of matches into a hash. If this hash matches what was recorded in the JSON file last time a search was done, then the list of guessed packages from last time (also in the JSON file) can be reused. This is very fast. Otherwise, the language backend is asked to do a more advanced search, usually involving [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) parsing.\n\n## Closing\n\nWe hope you enjoy faster, more modern, and more open package management support on Repl.it. Now that we’ve aggregated all of the language-specific code into a single place, we hope it will be much easier to add package management support for new languages, like [Emacs Lisp](https://repl.it/l/elisp). Check out [UPM on GitHub](https://github.com/replit/upm) and see what it would take to add your favorite package manager to Repl.it! (Or, if Repl.it doesn’t have your favorite programming language yet, check out our other open-source projects, [Polygott](https://github.com/replit/polygott) and [Prybar](https://github.com/replit/prybar), to help us add it.)","metadata":{"id":630}}],["631",{"pageContent":"yar---\ntitle: Welcome to the Wonderful World of Clusters\nauthor: Luis Héctor Chávez\ndate: 2021-03-26T17:30:00.000Z\ncover: https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-after.png\ncategories: infra\n---\n\nHaving [a solid foundation](https://blog.replit.com/quality) is critical for us to be able to fulfill our mission of making programming more accessible, more creative, and more fun. We did a great job of making the platform more stable during last year, but every now and then we would still run into unforeseen problems that [cascaded](https://en.wikipedia.org/wiki/Cascading_failure) into other parts of the platform, producing a bad experience for everyone. So back in October (just a few weeks after I joined the team) when we had 2 load-related site-wide outages within a week, we knew it was time to do a major overhaul of how our infrastructure handles traffic. And now today, we're announcing that as a side effect of that infrastructure change, [Hacker](https://replit.com/site/pricing) repls now run in newer, more powerful machines, which means that we'll have more room to grow and experiment with more benefits for Hackers (and you might find that things feel a little bit snappier lately). This is the first of a three-part series of blogposts on how we rebuilt our infrastructure over the course of ~5 months.\n\n## Introducing a new failure domain","metadata":{"id":631}}],["632",{"pageContent":"## Introducing a new failure domain\n\nThe original goal of this endeavor was simple, in theory: split the Replit infrastructure into multiple [failure domains](https://en.wikipedia.org/wiki/Failure_domain), so that when (not if) the next incident occurs, it only affects a subset of the users instead of all of them. There are multiple strategies to do so, and we chose to move Hackers to their own failure domain. But what does this split entail? Prior to this change, our backend infrastructure was relatively simple: a Google Compute [Managed Instance Group](https://cloud.google.com/compute/docs/instance-groups) of VMs that [run containers](https://blog.replit.com/killing-containers-at-scale#replit-architecture), and another one that serves HTTP traffic on `.repl.co` domains.\n\n![Simplified Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-before.png \"Simplified Replit.com infrastructure architecture\")","metadata":{"id":632}}],["633",{"pageContent":"![Simplified Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-before.png \"Simplified Replit.com infrastructure architecture\")\n\nSo in theory if we take the right-hand side of the diagram and make multiple copies of it, treating each one as a completely independent cluster, we solve the problem. [Mission accomplished](https://i.kym-cdn.com/entries/icons/original/000/001/899/mission_accomplished.jpg), right? Not quite: clients now need to know where to make their requests to, since they will now need to hit different hostnames depending on which cluster their repls are (since they are now completely independent after all). Clients that wanted to connect to their repl through the workspace were already required to contact the replit.com web server to get an auth token for the WebSocket connection anyways, so it would make sense for the web server to be the source of truth about the repl->cluster mapping. But what about [hosting](https://blog.replit.com/hosting)? All repls get a `.repl.co` domain, and users can CNAME them to be able to get to their app. At this point, the problem started looking very DNS-shaped, and that's kind of what we ended up doing: an external cluster resolution service, that can be used by both the Replit.com web server and individual clients trying to access their apps!\n\n![Simplified and updated Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-after.png \"Simplified and updated Replit.com infrastructure architecture\")\n\nGiven that everybody needed to make a DNS query to get the address of their `.repl.co` domains, exposing an external DNS server on the cluster resolution service made sense, which also made it such that there is no additional latency involved in this resolution!","metadata":{"id":633}}],["634",{"pageContent":"With all the building blocks in place, there was one final thing that needed addressing: [Eventual consistency](https://en.wikipedia.org/wiki/Eventual_consistency). Distributed systems that are resilient, as well as those that have any amount of caching in place, benefit from being able to tolerate slightly stale information gracefully, with the knowledge that eventually the whole system will converge into a stable state. In this case, it is possible for one user to be transferred between clusters: since Hackers are located in a separate cluster, if the users' subscription status changes, they need to be relocated. DNS results can be cached for prolonged periods of time, which means that we need to be able to handle the case where a user tries to access their old cluster for that period of time. For that case, we use another tool from the distributed systems toolbox: [Tombstones](https://en.wikipedia.org/wiki/Tombstone_(data_store)). When a user is moved from one cluster to another, a Tombstone is created in their original cluster, pointing at the destination cluster. Any attempts to contact any of their repls in the original cluster will then be responded by proxying the connection transparently to the new cluster during the TTL of the DNS record. And with that, the solution is now complete!","metadata":{"id":634}}],["635",{"pageContent":"One of Replit's internal mantras is to [ship things incrementally](https://freakonomics.com/podcast/in-praise-of-incrementalism/), even though we didn't transfer Hackers to their new cluster until fairly recently, all the infrastructure was in place beforehand. In order to test things out, during another load-related incident we decided to give this idea a try and move one user that had an extremely popular repl to the new cluster to test whether the goal of this project was achieved. Even though we knew there were rough edges, and the user transfer process was not widely tested before, we took a chance and used it. To our surprise, things worked better than we expected, and the incident was mitigated before it became a lot worse. Over the next weeks, the new cluster became one more way for us to move load around in times of emergency, which was a nice side-effect.\n\nYou might also remember that we blogged about our new [global deployments](https://blog.replit.com/global): this was also one intermediate step of this project that we were able to launch early.\n\n## What this means for Hackers\n\nNow that we are able to provision separate infrastructure for each cluster, the first thing that came to mind was to experiment with provisioning slightly different hardware in each cluster. To start, we are trying out how responsive repls are if they are running on machines that have a bit more headspace in terms of CPU and memory, since our theory is that there will be less contention over scheduling. We have a few more experiments planned to make the Hacker experience better, and we're going to make an announcement about this very soon.\n\n## What's next?\n\nAs I mentioned in the beginning of the article, this is part of a series of blogposts. In the next installment, Connor Brewster will go into more detail about our brand new DNS server. To wrap things up, Zach Anderson will describe some of the big deployment changes that we needed to do to achieve all this.\n\nHappy repling!","metadata":{"id":635}}],["636",{"pageContent":"---\ntitle: \"Graphics Improved\"\nauthor: Dan Stowell\ndate:\n---\n\nLast week, [we heard](/fix-gfx) that we needed to make improving graphics our number one priority.","metadata":{"id":636}}],["637",{"pageContent":"# 1. Terms of Service (\"Terms\")\n\nLast updated: 11/17/2022\n\nPlease read these Terms of Service (\"Terms\") carefully before using the Replit websites and apps (the \"Service\") operated by Replit, Inc. (“Replit”, \"us\", \"we\", or \"our\").\n\nYour access to and use of the Service is conditioned upon your acceptance of and compliance with these Terms. These Terms apply to all visitors, users, and others who wish to access or use the Service.\n\nBy accessing or using the Service you agree to be bound by these Terms. You also agree to be bound by our Privacy Policy at [replit.com/privacy](https://replit.com/site/privacy) and incorporated here by reference. If you disagree with any part of these Terms then you do not have permission to access the Service.\n\n## 2. Service\nWe provide users with a hosted environment and community to code, build, share, and deploy software and web servers through our Service.\n\n## 3.  User Agreement to Acceptable Use of the Service\nYour use of the Service is subject to the prohibitions on use and content in these Terms. If you are found to be in violation of these Terms, or any of our other policies at any time, as determined by Replit in its sole discretion, we may warn you or suspend or terminate your account.\n\n## 4.  Prohibited Actions\nIn using the Services, you may not and may not allow any third party, including your end users, to:\n\n1. Send, upload, distribute or disseminate or offer to do the same with respect to any unlawful, defamatory, harassing, abusive, fraudulent, infringing, obscene, or otherwise objectionable content;\n\n2. Intentionally distribute viruses, worms, defects, Trojan horses, corrupted files, hoaxes, or any other items of a destructive or deceptive nature;\n\n3. Conduct or forward pyramid schemes and the like;\n\n4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;","metadata":{"id":637}}],["638",{"pageContent":"4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;\n\n6. Create accounts with automation or register accounts in bulk without prior written approval from Replit;\n\n7. Illegally transmit another's intellectual property or other proprietary information without such owner's or licensor's permission;\n\n8. Use the Service to violate the legal rights (such as rights of privacy and publicity) of others;\n\n9. Promote or encourage illegal activity;\n\n10. Use the Service in any way that promotes or facilitates human trafficking, sex trafficking, or physical abuse;\n\n11. Interfere with or disrupt the Services or create an undue burden on Replit's Service or the networks or services connected to Replit's Service;\n\n12. Use the Service to attack or tamper with other websites, services, and individuals;\n\n13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;","metadata":{"id":638}}],["639",{"pageContent":"13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;\n\n14. Launch any automated system, including without limitation, “robots”, “spiders”, or “offline readers” that access the Service in a manner that sends more request messages or any other content to the Replit servers in a given period of time than a human can reasonably produce in the same period by using a conventional online web browser. Notwithstanding the foregoing, Replit may grant the operators of public search engines permission to use spiders to copy materials from the site for the sole purpose of and solely to the extent necessary for creating publicly available searchable indices of the materials, but not caches or archives of such materials. Replit reserves the right to revoke these exceptions either generically or in specific cases. You agree not to collect or harvest any personally identifiable information, including account names, from the Service, nor to use the communication systems provided by the Services for any commercial solicitation purposes. You agree not to solicit, for commercial purposes, any users of the Service with respect to their content. Notwithstanding the foregoing, Replit grants specific consent for you to make both commercial and non-commercial use of our standard embeds in your websites and applications as provided in the following link: [https://docs.replit.com/hosting/embedding-repls](https://docs.replit.com/hosting/embedding-repls);\n\n15. Rent, lease, loan, or sell access to, or otherwise attempt to transfer any right in Replit's website (which includes its software and documentation) to a third-party, through framing or any other method;","metadata":{"id":639}}],["640",{"pageContent":"16. Modify, adapt, translate, or reverse engineer any portion of the Service. Without limitation you may not engage in practices of “screen scraping,” “database scraping” or any other practice or activity the purpose of which is to obtain lists of users, portions of a database, copy visuals or business methods, or other lists or information from the Service, in any manner and any quantities not authorized by Replit in writing or use Replit for competitive purposes;\n\n17. Remove any copyright, trademark or other proprietary rights notices contained in or on the Service;\n\n18. Reformat or frame any portion of the web pages that are part of the Service's administration display;\n\n19. Use the Service to \"mine\" bitcoins, other cryptocurrencies, or Cycles;\n\n20.  Display any content on the Service that contains any hate-related or violent content or contains any other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights;\n\n21. Modify the Replit logo or any other Replit Marks or logos;\n\n22. Send unsolicited messages or use the Service to send unsolicited messages (also known as junk mail or SPAM);\n\n23. Repeatedly fork or clone projects to run or host the same code creating undue load on the Service;\n\n24. Use the Service to create a proxy with the purpose of circumventing any firewall or other access control measure;\n\n25. Engage in attacks designed to extract or steal trained machine learning models used by Replit or its third party service providers.\n\n## 5. Prohibited Content\nYou may not upload or transmit any of the follow types of User Content (as defined below) on or through the Service:\n\n*   User Content that infringes a third party's rights (e.g., copyright) according to applicable law;\n*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;","metadata":{"id":640}}],["641",{"pageContent":"*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;\n*   User Content intended to advocate or advance computer hacking or cracking;\n*   Other illegal activity, including without limitation illegal export of controlled substances or illegal software;\n*   Drug paraphernalia;\n*   Phishing;\n*   Malicious User Content;\n*   Other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third-party rights;\n*   Nudity and sexually explicit content or activities, such as pornography and the sale of sexual services;\n*   Content that promotes or facilitates suicide or self-harm, including without limitation instructions or graphic images of suicide or self-harm;\n*   Gambling content such as card, roulette, or dice games that are played for money, Cycles, or anything else of value.\n\n## 6.  Quota & Limits\nReplit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at [https://replit.com/site/pricing](https://replit.com/site/pricing) and may be updated there from time to time. Long periods of inactivity may result in an account or your use of the Service being deemed inactive. \n\nFor more details on what the limits are currently, please check out our docs [here](https://docs.replit.com/legal-and-security-info/usage).\n\n## 7. Your Use of Content on the Service","metadata":{"id":641}}],["642",{"pageContent":"## 7. Your Use of Content on the Service\nIn addition to the general restrictions set forth above, the following restrictions and conditions apply specifically to your use of our content made available on the Service, and the trademarks, service marks and logos (“Marks”) on the Service (collectively referred to as “Service Content”). The Service Content is owned or licensed by Replit or others, and is subject to copyright and other intellectual property rights under the law. Service Content is provided to you on a strictly as-is basis. You may access Service Content for your information and personal use solely as permitted under these Terms. You shall not download any Service Content unless you see a “download” or similar link displayed by Replit on the Service for that Service Content. Except as provided in the “Open Source and User Content” section below, you shall not copy, reproduce, distribute, transmit, broadcast, display, sell, license, or otherwise exploit any Service Content for any other purposes without the prior written consent of Replit or the respective licensors of such Service Content. Replit and its licensors reserve all rights not expressly granted in and to the Service and the Service Content. You agree not to circumvent, disable, or otherwise interfere with the security-related features of the Service or features that prevent or restrict use or copying of any Service Content or enforce limitations on the use of the Service or Service Content. You understand that when using the Service, you will be exposed to Service Content from a variety of sources, and that Replit is not responsible for the accuracy, usefulness, safety or intellectual property rights of or relating to such Service Content. You further understand and acknowledge that you may be exposed to Service Content that is inaccurate, offensive, indecent, or objectionable.\n\n## 8.  User Content","metadata":{"id":642}}],["643",{"pageContent":"## 8.  User Content\nOur Service allows you to post, link, store, share and otherwise make available certain information, code, text, graphics, videos, or other material (\"User Content\"). Because part of the Service includes a code editor and file manager for purposes of uploading User Content, you fully control the type and nature of the User Content you upload, and as such you (and not Replit) are responsible for the User Content that you post on or through the Service, including its legality, reliability, and appropriateness.\n\nBy posting User Content on or through the Service, You represent and warrant that: (i) except as provided in the “Open Source and User Content” section below, the User Content is yours (you own it) and/or you have the right to use it and the right to grant us the rights and license as provided in these Terms, and (ii) that the posting of your User Content on or through the Service does not violate the privacy rights, publicity rights, copyrights, contract rights, intellectual property rights or any other rights of any person or entity. We reserve the right to terminate the account of anyone found to be infringing on a copyright or any other intellectual property right.","metadata":{"id":643}}],["644",{"pageContent":"Except as provided in the “Open Source and User Content” section below, you retain any and all of your rights to any User Content you submit, post or display on or through the Service and you are responsible for protecting those rights. We take no responsibility and except where prohibited by law, assume no liability for User Content you or any third party posts on or through the Service. However, by posting User Content using the Service you grant us the non-exclusive, worldwide, royalty-free, fully paid-up, sublicensable and transferable right and license to use, modify, publicly perform, publicly display, reproduce, and distribute such User Content on and through the Service in accordance with these Terms and our Privacy Policy. You agree that this license includes the right for us to make your User Content available to other users of the Service, who may also use your User Content subject to these Terms.\n\nReplit has the right but not the obligation to monitor, edit, remove, or share User Content provided by users where it believes in good faith that it is necessary to comply with applicable law, to ensure the consistency, security, and stability of our Service, or for any other reason.\n\nExcept as provided in the “Open Source and User Content” section below, you may not distribute, modify, transmit, reuse, download, repost, copy, or use said User Content, whether in whole or in part, for commercial purposes or for personal gain, without express advance written permission from us.\n\n## 9.  Open Source and User Content","metadata":{"id":644}}],["645",{"pageContent":"## 9.  Open Source and User Content\nBy posting User Content on certain portions of the Service or through certain features or functionalities of the Service, such User Content may be automatically subject to an open source license. Additional terms and conditions related to open source licensing on the Services can be found at this link, [https://docs.replit.com/legal-and-security-info/licensing-info](https://docs.replit.com/legal-and-security-info/licensing-info), and such terms and conditions are hereby incorporated into these Terms by reference.\n\n## 10. Cycles\nCycles are a virtual token with no cash value. Your right to use Cycles is a limited, personal, revocable license issued to you by Replit under a set of terms and conditions found at https://replit.com/site/cycles-terms , and are hereby incorporated into these Terms by reference. \n\n## 11. Purchases\nIf you wish to purchase any product or service made available through the Service (\"Purchase\"), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, your shipping information and CSC number.\n\nYou represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.\n\nWe reserve the right to refuse or cancel your order at any time for reasons including but not limited to: product or service availability, errors in the description or price of the product or service, error in your order or other reasons, or if fraud or an unauthorized or illegal transaction is suspected.\n\n## 12.  Availability, Errors and Inaccuracies","metadata":{"id":645}}],["646",{"pageContent":"## 12.  Availability, Errors and Inaccuracies\nWe are constantly updating product and service offerings on the Service. We may experience delays in updating information on the Service and in our advertising on other services. Products or services may be discontinued, mispriced, described inaccurately, or unavailable on the Service and we cannot guarantee the accuracy or completeness of any information found on the Service. We may offer artificial intelligence features like the ability to generate code.\n\nWe therefore reserve the right to change or update information and to correct errors, inaccuracies, or omissions at any time without prior notice.\n\n## 13.  Notice and Communications\nBy creating an account on our Service, you agree that, from time to time, we may contact you to notify you about certain changes or additions to the Service or regarding your use of the Service. Where we require that you provide an e-mail address, you are responsible for providing us with your most current e-mail address. In the event that the last e-mail address you provided to us is not valid, or for any reason is not capable of delivering to you any notices required or permitted by these Terms, our dispatch of the e-mail containing such notice will nonetheless constitute effective notice. You may give us notice by contacting us at [https://replit.com/support](https://replit.com/support).\n\n## 14.  Contests, Sweepstakes and Promotions\nAny contests, sweepstakes or other promotions (collectively, \"Promotions\") made available through the Service may be governed by rules that are separate from these Terms. If you participate in any Promotions, please review the applicable rules as well as our Privacy Policy. If the rules for a Promotion conflict with these Terms, the Promotion rules will apply.\n\n## 15.  Accounts; Account Termination Policy","metadata":{"id":646}}],["647",{"pageContent":"## 15.  Accounts; Account Termination Policy\nUnless you are a Teams for Education student user, you must be at least 13 years old to use the Service. However, children of all ages may use the Service if enabled by a parent or legal guardian. If you are under 18, you represent that you have your parent or guardian’s permission to use the Service. Please have them read these Terms with you. \n\nIf you are a parent or legal guardian of a user under the age of 18, by allowing your child to use the Service, you are subject to the terms of this Agreement and responsible for your child’s activity on the Service. \n\nWhen you create an account with us, you represent that the information you provide is accurate, complete, and current at all times. Inaccurate, incomplete, or obsolete information may result in the immediate termination of your account.\n\nYou are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password, whether your password is with our Service or a third-party service. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.\n\nYou may not use as a username the name of another person or entity or that is not lawfully available for use, a name or trademark that is subject to any rights of another person or entity other than you, without appropriate authorization. You may not use as a username any name that is offensive, vulgar or obscene.","metadata":{"id":647}}],["648",{"pageContent":"Replit may terminate a user’s access to the Service if the user is determined to be a repeat infringer of our Copyright Policy below or if in Replit’s sole discretion, Replit determines that a user has breached or otherwise violated these Terms. If Replit, in its sole discretion, determines that a user or User Content violates these Terms for any reason, Replit may at any time, without prior notice and in its sole discretion, remove such User Content and/or terminate a user’s account. In addition to the foregoing, we reserve the right to refuse service, terminate, reclaim or repurpose accounts, remove or edit content, or cancel orders in our sole discretion.\n\n## 16.  Copyright Policy\nWe respect the intellectual property rights of others, it is our policy to respond to any claim that User Content posted on the Service infringes on the copyright or other intellectual property rights (\"Infringement\") of any person or entity.\n\nIf you are a copyright owner, or authorized on behalf of one, and you believe that the copyrighted work has been copied in a way that constitutes copyright infringement, please submit your claim via email to  https://replit.com/support, with the subject line: \"Copyright Infringement\" and include in your claim a detailed description of the alleged Infringement as detailed below, under \"DMCA Notice and Procedure for Copyright Infringement Claims\"\n\nYou may be held accountable for damages (including costs and attorneys' fees) for misrepresentation or bad-faith claims on the infringement of any User Content found on and/or through the Service on your copyright.\n\n## 17.  Indemnification","metadata":{"id":648}}],["649",{"pageContent":"## 17.  Indemnification\nYou agree to defend, indemnify and hold harmless Replit, Inc. and its licensee and licensors, and their employees, contractors, agents, officers and directors, from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) a breach of these Terms, or c) Content posted on the Service.\n\n## 18.  DMCA Notice and Procedure for Copyright Infringement Claims\nYou may submit a notification pursuant to the Digital Millennium Copyright Act (DMCA) by providing our Copyright Agent with the following information in writing (see 17 U.S.C 512(c)(3) for further detail):\n\n*   an electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest;\n*   a description of the copyrighted work that you claim has been infringed, including the URL (i.e., web page address) of the location where the copyrighted work exists or a copy of the copyrighted work;\n*   identification of the URL or other specific location on the Service where the material that you claim is infringing is located;\n*   your address, telephone number, and email address;\n*   a statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law;\n*   a statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.\nYou can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property","metadata":{"id":649}}],["650",{"pageContent":"You can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property\nThe Service and its original content (excluding User Content provided by users), features and functionality, including without limitation, all intellectual property rights therein, are and will remain the exclusive property of Replit and its licensors. The Service is protected by copyright, trademark, and other laws of both the United States and foreign countries. Our trademarks and trade dress may not be used in connection with any product or service without the prior written consent of Replit.\n\n## 20.  Links To Third Party Websites, Advertisements and Services\nOur Service may contain links to third party web sites, advertisements or services that are not owned or controlled by Replit, including alongside your User Content or related to features of the Service.\n\nReplit has no control over, and to the fullest extent permitted by law, assumes no responsibility for the content, privacy policies, or practices of any third-party web sites or services. We do not warrant the offerings of any of these entities/individuals or their websites.","metadata":{"id":650}}],["651",{"pageContent":"You acknowledge and agree that Replit cannot and will not review, censor, endorse or edit the content of any third-party site, services or advertisements. Where the Service contains links to such third-party websites, services or advertisements, these links are provided for your information and convenience only. You acknowledge and agree that your use of any third-party websites, services and/or advertisements is at your own risk and that you should apply a suitable level of caution and discretion in accessing any such third-party links. When you click on any third-party links, the applicable third party’s terms and policies apply, not these Terms. To the fullest extent permitted by law, by using the Service, you expressly relieve Replit from any and all liability arising from your use of any third-party website, services or advertisements and/or from your use of or access to any third-party content made available through the Service, including without limitation, any User Content made available or accessed through your interactions with other users of the Service.\n\nYou acknowledge and agree that to the fullest extent permitted by law, Replit shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such third-party web sites or services.\n\n## 21.  Termination\nWe may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever and without limitation, including but not limited to a breach of the Terms.\n\nIf you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.","metadata":{"id":651}}],["652",{"pageContent":"If you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.\n\nAll provisions of the Terms which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.\n\n## 22.  Indemnification\nTo the maximum extent permitted by law, you agree to defend, indemnify and hold harmless Replit and its licensee and licensors, and their employees, contractors, agents, officers and directors and assigns from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) your breach or violation of these Terms; c) User Content posted on the Service and/or d) your violation of any law or regulation.\n\n## 23.  Limitation of Liability","metadata":{"id":652}}],["653",{"pageContent":"## 23.  Limitation of Liability\nIn no event shall Replit, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose. Replit’s total, cumulative liability for any claim, loss or damage arising out of or relating to these terms shall be one hundred dollars ($100.00 USD).\n\nNOTHING IN THESE TERMS SHALL LIMIT OR EXCLUDE OUR LIABILITY FOR: (X) DEATH OR PERSONAL INJURY RESULTING FROM OUR NEGLIGENCE OR THE NEGLIGENCE OF OUR EMPLOYEES, AGENTS OR SUBCONTRACTORS; (Y) FRAUD OR FRAUDULENT MISREPRESENTATION; OR (Z) ANY OTHER LIABILITY THAT CANNOT BE EXCLUDED BY APPLICABLE LAW.\n\n## 24.  Warranty Disclaimer\nYour use of the Service is at your sole risk. The Service is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. To the fullest extent permitted by law, the Service is provided without warranties of any kind, whether express or implied, including, but not limited to, implied warranties of merchantability, fitness for a particular purpose, non-infringement or course of performance.","metadata":{"id":653}}],["654",{"pageContent":"Replit, Inc. its subsidiaries, affiliates, and its licensors do not warrant that a) the Service will function uninterrupted, be error-free, secure or available at any particular time or location; b) any errors or defects will be corrected; c) the Service is free of viruses or other harmful components; d) the results of using the Service will meet your requirements; or (d) that the Service and/or any content made available through the Service will be accurate or complete.\n\nReplit assumes no liability or responsibility for any errors, mistakes or inaccuracies of content, any personal injury or property damage, of any nature whatsoever, resulting from your access to and use of the Service, any unauthorized access to or use of our Service, any interruption or cessation of transmission to or from the Service, any bugs, viruses, Trojan horses or the like which may be transmitted to or through our Service by any third party and/or any errors or omissions in any content or for any loss or damage of any kind incurred as a result of the use of the Service and/or any content posted, emailed, transmitted or otherwise made available via the Service.\n\nSome jurisdictions do not allow for limited liability or exclusion of implied warranties, so not all of the above limitations and/or warranty disclaimers may apply to you. You acknowledge and understand that the disclaimers, exclusions and limitations of liability set forth herein form an essential basis of the agreement between the parties hereto, that the parties have relied upon such disclaimers, exclusions and limitations of liability, and that absent such disclaimers, exclusions and limitation of liability, the terms and conditions of these Terms would be substantially different.\n\n## 25.  California Civil Code §1789.3","metadata":{"id":654}}],["655",{"pageContent":"## 25.  California Civil Code §1789.3\nIn accordance with California Civil Code §1789.3, you may report complaints to the California Department of Consumer Affairs by contacting them in writing at 400 R. Street, Sacramento, CA 95814, or by telephone at (800) 952-5210.\n\n## 26.  Governing Law\nThese Terms shall be governed and construed in accordance with the laws of California, United States, without regard to its conflict of law provisions.\n\nOur failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have had between us regarding the Service.\n\n## 27.  Assignment\nThese Terms and any rights and licenses granted hereunder, may not be transferred or assigned by you, but may be freely assigned by Replit without restriction.\n\n## 28.  Changes\nWe reserve the right, at our sole discretion, to modify or replace these Terms at any time.\n\nBy continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, you are no longer authorized to use the Service.\n\n\n## 29. hCaptcha","metadata":{"id":655}}],["656",{"pageContent":"## 29. hCaptcha\nWe use the hCaptcha anti-bot service (hereinafter \"hCaptcha\") on our website. This service is provided by Intuition Machines, Inc., a Delaware US Corporation (\"IMI\"). hCaptcha is used to check whether the data entered on our website (such as on a login page or contact form) has been entered by a human or by an automated program. To do this, hCaptcha analyzes the behavior of the website or mobile app visitor based on various characteristics. This analysis starts automatically as soon as the website or mobile app visitor enters a part of the website or app with hCaptcha enabled. For the analysis, hCaptcha evaluates various information (e.g. IP address, how long the visitor has been on the website or app, or mouse movements made by the user). The data collected during the analysis will be forwarded to IMI. hCaptcha analysis in the \"invisible mode\" may take place completely in the background. Website or app visitors are not advised that such an analysis is taking place if the user is not shown a challenge. Data processing is based on Art. 6(1)(f) of the GDPR (DSGVO): the website or mobile app operator has a legitimate interest in protecting its site from abusive automated crawling and spam. IMI acts as a \"data processor\" acting on behalf of its customers as defined under the GDPR, and a \"service provider\" for the purposes of the California Consumer Privacy Act (CCPA). For more information about hCaptcha and IMI's privacy policy and terms of use, please visit the following links: [https://hcaptcha.com/privacy/](https://hcaptcha.com/privacy/) and [https://hcaptcha.com/terms](https://hcaptcha.com/terms).\n\n## 30.  Contact Us\nIf you have any questions about these Terms, please contact us at [https://replit.com/support](https://replit.com/support).","metadata":{"id":656}}]]